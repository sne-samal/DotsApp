
lab4_task2.elf:     file format elf32-littlenios2
lab4_task2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000028f0 memsz 0x000028f0 flags r-x
    LOAD off    0x00003910 vaddr 0x00012910 paddr 0x00012aa4 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags rw-
    LOAD off    0x00003c38 vaddr 0x00012c38 paddr 0x00012c38 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000244c  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000344  000125cc  000125cc  000035cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000194  00012910  00012aa4  00003910  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00012c38  00012c38  00003c38  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012d88  00012d88  00003aa4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006c8  00000000  00000000  00003ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000ba31  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b50  00000000  00000000  0000fbc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004264  00000000  00000000  00013711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000acc  00000000  00000000  00017978  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021a4  00000000  00000000  00018444  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035a5  00000000  00000000  0001a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001db90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000588  00000000  00000000  0001dba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ff0e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001ff11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ff14  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ff15  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ff16  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001ff1a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001ff1e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001ff22  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001ff2b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001ff34  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001ff3d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003f  00000000  00000000  0001ff4f  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  0001ff8e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048a95  00000000  00000000  00024f97  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000125cc l    d  .rodata	00000000 .rodata
00012910 l    d  .rwdata	00000000 .rwdata
00012c38 l    d  .bss	00000000 .bss
00012d88 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_task2_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00012c74 l     O .bss	00000014 past_readings.3429
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fvwrite_small_str_mbf.c
00000000 l    df *ABS*	00000000 impure.c
00012910 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
000112b4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00011868 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00012783 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012a84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000129f0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012434 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00012c70 g     O .bss	00000004 alt_instruction_exception_handler
00011ed4 g     F .text	0000001c _malloc_usable_size_r
00012100 g     F .text	0000002c alt_main
000103d0 g     F .text	00000014 led_write
00010f64 g     F .text	00000080 _puts_r
00012c88 g     O .bss	00000100 alt_irq
00012aa4 g       *ABS*	00000000 __flash_rwdata_start
00012d88 g       *ABS*	00000000 __alt_heap_start
00010f18 g     F .text	0000004c printf
00010b7c g     F .text	00000060 memmove
000101bc g     F .text	00000080 sys_timer_isr
000105f0 g     F .text	0000009c read_chars
0001212c g     F .text	00000038 alt_putstr
00012a88 g     O .rwdata	00000004 jtag_uart
00012520 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010398 g     F .text	00000038 clear_input_buffer
00012328 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012c5c g     O .bss	00000004 errno
00012c68 g     O .bss	00000004 alt_argv
0001aa74 g       *ABS*	00000000 _gp
000102e4 g     F .text	000000b4 generate_text
00012a1c g     O .rwdata	00000030 alt_fd_list
000124a8 g     F .text	00000074 alt_find_dev
00010b54 g     F .text	00000028 memcpy
00010fe4 g     F .text	00000014 puts
00012528 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00012240 g     F .text	0000005c altera_avalon_jtag_uart_read
00010b2c g     F .text	00000014 malloc
00010edc g     F .text	0000003c _printf_r
00010810 g     F .text	00000064 .hidden __udivsi3
00010ff8 g     F .text	00000050 _sbrk_r
00012c40 g     O .bss	00000004 x_read_filtered
00012a8c g     O .rwdata	00000004 alt_max_fd
00011f8c g     F .text	00000094 alt_irq_register
00012a74 g     O .rwdata	00000004 _global_impure_ptr
00010e38 g     F .text	000000a4 _realloc_r
00012d88 g       *ABS*	00000000 __bss_end
00011f48 g     F .text	00000044 alt_getchar
00011298 g     F .text	0000001c strtol
00012c60 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00012a4c g     O .rwdata	00000028 alt_dev_null
00012430 g     F .text	00000004 alt_dcache_flush_all
0001023c g     F .text	0000006c print_text
00012aa4 g       *ABS*	00000000 __ram_rwdata_end
000104cc g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00012a90 g     O .rwdata	00000008 alt_dev_list
000121b0 g     F .text	00000060 write
00012910 g       *ABS*	00000000 __ram_rodata_end
00010a18 g     F .text	00000114 __sfvwrite_small_str_mbf
00012c44 g     O .bss	00000001 led
00010874 g     F .text	00000058 .hidden __umodsi3
00012d88 g       *ABS*	00000000 end
00010a0c g     F .text	0000000c _atoi_r
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001229c g     F .text	00000034 altera_avalon_jtag_uart_write
000108f4 g     F .text	0000007c _asprintf_r
000118d4 g     F .text	0000052c ___vfprintf_internal_r
00010bfc g     F .text	000000e4 _free_r
00010180 g     F .text	0000003c _start
00012c48 g     O .bss	00000004 level
00012230 g     F .text	00000010 alt_sys_init
000122d8 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
000108cc g     F .text	00000028 .hidden __mulsi3
00012910 g       *ABS*	00000000 __ram_rwdata_start
000125cc g       *ABS*	00000000 __ram_rodata_start
00012380 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
0001259c g     F .text	00000030 memcmp
00012d88 g       *ABS*	00000000 __alt_stack_base
0001243c g     F .text	0000006c alt_dev_llist_insert
00012164 g     F .text	0000004c sbrk
00011320 g     F .text	0000052c ___svfprintf_internal_r
0001068c g     F .text	0000006c no_filter_sample
00011e1c g     F .text	000000b8 __sfvwrite_small_dev
00012c38 g       *ABS*	00000000 __bss_start
00010bdc g     F .text	00000020 memset
000106f8 g     F .text	00000020 main
00012c64 g     O .bss	00000004 alt_envp
00020000 g       *ABS*	00000000 __alt_heap_limit
00011064 g     F .text	00000234 _strtol_r
00010ce0 g     F .text	00000158 _malloc_r
00012aa0 g     O .rwdata	00000004 alt_errno
00010718 g     F .text	00000084 .hidden __divsi3
000125cc g       *ABS*	00000000 __flash_rodata_start
00012210 g     F .text	00000020 alt_irq_init
00012c38 g     O .bss	00000004 jtag_flag
00010970 g     F .text	00000090 asprintf
00011ef0 g     F .text	00000058 _write_r
00012a78 g     O .rwdata	00000004 _impure_ptr
00012c6c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00012c3c g     O .bss	00000001 pwm
00012a98 g     O .rwdata	00000008 alt_fs_list
0001184c g     F .text	0000001c __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
000122d0 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00012aa4 g       *ABS*	00000000 _edata
00012d88 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
0001053c g     F .text	000000b4 filter_sample
0001079c g     F .text	00000074 .hidden __modsi3
00012a7c g     O .rwdata	00000004 __ctype_ptr__
000123d8 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010a00 g     F .text	0000000c atoi
00012682 g     O .rodata	00000101 _ctype_
00010498 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
000122ec g     F .text	00000020 alt_up_accelerometer_spi_read
0001230c g     F .text	0000001c alt_up_accelerometer_spi_write
00011048 g     F .text	0000001c strlen
00012c54 g     O .bss	00000004 __malloc_sbrk_start
000103e4 g     F .text	000000b4 filter_accel_int
0001251c g     F .text	00000004 alt_icache_flush_all
00012a80 g     O .rwdata	00000004 alt_priority_mask
00012c58 g     O .bss	00000004 __malloc_free_list
00011e00 g     F .text	0000001c __vfprintf_internal
000102a8 g     F .text	0000003c print_result
00012c4c g     O .bss	00000004 num_samples
00012c50 g     O .bss	00000004 uart_state
00012020 g     F .text	000000e0 alt_load
00010b40 g     F .text	00000014 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	840b2204 	addi	r16,r16,11400

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07f17 	ldw	r2,-32260(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6aa9d14 	ori	gp,gp,43636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	108b0e14 	ori	r2,r2,11320

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18cb6214 	ori	r3,r3,11656

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00120200 	call	12020 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00121000 	call	12100 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07517 	ldw	r2,-32300(gp)
   101cc:	d1607207 	ldb	r5,-32312(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c41004 	addi	r3,r3,4160
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
    // return 0;

}

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07403 	ldbu	r2,-32304(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07403 	ldbu	r2,-32304(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07403 	ldbu	r2,-32304(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07203 	ldbu	r2,-32312(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207205 	stb	zero,-32312(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07205 	stb	r2,-32312(gp)
   10238:	f800283a 	ret

0001023c <print_text>:

alt_32 x_read_filtered;


void print_text(char *text, const int length)
{
   1023c:	defffc04 	addi	sp,sp,-16
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
   10240:	280d883a 	mov	r6,r5
   10244:	00800104 	movi	r2,4
   10248:	01400074 	movhi	r5,1
   1024c:	200f883a 	mov	r7,r4

alt_32 x_read_filtered;


void print_text(char *text, const int length)
{
   10250:	dc000215 	stw	r16,8(sp)
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
   10254:	d8800015 	stw	r2,0(sp)

alt_32 x_read_filtered;


void print_text(char *text, const int length)
{
   10258:	2021883a 	mov	r16,r4
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
   1025c:	29497304 	addi	r5,r5,9676
   10260:	d889883a 	add	r4,sp,r2

alt_32 x_read_filtered;


void print_text(char *text, const int length)
{
   10264:	dfc00315 	stw	ra,12(sp)
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
   10268:	00109700 	call	10970 <asprintf>
    printf("Reading: %d", 1);
   1026c:	01000074 	movhi	r4,1
   10270:	01400044 	movi	r5,1
   10274:	21097e04 	addi	r4,r4,9720
   10278:	0010f180 	call	10f18 <printf>
    alt_putstr(printMsg);
   1027c:	d9000117 	ldw	r4,4(sp)
   10280:	001212c0 	call	1212c <alt_putstr>
    free(printMsg);
   10284:	d9000117 	ldw	r4,4(sp)
   10288:	0010b400 	call	10b40 <free>
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
   1028c:	01808004 	movi	r6,512
   10290:	000b883a 	mov	r5,zero
   10294:	8009883a 	mov	r4,r16
}
   10298:	dfc00317 	ldw	ra,12(sp)
   1029c:	dc000217 	ldw	r16,8(sp)
   102a0:	dec00404 	addi	sp,sp,16
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
    printf("Reading: %d", 1);
    alt_putstr(printMsg);
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
   102a4:	0010bdc1 	jmpi	10bdc <memset>

000102a8 <print_result>:
}

void print_result(int reading)
{
   102a8:	defffe04 	addi	sp,sp,-8
	char *value;
	asprintf(&value, "%d \n %c", reading, 0x4);
   102ac:	01400074 	movhi	r5,1
   102b0:	200d883a 	mov	r6,r4
   102b4:	01c00104 	movi	r7,4
   102b8:	29498104 	addi	r5,r5,9732
   102bc:	d809883a 	mov	r4,sp
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}

void print_result(int reading)
{
   102c0:	dfc00115 	stw	ra,4(sp)
	char *value;
	asprintf(&value, "%d \n %c", reading, 0x4);
   102c4:	00109700 	call	10970 <asprintf>
	alt_putstr(value);
   102c8:	d9000017 	ldw	r4,0(sp)
   102cc:	001212c0 	call	1212c <alt_putstr>
	free(value);
   102d0:	d9000017 	ldw	r4,0(sp)
   102d4:	0010b400 	call	10b40 <free>
}
   102d8:	dfc00117 	ldw	ra,4(sp)
   102dc:	dec00204 	addi	sp,sp,8
   102e0:	f800283a 	ret

000102e4 <generate_text>:

char generate_text(char curr, int *length, char *text, int *running)
{
   102e4:	2005883a 	mov	r2,r4
    if (curr == '\n')
   102e8:	21003fcc 	andi	r4,r4,255
   102ec:	2100201c 	xori	r4,r4,128
   102f0:	213fe004 	addi	r4,r4,-128
   102f4:	00c00284 	movi	r3,10
   102f8:	20c02626 	beq	r4,r3,10394 <generate_text+0xb0>
	alt_putstr(value);
	free(value);
}

char generate_text(char curr, int *length, char *text, int *running)
{
   102fc:	defff804 	addi	sp,sp,-32
   10300:	dd800615 	stw	r22,24(sp)
   10304:	dd400515 	stw	r21,20(sp)
   10308:	dd000415 	stw	r20,16(sp)
   1030c:	dcc00315 	stw	r19,12(sp)
   10310:	dc800215 	stw	r18,8(sp)
   10314:	dc400115 	stw	r17,4(sp)
   10318:	dc000015 	stw	r16,0(sp)
   1031c:	dfc00715 	stw	ra,28(sp)
   10320:	3829883a 	mov	r20,r7
   10324:	3025883a 	mov	r18,r6
   10328:	2827883a 	mov	r19,r5
    if (curr == '\n')
   1032c:	3023883a 	mov	r17,r6
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   10330:	057fffc4 	movi	r21,-1
   10334:	1821883a 	mov	r16,r3
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   10338:	05801f84 	movi	r22,126
    if (curr == '\n')
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   1033c:	10c03fcc 	andi	r3,r2,255
   10340:	18c0201c 	xori	r3,r3,128
   10344:	18ffe004 	addi	r3,r3,-128
   10348:	8c89c83a 	sub	r4,r17,r18
   1034c:	1d400726 	beq	r3,r21,1036c <generate_text+0x88>
   10350:	1c000626 	beq	r3,r16,1036c <generate_text+0x88>
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   10354:	1d80011e 	bne	r3,r22,1035c <generate_text+0x78>
        {
            *running = 0;
   10358:	a0000015 	stw	zero,0(r20)
//        {
//        	printf("Entering non filtering mode \n");
//        	no_filter_sample();
//        }

        text[idx] = newCurr;     // Add the next letter to the text buffer
   1035c:	88800005 	stb	r2,0(r17)
        idx++;                   // Keep track of the number of characters read
        newCurr = alt_getchar(); // Get the next character
   10360:	0011f480 	call	11f48 <alt_getchar>
   10364:	8c400044 	addi	r17,r17,1
   10368:	003ff406 	br	1033c <__alt_data_end+0xffff033c>
    }
    *length = idx;
   1036c:	99000015 	stw	r4,0(r19)

    return newCurr;
}
   10370:	dfc00717 	ldw	ra,28(sp)
   10374:	dd800617 	ldw	r22,24(sp)
   10378:	dd400517 	ldw	r21,20(sp)
   1037c:	dd000417 	ldw	r20,16(sp)
   10380:	dcc00317 	ldw	r19,12(sp)
   10384:	dc800217 	ldw	r18,8(sp)
   10388:	dc400117 	ldw	r17,4(sp)
   1038c:	dc000017 	ldw	r16,0(sp)
   10390:	dec00804 	addi	sp,sp,32
   10394:	f800283a 	ret

00010398 <clear_input_buffer>:

void clear_input_buffer() {
   10398:	defffd04 	addi	sp,sp,-12
   1039c:	dc400115 	stw	r17,4(sp)
   103a0:	dc000015 	stw	r16,0(sp)
   103a4:	dfc00215 	stw	ra,8(sp)
    int c;
    while ((c = alt_getchar()) != '\n' && c != EOF) { }
   103a8:	04400284 	movi	r17,10
   103ac:	043fffc4 	movi	r16,-1
   103b0:	0011f480 	call	11f48 <alt_getchar>
   103b4:	14400126 	beq	r2,r17,103bc <clear_input_buffer+0x24>
   103b8:	143ffd1e 	bne	r2,r16,103b0 <__alt_data_end+0xffff03b0>
}
   103bc:	dfc00217 	ldw	ra,8(sp)
   103c0:	dc400117 	ldw	r17,4(sp)
   103c4:	dc000017 	ldw	r16,0(sp)
   103c8:	dec00304 	addi	sp,sp,12
   103cc:	f800283a 	ret

000103d0 <led_write>:
    // return 0;

}

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   103d0:	008000b4 	movhi	r2,2
   103d4:	21003fcc 	andi	r4,r4,255
   103d8:	10841004 	addi	r2,r2,4160
   103dc:	11000035 	stwio	r4,0(r2)
   103e0:	f800283a 	ret

000103e4 <filter_accel_int>:
}

int filter_accel_int (int accel_reading) {
   103e4:	defff604 	addi	sp,sp,-40
	alt_32 filter_coeffs[FILTER_TAPS] = {
   103e8:	01400074 	movhi	r5,1

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

int filter_accel_int (int accel_reading) {
   103ec:	dc000515 	stw	r16,20(sp)
	alt_32 filter_coeffs[FILTER_TAPS] = {
   103f0:	01800504 	movi	r6,20

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

int filter_accel_int (int accel_reading) {
   103f4:	2021883a 	mov	r16,r4
	alt_32 filter_coeffs[FILTER_TAPS] = {
   103f8:	29499b04 	addi	r5,r5,9836
   103fc:	d809883a 	mov	r4,sp

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

int filter_accel_int (int accel_reading) {
   10400:	dcc00815 	stw	r19,32(sp)
   10404:	dc800715 	stw	r18,28(sp)
   10408:	dc400615 	stw	r17,24(sp)
   1040c:	dfc00915 	stw	ra,36(sp)
	alt_32 filter_coeffs[FILTER_TAPS] = {
   10410:	0010b540 	call	10b54 <memcpy>
	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
   10414:	00800074 	movhi	r2,1
   10418:	108b1d04 	addi	r2,r2,11380
   1041c:	10c00317 	ldw	r3,12(r2)
    }

    past_readings[0] = accel_reading;
   10420:	0023883a 	mov	r17,zero
	alt_32 filter_coeffs[FILTER_TAPS] = {
	    2, 2, 2, 2, 2
	};

	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;
   10424:	0025883a 	mov	r18,zero

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
   10428:	10c00415 	stw	r3,16(r2)
   1042c:	10c00217 	ldw	r3,8(r2)
    }

    past_readings[0] = accel_reading;

    for (int i = 0; i < FILTER_TAPS; i++) {
   10430:	04c00504 	movi	r19,20
	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
   10434:	10c00315 	stw	r3,12(r2)
   10438:	10c00117 	ldw	r3,4(r2)
   1043c:	10c00215 	stw	r3,8(r2)
   10440:	10c00017 	ldw	r3,0(r2)
    }

    past_readings[0] = accel_reading;
   10444:	14000015 	stw	r16,0(r2)
   10448:	1021883a 	mov	r16,r2
	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
   1044c:	10c00115 	stw	r3,4(r2)
    }

    past_readings[0] = accel_reading;

    for (int i = 0; i < FILTER_TAPS; i++) {
    	filtered_value += past_readings[i] * filter_coeffs[i];
   10450:	8c05883a 	add	r2,r17,r16
   10454:	dc47883a 	add	r3,sp,r17
   10458:	19400017 	ldw	r5,0(r3)
   1045c:	11000017 	ldw	r4,0(r2)
   10460:	8c400104 	addi	r17,r17,4
   10464:	00108cc0 	call	108cc <__mulsi3>
   10468:	90a5883a 	add	r18,r18,r2
        past_readings[i] = past_readings[i-1];
    }

    past_readings[0] = accel_reading;

    for (int i = 0; i < FILTER_TAPS; i++) {
   1046c:	8cfff81e 	bne	r17,r19,10450 <__alt_data_end+0xffff0450>
    	filtered_value += past_readings[i] * filter_coeffs[i];
    }
    // printf("Value: %d\n", filtered_value/10);
    return filtered_value/10;
   10470:	01400284 	movi	r5,10
   10474:	9009883a 	mov	r4,r18
   10478:	00107180 	call	10718 <__divsi3>

}
   1047c:	dfc00917 	ldw	ra,36(sp)
   10480:	dcc00817 	ldw	r19,32(sp)
   10484:	dc800717 	ldw	r18,28(sp)
   10488:	dc400617 	ldw	r17,24(sp)
   1048c:	dc000517 	ldw	r16,20(sp)
   10490:	dec00a04 	addi	sp,sp,40
   10494:	f800283a 	ret

00010498 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10498:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1049c:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   104a0:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   104a4:	10c001cc 	andi	r3,r2,7
   104a8:	00800204 	movi	r2,8
   104ac:	10cfc83a 	sub	r7,r2,r3
   104b0:	11ce983a 	sll	r7,r2,r7
   104b4:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   104b8:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   104bc:	3884b03a 	or	r2,r7,r2
   104c0:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   104c4:	29000015 	stw	r4,0(r5)
   104c8:	f800283a 	ret

000104cc <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   104cc:	defffe04 	addi	sp,sp,-8
   104d0:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   104d4:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   104d8:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   104dc:	84040904 	addi	r16,r16,4132
   104e0:	008000c4 	movi	r2,3
   104e4:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   104e8:	00c000b4 	movhi	r3,2
   104ec:	0005883a 	mov	r2,zero
   104f0:	18c40804 	addi	r3,r3,4128
   104f4:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   104f8:	00c000b4 	movhi	r3,2
   104fc:	18c40a04 	addi	r3,r3,4136
   10500:	01424004 	movi	r5,2304
   10504:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10508:	00c000b4 	movhi	r3,2
   1050c:	18c40b04 	addi	r3,r3,4140
   10510:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10514:	200d883a 	mov	r6,r4
   10518:	000b883a 	mov	r5,zero
   1051c:	01000044 	movi	r4,1
   10520:	0011f8c0 	call	11f8c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10524:	008001c4 	movi	r2,7
   10528:	80800035 	stwio	r2,0(r16)

}
   1052c:	dfc00117 	ldw	ra,4(sp)
   10530:	dc000017 	ldw	r16,0(sp)
   10534:	dec00204 	addi	sp,sp,8
   10538:	f800283a 	ret

0001053c <filter_sample>:

void filter_sample()
{
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1053c:	01000074 	movhi	r4,1
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void filter_sample()
{
   10540:	defff804 	addi	sp,sp,-32
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10544:	21098304 	addi	r4,r4,9740
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

void filter_sample()
{
   10548:	dfc00715 	stw	ra,28(sp)
   1054c:	dc000615 	stw	r16,24(sp)
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10550:	00122d00 	call	122d0 <alt_up_accelerometer_spi_open_dev>


	//int i = 0;
	timer_init(sys_timer_isr);
   10554:	01000074 	movhi	r4,1
   10558:	21006f04 	addi	r4,r4,444

void filter_sample()
{
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1055c:	1021883a 	mov	r16,r2


	//int i = 0;
	timer_init(sys_timer_isr);
   10560:	00104cc0 	call	104cc <timer_init>

//	while (i < ITERATIONS)
//	{
	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10564:	d9400504 	addi	r5,sp,20
   10568:	8009883a 	mov	r4,r16
   1056c:	00123280 	call	12328 <alt_up_accelerometer_spi_read_x_axis>
	x_read_filtered = (alt_32)filter_accel_int(x_read);
   10570:	d9000517 	ldw	r4,20(sp)
   10574:	00103e40 	call	103e4 <filter_accel_int>
	int number_to_send = x_read_filtered;
	char buffer[20];
	convert_read(x_read_filtered, & level, & led);
   10578:	d1a07404 	addi	r6,gp,-32304
   1057c:	d1607504 	addi	r5,gp,-32300
   10580:	1009883a 	mov	r4,r2
	timer_init(sys_timer_isr);

//	while (i < ITERATIONS)
//	{
	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
	x_read_filtered = (alt_32)filter_accel_int(x_read);
   10584:	d0a07315 	stw	r2,-32308(gp)
	int number_to_send = x_read_filtered;
	char buffer[20];
	convert_read(x_read_filtered, & level, & led);
   10588:	00104980 	call	10498 <convert_read>
    int bytes_written = altera_avalon_jtag_uart_write(&uart_state, buffer, strlen(buffer), 0);
   1058c:	d809883a 	mov	r4,sp
   10590:	00110480 	call	11048 <strlen>
   10594:	000f883a 	mov	r7,zero
   10598:	100d883a 	mov	r6,r2
   1059c:	d80b883a 	mov	r5,sp
   105a0:	d1207704 	addi	r4,gp,-32292
   105a4:	001229c0 	call	1229c <altera_avalon_jtag_uart_write>
	// print_result(x_read_filtered);
	//i++;
	//}
    if (bytes_written > 0) {
   105a8:	0080050e 	bge	zero,r2,105c0 <filter_sample+0x84>
    	printf("%d\n", x_read_filtered);
   105ac:	d1607317 	ldw	r5,-32308(gp)
   105b0:	01000074 	movhi	r4,1
   105b4:	21098904 	addi	r4,r4,9764
   105b8:	0010f180 	call	10f18 <printf>
   105bc:	00000806 	br	105e0 <filter_sample+0xa4>
    } else if (bytes_written == -EWOULDBLOCK) {
   105c0:	00fffd44 	movi	r3,-11
   105c4:	10c0031e 	bne	r2,r3,105d4 <filter_sample+0x98>
    	printf("Non-blocking mode: Write would block\n");
   105c8:	01000074 	movhi	r4,1
   105cc:	21098a04 	addi	r4,r4,9768
   105d0:	00000206 	br	105dc <filter_sample+0xa0>
    } else {
    	printf("Error writing data\n");
   105d4:	01000074 	movhi	r4,1
   105d8:	21099404 	addi	r4,r4,9808
   105dc:	0010fe40 	call	10fe4 <puts>
    }

	return;
}
   105e0:	dfc00717 	ldw	ra,28(sp)
   105e4:	dc000617 	ldw	r16,24(sp)
   105e8:	dec00804 	addi	sp,sp,32
   105ec:	f800283a 	ret

000105f0 <read_chars>:
    int c;
    while ((c = alt_getchar()) != '\n' && c != EOF) { }
}

void read_chars()
{
   105f0:	deff7c04 	addi	sp,sp,-528
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
    int running = 1;
   105f4:	00800044 	movi	r2,1
    int c;
    while ((c = alt_getchar()) != '\n' && c != EOF) { }
}

void read_chars()
{
   105f8:	dfc08315 	stw	ra,524(sp)
   105fc:	dc008215 	stw	r16,520(sp)
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
   10600:	d8008115 	stw	zero,516(sp)
    int running = 1;
   10604:	d8808015 	stw	r2,512(sp)


    while (running)
   10608:	d8808017 	ldw	r2,512(sp)
   1060c:	10001b26 	beq	r2,zero,1067c <read_chars+0x8c>
    {                                                                    // Keep running until QUITLETTER is encountered
        prevLetter = alt_getchar();                                      // Extract the first character (and create a hold until one arrives)
   10610:	0011f480 	call	11f48 <alt_getchar>
        prevLetter = generate_text(prevLetter, &length, text, &running); // Process input text
   10614:	11003fcc 	andi	r4,r2,255
   10618:	2100201c 	xori	r4,r4,128
   1061c:	d9c08004 	addi	r7,sp,512
   10620:	d80d883a 	mov	r6,sp
   10624:	d9408104 	addi	r5,sp,516
   10628:	213fe004 	addi	r4,r4,-128
   1062c:	00102e40 	call	102e4 <generate_text>
        num_samples = atoi(text);
   10630:	d809883a 	mov	r4,sp
   10634:	0010a000 	call	10a00 <atoi>
        int i = 0;
        printf("#####\n");
   10638:	01000074 	movhi	r4,1
   1063c:	21099904 	addi	r4,r4,9828

    while (running)
    {                                                                    // Keep running until QUITLETTER is encountered
        prevLetter = alt_getchar();                                      // Extract the first character (and create a hold until one arrives)
        prevLetter = generate_text(prevLetter, &length, text, &running); // Process input text
        num_samples = atoi(text);
   10640:	d0a07615 	stw	r2,-32296(gp)
        int i = 0;
   10644:	0021883a 	mov	r16,zero
        printf("#####\n");
   10648:	0010fe40 	call	10fe4 <puts>
        while(i < num_samples)
   1064c:	d0a07617 	ldw	r2,-32296(gp)
   10650:	8080030e 	bge	r16,r2,10660 <read_chars+0x70>
        {
        	filter_sample();
   10654:	001053c0 	call	1053c <filter_sample>
        	//print_text(text, length);
        	i++;
   10658:	84000044 	addi	r16,r16,1
   1065c:	003ffb06 	br	1064c <__alt_data_end+0xffff064c>
        }
        printf("#####\n");
   10660:	01000074 	movhi	r4,1
   10664:	21099904 	addi	r4,r4,9828
   10668:	0010fe40 	call	10fe4 <puts>
        print_text(text, length);                                        // Print input text
   1066c:	d9408117 	ldw	r5,516(sp)
   10670:	d809883a 	mov	r4,sp
   10674:	001023c0 	call	1023c <print_text>
   10678:	003fe306 	br	10608 <__alt_data_end+0xffff0608>
    }

    // return 0;

}
   1067c:	dfc08317 	ldw	ra,524(sp)
   10680:	dc008217 	ldw	r16,520(sp)
   10684:	dec08404 	addi	sp,sp,528
   10688:	f800283a 	ret

0001068c <no_filter_sample>:

void no_filter_sample()
{
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1068c:	01000074 	movhi	r4,1

	return;
}

void no_filter_sample()
{
   10690:	defffc04 	addi	sp,sp,-16
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10694:	21098304 	addi	r4,r4,9740

	return;
}

void no_filter_sample()
{
   10698:	dfc00315 	stw	ra,12(sp)
   1069c:	dc400215 	stw	r17,8(sp)
   106a0:	dc000115 	stw	r16,4(sp)
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   106a4:	00122d00 	call	122d0 <alt_up_accelerometer_spi_open_dev>


	int i = 0;
	timer_init(sys_timer_isr);
   106a8:	01000074 	movhi	r4,1
   106ac:	21006f04 	addi	r4,r4,444
   106b0:	04000234 	movhi	r16,8

void no_filter_sample()
{
	alt_32 x_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   106b4:	1023883a 	mov	r17,r2


	int i = 0;
	timer_init(sys_timer_isr);
   106b8:	84284804 	addi	r16,r16,-24288
   106bc:	00104cc0 	call	104cc <timer_init>

	while (i < ITERATIONS*100)
	{
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   106c0:	d80b883a 	mov	r5,sp
   106c4:	8809883a 	mov	r4,r17
   106c8:	00123280 	call	12328 <alt_up_accelerometer_spi_read_x_axis>
		convert_read(x_read, & level, & led);
   106cc:	d9000017 	ldw	r4,0(sp)
   106d0:	d1a07404 	addi	r6,gp,-32304
   106d4:	d1607504 	addi	r5,gp,-32300
   106d8:	843fffc4 	addi	r16,r16,-1
   106dc:	00104980 	call	10498 <convert_read>


	int i = 0;
	timer_init(sys_timer_isr);

	while (i < ITERATIONS*100)
   106e0:	803ff71e 	bne	r16,zero,106c0 <__alt_data_end+0xffff06c0>
		convert_read(x_read, & level, & led);
		i++;
	}

	return;
}
   106e4:	dfc00317 	ldw	ra,12(sp)
   106e8:	dc400217 	ldw	r17,8(sp)
   106ec:	dc000117 	ldw	r16,4(sp)
   106f0:	dec00404 	addi	sp,sp,16
   106f4:	f800283a 	ret

000106f8 <main>:



int main() {
   106f8:	deffff04 	addi	sp,sp,-4
   106fc:	dfc00015 	stw	ra,0(sp)
	read_chars();
   10700:	00105f00 	call	105f0 <read_chars>
    clear_input_buffer();
   10704:	00103980 	call	10398 <clear_input_buffer>
    return 0;
}
   10708:	0005883a 	mov	r2,zero
   1070c:	dfc00017 	ldw	ra,0(sp)
   10710:	dec00104 	addi	sp,sp,4
   10714:	f800283a 	ret

00010718 <__divsi3>:
   10718:	20001b16 	blt	r4,zero,10788 <__divsi3+0x70>
   1071c:	000f883a 	mov	r7,zero
   10720:	28001616 	blt	r5,zero,1077c <__divsi3+0x64>
   10724:	200d883a 	mov	r6,r4
   10728:	29001a2e 	bgeu	r5,r4,10794 <__divsi3+0x7c>
   1072c:	00800804 	movi	r2,32
   10730:	00c00044 	movi	r3,1
   10734:	00000106 	br	1073c <__divsi3+0x24>
   10738:	10000d26 	beq	r2,zero,10770 <__divsi3+0x58>
   1073c:	294b883a 	add	r5,r5,r5
   10740:	10bfffc4 	addi	r2,r2,-1
   10744:	18c7883a 	add	r3,r3,r3
   10748:	293ffb36 	bltu	r5,r4,10738 <__alt_data_end+0xffff0738>
   1074c:	0005883a 	mov	r2,zero
   10750:	18000726 	beq	r3,zero,10770 <__divsi3+0x58>
   10754:	0005883a 	mov	r2,zero
   10758:	31400236 	bltu	r6,r5,10764 <__divsi3+0x4c>
   1075c:	314dc83a 	sub	r6,r6,r5
   10760:	10c4b03a 	or	r2,r2,r3
   10764:	1806d07a 	srli	r3,r3,1
   10768:	280ad07a 	srli	r5,r5,1
   1076c:	183ffa1e 	bne	r3,zero,10758 <__alt_data_end+0xffff0758>
   10770:	38000126 	beq	r7,zero,10778 <__divsi3+0x60>
   10774:	0085c83a 	sub	r2,zero,r2
   10778:	f800283a 	ret
   1077c:	014bc83a 	sub	r5,zero,r5
   10780:	39c0005c 	xori	r7,r7,1
   10784:	003fe706 	br	10724 <__alt_data_end+0xffff0724>
   10788:	0109c83a 	sub	r4,zero,r4
   1078c:	01c00044 	movi	r7,1
   10790:	003fe306 	br	10720 <__alt_data_end+0xffff0720>
   10794:	00c00044 	movi	r3,1
   10798:	003fee06 	br	10754 <__alt_data_end+0xffff0754>

0001079c <__modsi3>:
   1079c:	20001716 	blt	r4,zero,107fc <__modsi3+0x60>
   107a0:	000f883a 	mov	r7,zero
   107a4:	2005883a 	mov	r2,r4
   107a8:	28001216 	blt	r5,zero,107f4 <__modsi3+0x58>
   107ac:	2900162e 	bgeu	r5,r4,10808 <__modsi3+0x6c>
   107b0:	01800804 	movi	r6,32
   107b4:	00c00044 	movi	r3,1
   107b8:	00000106 	br	107c0 <__modsi3+0x24>
   107bc:	30000a26 	beq	r6,zero,107e8 <__modsi3+0x4c>
   107c0:	294b883a 	add	r5,r5,r5
   107c4:	31bfffc4 	addi	r6,r6,-1
   107c8:	18c7883a 	add	r3,r3,r3
   107cc:	293ffb36 	bltu	r5,r4,107bc <__alt_data_end+0xffff07bc>
   107d0:	18000526 	beq	r3,zero,107e8 <__modsi3+0x4c>
   107d4:	1806d07a 	srli	r3,r3,1
   107d8:	11400136 	bltu	r2,r5,107e0 <__modsi3+0x44>
   107dc:	1145c83a 	sub	r2,r2,r5
   107e0:	280ad07a 	srli	r5,r5,1
   107e4:	183ffb1e 	bne	r3,zero,107d4 <__alt_data_end+0xffff07d4>
   107e8:	38000126 	beq	r7,zero,107f0 <__modsi3+0x54>
   107ec:	0085c83a 	sub	r2,zero,r2
   107f0:	f800283a 	ret
   107f4:	014bc83a 	sub	r5,zero,r5
   107f8:	003fec06 	br	107ac <__alt_data_end+0xffff07ac>
   107fc:	0109c83a 	sub	r4,zero,r4
   10800:	01c00044 	movi	r7,1
   10804:	003fe706 	br	107a4 <__alt_data_end+0xffff07a4>
   10808:	00c00044 	movi	r3,1
   1080c:	003ff106 	br	107d4 <__alt_data_end+0xffff07d4>

00010810 <__udivsi3>:
   10810:	200d883a 	mov	r6,r4
   10814:	2900152e 	bgeu	r5,r4,1086c <__udivsi3+0x5c>
   10818:	28001416 	blt	r5,zero,1086c <__udivsi3+0x5c>
   1081c:	00800804 	movi	r2,32
   10820:	00c00044 	movi	r3,1
   10824:	00000206 	br	10830 <__udivsi3+0x20>
   10828:	10000e26 	beq	r2,zero,10864 <__udivsi3+0x54>
   1082c:	28000516 	blt	r5,zero,10844 <__udivsi3+0x34>
   10830:	294b883a 	add	r5,r5,r5
   10834:	10bfffc4 	addi	r2,r2,-1
   10838:	18c7883a 	add	r3,r3,r3
   1083c:	293ffa36 	bltu	r5,r4,10828 <__alt_data_end+0xffff0828>
   10840:	18000826 	beq	r3,zero,10864 <__udivsi3+0x54>
   10844:	0005883a 	mov	r2,zero
   10848:	31400236 	bltu	r6,r5,10854 <__udivsi3+0x44>
   1084c:	314dc83a 	sub	r6,r6,r5
   10850:	10c4b03a 	or	r2,r2,r3
   10854:	1806d07a 	srli	r3,r3,1
   10858:	280ad07a 	srli	r5,r5,1
   1085c:	183ffa1e 	bne	r3,zero,10848 <__alt_data_end+0xffff0848>
   10860:	f800283a 	ret
   10864:	0005883a 	mov	r2,zero
   10868:	f800283a 	ret
   1086c:	00c00044 	movi	r3,1
   10870:	003ff406 	br	10844 <__alt_data_end+0xffff0844>

00010874 <__umodsi3>:
   10874:	2005883a 	mov	r2,r4
   10878:	2900122e 	bgeu	r5,r4,108c4 <__umodsi3+0x50>
   1087c:	28001116 	blt	r5,zero,108c4 <__umodsi3+0x50>
   10880:	01800804 	movi	r6,32
   10884:	00c00044 	movi	r3,1
   10888:	00000206 	br	10894 <__umodsi3+0x20>
   1088c:	30000c26 	beq	r6,zero,108c0 <__umodsi3+0x4c>
   10890:	28000516 	blt	r5,zero,108a8 <__umodsi3+0x34>
   10894:	294b883a 	add	r5,r5,r5
   10898:	31bfffc4 	addi	r6,r6,-1
   1089c:	18c7883a 	add	r3,r3,r3
   108a0:	293ffa36 	bltu	r5,r4,1088c <__alt_data_end+0xffff088c>
   108a4:	18000626 	beq	r3,zero,108c0 <__umodsi3+0x4c>
   108a8:	1806d07a 	srli	r3,r3,1
   108ac:	11400136 	bltu	r2,r5,108b4 <__umodsi3+0x40>
   108b0:	1145c83a 	sub	r2,r2,r5
   108b4:	280ad07a 	srli	r5,r5,1
   108b8:	183ffb1e 	bne	r3,zero,108a8 <__alt_data_end+0xffff08a8>
   108bc:	f800283a 	ret
   108c0:	f800283a 	ret
   108c4:	00c00044 	movi	r3,1
   108c8:	003ff706 	br	108a8 <__alt_data_end+0xffff08a8>

000108cc <__mulsi3>:
   108cc:	0005883a 	mov	r2,zero
   108d0:	20000726 	beq	r4,zero,108f0 <__mulsi3+0x24>
   108d4:	20c0004c 	andi	r3,r4,1
   108d8:	2008d07a 	srli	r4,r4,1
   108dc:	18000126 	beq	r3,zero,108e4 <__mulsi3+0x18>
   108e0:	1145883a 	add	r2,r2,r5
   108e4:	294b883a 	add	r5,r5,r5
   108e8:	203ffa1e 	bne	r4,zero,108d4 <__alt_data_end+0xffff08d4>
   108ec:	f800283a 	ret
   108f0:	f800283a 	ret

000108f4 <_asprintf_r>:
   108f4:	defff604 	addi	sp,sp,-40
   108f8:	dc000715 	stw	r16,28(sp)
   108fc:	2821883a 	mov	r16,r5
   10900:	dfc00815 	stw	ra,32(sp)
   10904:	d9c00915 	stw	r7,36(sp)
   10908:	0080a204 	movi	r2,648
   1090c:	d880000d 	sth	r2,0(sp)
   10910:	00bfffc4 	movi	r2,-1
   10914:	d880008d 	sth	r2,2(sp)
   10918:	00800074 	movhi	r2,1
   1091c:	10828604 	addi	r2,r2,2584
   10920:	d8800115 	stw	r2,4(sp)
   10924:	00800074 	movhi	r2,1
   10928:	10838e04 	addi	r2,r2,3640
   1092c:	d9c00904 	addi	r7,sp,36
   10930:	d80b883a 	mov	r5,sp
   10934:	d8000415 	stw	zero,16(sp)
   10938:	d8000215 	stw	zero,8(sp)
   1093c:	d8000515 	stw	zero,20(sp)
   10940:	d8000315 	stw	zero,12(sp)
   10944:	d8800615 	stw	r2,24(sp)
   10948:	00113200 	call	11320 <___svfprintf_internal_r>
   1094c:	10000416 	blt	r2,zero,10960 <_asprintf_r+0x6c>
   10950:	d8c00417 	ldw	r3,16(sp)
   10954:	18000005 	stb	zero,0(r3)
   10958:	d8c00217 	ldw	r3,8(sp)
   1095c:	80c00015 	stw	r3,0(r16)
   10960:	dfc00817 	ldw	ra,32(sp)
   10964:	dc000717 	ldw	r16,28(sp)
   10968:	dec00a04 	addi	sp,sp,40
   1096c:	f800283a 	ret

00010970 <asprintf>:
   10970:	defff504 	addi	sp,sp,-44
   10974:	dc000715 	stw	r16,28(sp)
   10978:	2021883a 	mov	r16,r4
   1097c:	dfc00815 	stw	ra,32(sp)
   10980:	d9800915 	stw	r6,36(sp)
   10984:	d9c00a15 	stw	r7,40(sp)
   10988:	0080a204 	movi	r2,648
   1098c:	d880000d 	sth	r2,0(sp)
   10990:	00bfffc4 	movi	r2,-1
   10994:	d880008d 	sth	r2,2(sp)
   10998:	00800074 	movhi	r2,1
   1099c:	10828604 	addi	r2,r2,2584
   109a0:	d8800115 	stw	r2,4(sp)
   109a4:	00800074 	movhi	r2,1
   109a8:	10838e04 	addi	r2,r2,3640
   109ac:	d8800615 	stw	r2,24(sp)
   109b0:	00800074 	movhi	r2,1
   109b4:	108a9e04 	addi	r2,r2,10872
   109b8:	11000017 	ldw	r4,0(r2)
   109bc:	280d883a 	mov	r6,r5
   109c0:	d9c00904 	addi	r7,sp,36
   109c4:	d80b883a 	mov	r5,sp
   109c8:	d8000415 	stw	zero,16(sp)
   109cc:	d8000215 	stw	zero,8(sp)
   109d0:	d8000515 	stw	zero,20(sp)
   109d4:	d8000315 	stw	zero,12(sp)
   109d8:	00113200 	call	11320 <___svfprintf_internal_r>
   109dc:	10000416 	blt	r2,zero,109f0 <asprintf+0x80>
   109e0:	d8c00417 	ldw	r3,16(sp)
   109e4:	18000005 	stb	zero,0(r3)
   109e8:	d8c00217 	ldw	r3,8(sp)
   109ec:	80c00015 	stw	r3,0(r16)
   109f0:	dfc00817 	ldw	ra,32(sp)
   109f4:	dc000717 	ldw	r16,28(sp)
   109f8:	dec00b04 	addi	sp,sp,44
   109fc:	f800283a 	ret

00010a00 <atoi>:
   10a00:	01800284 	movi	r6,10
   10a04:	000b883a 	mov	r5,zero
   10a08:	00112981 	jmpi	11298 <strtol>

00010a0c <_atoi_r>:
   10a0c:	01c00284 	movi	r7,10
   10a10:	000d883a 	mov	r6,zero
   10a14:	00110641 	jmpi	11064 <_strtol_r>

00010a18 <__sfvwrite_small_str_mbf>:
   10a18:	2880000b 	ldhu	r2,0(r5)
   10a1c:	10c0020c 	andi	r3,r2,8
   10a20:	18003826 	beq	r3,zero,10b04 <__sfvwrite_small_str_mbf+0xec>
   10a24:	28c0008f 	ldh	r3,2(r5)
   10a28:	defffa04 	addi	sp,sp,-24
   10a2c:	dc000015 	stw	r16,0(sp)
   10a30:	dfc00515 	stw	ra,20(sp)
   10a34:	dd000415 	stw	r20,16(sp)
   10a38:	dcc00315 	stw	r19,12(sp)
   10a3c:	dc800215 	stw	r18,8(sp)
   10a40:	dc400115 	stw	r17,4(sp)
   10a44:	2821883a 	mov	r16,r5
   10a48:	1800290e 	bge	r3,zero,10af0 <__sfvwrite_small_str_mbf+0xd8>
   10a4c:	10c0800c 	andi	r3,r2,512
   10a50:	18002726 	beq	r3,zero,10af0 <__sfvwrite_small_str_mbf+0xd8>
   10a54:	28c00517 	ldw	r3,20(r5)
   10a58:	3029883a 	mov	r20,r6
   10a5c:	3823883a 	mov	r17,r7
   10a60:	19c0150e 	bge	r3,r7,10ab8 <__sfvwrite_small_str_mbf+0xa0>
   10a64:	1080200c 	andi	r2,r2,128
   10a68:	10001426 	beq	r2,zero,10abc <__sfvwrite_small_str_mbf+0xa4>
   10a6c:	29400217 	ldw	r5,8(r5)
   10a70:	84800417 	ldw	r18,16(r16)
   10a74:	80800617 	ldw	r2,24(r16)
   10a78:	9165c83a 	sub	r18,r18,r5
   10a7c:	10001c26 	beq	r2,zero,10af0 <__sfvwrite_small_str_mbf+0xd8>
   10a80:	00c00074 	movhi	r3,1
   10a84:	18ca9e04 	addi	r3,r3,10872
   10a88:	19000017 	ldw	r4,0(r3)
   10a8c:	3ca7883a 	add	r19,r7,r18
   10a90:	980d883a 	mov	r6,r19
   10a94:	103ee83a 	callr	r2
   10a98:	10001526 	beq	r2,zero,10af0 <__sfvwrite_small_str_mbf+0xd8>
   10a9c:	14a5883a 	add	r18,r2,r18
   10aa0:	80800215 	stw	r2,8(r16)
   10aa4:	84800415 	stw	r18,16(r16)
   10aa8:	84c00315 	stw	r19,12(r16)
   10aac:	84400515 	stw	r17,20(r16)
   10ab0:	8807883a 	mov	r3,r17
   10ab4:	00000106 	br	10abc <__sfvwrite_small_str_mbf+0xa4>
   10ab8:	38c00116 	blt	r7,r3,10ac0 <__sfvwrite_small_str_mbf+0xa8>
   10abc:	1823883a 	mov	r17,r3
   10ac0:	81000417 	ldw	r4,16(r16)
   10ac4:	880d883a 	mov	r6,r17
   10ac8:	a00b883a 	mov	r5,r20
   10acc:	0010b7c0 	call	10b7c <memmove>
   10ad0:	80800517 	ldw	r2,20(r16)
   10ad4:	81c00417 	ldw	r7,16(r16)
   10ad8:	1445c83a 	sub	r2,r2,r17
   10adc:	3c63883a 	add	r17,r7,r17
   10ae0:	80800515 	stw	r2,20(r16)
   10ae4:	84400415 	stw	r17,16(r16)
   10ae8:	0005883a 	mov	r2,zero
   10aec:	00000706 	br	10b0c <__sfvwrite_small_str_mbf+0xf4>
   10af0:	8080000b 	ldhu	r2,0(r16)
   10af4:	10801014 	ori	r2,r2,64
   10af8:	8080000d 	sth	r2,0(r16)
   10afc:	00bfffc4 	movi	r2,-1
   10b00:	00000206 	br	10b0c <__sfvwrite_small_str_mbf+0xf4>
   10b04:	00bfffc4 	movi	r2,-1
   10b08:	f800283a 	ret
   10b0c:	dfc00517 	ldw	ra,20(sp)
   10b10:	dd000417 	ldw	r20,16(sp)
   10b14:	dcc00317 	ldw	r19,12(sp)
   10b18:	dc800217 	ldw	r18,8(sp)
   10b1c:	dc400117 	ldw	r17,4(sp)
   10b20:	dc000017 	ldw	r16,0(sp)
   10b24:	dec00604 	addi	sp,sp,24
   10b28:	f800283a 	ret

00010b2c <malloc>:
   10b2c:	00800074 	movhi	r2,1
   10b30:	108a9e04 	addi	r2,r2,10872
   10b34:	200b883a 	mov	r5,r4
   10b38:	11000017 	ldw	r4,0(r2)
   10b3c:	0010ce01 	jmpi	10ce0 <_malloc_r>

00010b40 <free>:
   10b40:	00800074 	movhi	r2,1
   10b44:	108a9e04 	addi	r2,r2,10872
   10b48:	200b883a 	mov	r5,r4
   10b4c:	11000017 	ldw	r4,0(r2)
   10b50:	0010bfc1 	jmpi	10bfc <_free_r>

00010b54 <memcpy>:
   10b54:	2005883a 	mov	r2,r4
   10b58:	2007883a 	mov	r3,r4
   10b5c:	218d883a 	add	r6,r4,r6
   10b60:	19800526 	beq	r3,r6,10b78 <memcpy+0x24>
   10b64:	29000003 	ldbu	r4,0(r5)
   10b68:	18c00044 	addi	r3,r3,1
   10b6c:	29400044 	addi	r5,r5,1
   10b70:	193fffc5 	stb	r4,-1(r3)
   10b74:	003ffa06 	br	10b60 <__alt_data_end+0xffff0b60>
   10b78:	f800283a 	ret

00010b7c <memmove>:
   10b7c:	2005883a 	mov	r2,r4
   10b80:	218f883a 	add	r7,r4,r6
   10b84:	29000236 	bltu	r5,r4,10b90 <memmove+0x14>
   10b88:	1007883a 	mov	r3,r2
   10b8c:	00000c06 	br	10bc0 <memmove+0x44>
   10b90:	2987883a 	add	r3,r5,r6
   10b94:	20fffc2e 	bgeu	r4,r3,10b88 <__alt_data_end+0xffff0b88>
   10b98:	380b883a 	mov	r5,r7
   10b9c:	30cdc83a 	sub	r6,r6,r3
   10ba0:	1989883a 	add	r4,r3,r6
   10ba4:	20000526 	beq	r4,zero,10bbc <memmove+0x40>
   10ba8:	18ffffc4 	addi	r3,r3,-1
   10bac:	19000003 	ldbu	r4,0(r3)
   10bb0:	297fffc4 	addi	r5,r5,-1
   10bb4:	29000005 	stb	r4,0(r5)
   10bb8:	003ff906 	br	10ba0 <__alt_data_end+0xffff0ba0>
   10bbc:	f800283a 	ret
   10bc0:	19c00526 	beq	r3,r7,10bd8 <memmove+0x5c>
   10bc4:	29000003 	ldbu	r4,0(r5)
   10bc8:	18c00044 	addi	r3,r3,1
   10bcc:	29400044 	addi	r5,r5,1
   10bd0:	193fffc5 	stb	r4,-1(r3)
   10bd4:	003ffa06 	br	10bc0 <__alt_data_end+0xffff0bc0>
   10bd8:	f800283a 	ret

00010bdc <memset>:
   10bdc:	2005883a 	mov	r2,r4
   10be0:	2007883a 	mov	r3,r4
   10be4:	218d883a 	add	r6,r4,r6
   10be8:	19800326 	beq	r3,r6,10bf8 <memset+0x1c>
   10bec:	19400005 	stb	r5,0(r3)
   10bf0:	18c00044 	addi	r3,r3,1
   10bf4:	003ffc06 	br	10be8 <__alt_data_end+0xffff0be8>
   10bf8:	f800283a 	ret

00010bfc <_free_r>:
   10bfc:	28003726 	beq	r5,zero,10cdc <_free_r+0xe0>
   10c00:	28ffff17 	ldw	r3,-4(r5)
   10c04:	28bfff04 	addi	r2,r5,-4
   10c08:	1800010e 	bge	r3,zero,10c10 <_free_r+0x14>
   10c0c:	10c5883a 	add	r2,r2,r3
   10c10:	01400074 	movhi	r5,1
   10c14:	294b1604 	addi	r5,r5,11352
   10c18:	28c00017 	ldw	r3,0(r5)
   10c1c:	280d883a 	mov	r6,r5
   10c20:	1800031e 	bne	r3,zero,10c30 <_free_r+0x34>
   10c24:	10000115 	stw	zero,4(r2)
   10c28:	28800015 	stw	r2,0(r5)
   10c2c:	f800283a 	ret
   10c30:	10c00c2e 	bgeu	r2,r3,10c64 <_free_r+0x68>
   10c34:	11000017 	ldw	r4,0(r2)
   10c38:	110b883a 	add	r5,r2,r4
   10c3c:	1940041e 	bne	r3,r5,10c50 <_free_r+0x54>
   10c40:	19400017 	ldw	r5,0(r3)
   10c44:	18c00117 	ldw	r3,4(r3)
   10c48:	2909883a 	add	r4,r5,r4
   10c4c:	11000015 	stw	r4,0(r2)
   10c50:	10c00115 	stw	r3,4(r2)
   10c54:	30800015 	stw	r2,0(r6)
   10c58:	f800283a 	ret
   10c5c:	11400336 	bltu	r2,r5,10c6c <_free_r+0x70>
   10c60:	2807883a 	mov	r3,r5
   10c64:	19400117 	ldw	r5,4(r3)
   10c68:	283ffc1e 	bne	r5,zero,10c5c <__alt_data_end+0xffff0c5c>
   10c6c:	19c00017 	ldw	r7,0(r3)
   10c70:	19cd883a 	add	r6,r3,r7
   10c74:	30800a1e 	bne	r6,r2,10ca0 <_free_r+0xa4>
   10c78:	10800017 	ldw	r2,0(r2)
   10c7c:	3885883a 	add	r2,r7,r2
   10c80:	18800015 	stw	r2,0(r3)
   10c84:	1889883a 	add	r4,r3,r2
   10c88:	2900141e 	bne	r5,r4,10cdc <_free_r+0xe0>
   10c8c:	29000017 	ldw	r4,0(r5)
   10c90:	2085883a 	add	r2,r4,r2
   10c94:	18800015 	stw	r2,0(r3)
   10c98:	28800117 	ldw	r2,4(r5)
   10c9c:	00000e06 	br	10cd8 <_free_r+0xdc>
   10ca0:	1180032e 	bgeu	r2,r6,10cb0 <_free_r+0xb4>
   10ca4:	00800304 	movi	r2,12
   10ca8:	20800015 	stw	r2,0(r4)
   10cac:	f800283a 	ret
   10cb0:	11000017 	ldw	r4,0(r2)
   10cb4:	110d883a 	add	r6,r2,r4
   10cb8:	2980061e 	bne	r5,r6,10cd4 <_free_r+0xd8>
   10cbc:	29800017 	ldw	r6,0(r5)
   10cc0:	3109883a 	add	r4,r6,r4
   10cc4:	11000015 	stw	r4,0(r2)
   10cc8:	29000117 	ldw	r4,4(r5)
   10ccc:	11000115 	stw	r4,4(r2)
   10cd0:	00000106 	br	10cd8 <_free_r+0xdc>
   10cd4:	11400115 	stw	r5,4(r2)
   10cd8:	18800115 	stw	r2,4(r3)
   10cdc:	f800283a 	ret

00010ce0 <_malloc_r>:
   10ce0:	defffb04 	addi	sp,sp,-20
   10ce4:	00bfff04 	movi	r2,-4
   10ce8:	dc400115 	stw	r17,4(sp)
   10cec:	2c4000c4 	addi	r17,r5,3
   10cf0:	88a2703a 	and	r17,r17,r2
   10cf4:	dc800215 	stw	r18,8(sp)
   10cf8:	dfc00415 	stw	ra,16(sp)
   10cfc:	dcc00315 	stw	r19,12(sp)
   10d00:	dc000015 	stw	r16,0(sp)
   10d04:	8c400204 	addi	r17,r17,8
   10d08:	00800304 	movi	r2,12
   10d0c:	2025883a 	mov	r18,r4
   10d10:	8880022e 	bgeu	r17,r2,10d1c <_malloc_r+0x3c>
   10d14:	1023883a 	mov	r17,r2
   10d18:	00000506 	br	10d30 <_malloc_r+0x50>
   10d1c:	8800040e 	bge	r17,zero,10d30 <_malloc_r+0x50>
   10d20:	00800304 	movi	r2,12
   10d24:	90800015 	stw	r2,0(r18)
   10d28:	0005883a 	mov	r2,zero
   10d2c:	00003b06 	br	10e1c <_malloc_r+0x13c>
   10d30:	897ffb36 	bltu	r17,r5,10d20 <__alt_data_end+0xffff0d20>
   10d34:	00800074 	movhi	r2,1
   10d38:	108b1604 	addi	r2,r2,11352
   10d3c:	10c00017 	ldw	r3,0(r2)
   10d40:	1009883a 	mov	r4,r2
   10d44:	1821883a 	mov	r16,r3
   10d48:	80000926 	beq	r16,zero,10d70 <_malloc_r+0x90>
   10d4c:	80800017 	ldw	r2,0(r16)
   10d50:	1445c83a 	sub	r2,r2,r17
   10d54:	10001516 	blt	r2,zero,10dac <_malloc_r+0xcc>
   10d58:	014002c4 	movi	r5,11
   10d5c:	28800d2e 	bgeu	r5,r2,10d94 <_malloc_r+0xb4>
   10d60:	80800015 	stw	r2,0(r16)
   10d64:	80a1883a 	add	r16,r16,r2
   10d68:	84400015 	stw	r17,0(r16)
   10d6c:	8000221e 	bne	r16,zero,10df8 <_malloc_r+0x118>
   10d70:	04000074 	movhi	r16,1
   10d74:	840b1504 	addi	r16,r16,11348
   10d78:	80800017 	ldw	r2,0(r16)
   10d7c:	10000e1e 	bne	r2,zero,10db8 <_malloc_r+0xd8>
   10d80:	000b883a 	mov	r5,zero
   10d84:	9009883a 	mov	r4,r18
   10d88:	0010ff80 	call	10ff8 <_sbrk_r>
   10d8c:	80800015 	stw	r2,0(r16)
   10d90:	00000906 	br	10db8 <_malloc_r+0xd8>
   10d94:	80800117 	ldw	r2,4(r16)
   10d98:	1c00021e 	bne	r3,r16,10da4 <_malloc_r+0xc4>
   10d9c:	20800015 	stw	r2,0(r4)
   10da0:	00001506 	br	10df8 <_malloc_r+0x118>
   10da4:	18800115 	stw	r2,4(r3)
   10da8:	00001306 	br	10df8 <_malloc_r+0x118>
   10dac:	8007883a 	mov	r3,r16
   10db0:	84000117 	ldw	r16,4(r16)
   10db4:	003fe406 	br	10d48 <__alt_data_end+0xffff0d48>
   10db8:	880b883a 	mov	r5,r17
   10dbc:	9009883a 	mov	r4,r18
   10dc0:	0010ff80 	call	10ff8 <_sbrk_r>
   10dc4:	04ffffc4 	movi	r19,-1
   10dc8:	14ffd526 	beq	r2,r19,10d20 <__alt_data_end+0xffff0d20>
   10dcc:	140000c4 	addi	r16,r2,3
   10dd0:	00ffff04 	movi	r3,-4
   10dd4:	80e0703a 	and	r16,r16,r3
   10dd8:	1400021e 	bne	r2,r16,10de4 <_malloc_r+0x104>
   10ddc:	84400015 	stw	r17,0(r16)
   10de0:	00000506 	br	10df8 <_malloc_r+0x118>
   10de4:	808bc83a 	sub	r5,r16,r2
   10de8:	9009883a 	mov	r4,r18
   10dec:	0010ff80 	call	10ff8 <_sbrk_r>
   10df0:	14fffa1e 	bne	r2,r19,10ddc <__alt_data_end+0xffff0ddc>
   10df4:	003fca06 	br	10d20 <__alt_data_end+0xffff0d20>
   10df8:	810002c4 	addi	r4,r16,11
   10dfc:	00bffe04 	movi	r2,-8
   10e00:	80c00104 	addi	r3,r16,4
   10e04:	2084703a 	and	r2,r4,r2
   10e08:	10c7c83a 	sub	r3,r2,r3
   10e0c:	18000326 	beq	r3,zero,10e1c <_malloc_r+0x13c>
   10e10:	80e1883a 	add	r16,r16,r3
   10e14:	00c7c83a 	sub	r3,zero,r3
   10e18:	80c00015 	stw	r3,0(r16)
   10e1c:	dfc00417 	ldw	ra,16(sp)
   10e20:	dcc00317 	ldw	r19,12(sp)
   10e24:	dc800217 	ldw	r18,8(sp)
   10e28:	dc400117 	ldw	r17,4(sp)
   10e2c:	dc000017 	ldw	r16,0(sp)
   10e30:	dec00504 	addi	sp,sp,20
   10e34:	f800283a 	ret

00010e38 <_realloc_r>:
   10e38:	2800021e 	bne	r5,zero,10e44 <_realloc_r+0xc>
   10e3c:	300b883a 	mov	r5,r6
   10e40:	0010ce01 	jmpi	10ce0 <_malloc_r>
   10e44:	defffb04 	addi	sp,sp,-20
   10e48:	dc400115 	stw	r17,4(sp)
   10e4c:	dc000015 	stw	r16,0(sp)
   10e50:	dfc00415 	stw	ra,16(sp)
   10e54:	dcc00315 	stw	r19,12(sp)
   10e58:	dc800215 	stw	r18,8(sp)
   10e5c:	3023883a 	mov	r17,r6
   10e60:	2821883a 	mov	r16,r5
   10e64:	3000021e 	bne	r6,zero,10e70 <_realloc_r+0x38>
   10e68:	0010bfc0 	call	10bfc <_free_r>
   10e6c:	00001306 	br	10ebc <_realloc_r+0x84>
   10e70:	2025883a 	mov	r18,r4
   10e74:	0011ed40 	call	11ed4 <_malloc_usable_size_r>
   10e78:	14400e2e 	bgeu	r2,r17,10eb4 <_realloc_r+0x7c>
   10e7c:	880b883a 	mov	r5,r17
   10e80:	9009883a 	mov	r4,r18
   10e84:	0010ce00 	call	10ce0 <_malloc_r>
   10e88:	1027883a 	mov	r19,r2
   10e8c:	10000b26 	beq	r2,zero,10ebc <_realloc_r+0x84>
   10e90:	880d883a 	mov	r6,r17
   10e94:	800b883a 	mov	r5,r16
   10e98:	1009883a 	mov	r4,r2
   10e9c:	0010b540 	call	10b54 <memcpy>
   10ea0:	800b883a 	mov	r5,r16
   10ea4:	9009883a 	mov	r4,r18
   10ea8:	0010bfc0 	call	10bfc <_free_r>
   10eac:	9805883a 	mov	r2,r19
   10eb0:	00000306 	br	10ec0 <_realloc_r+0x88>
   10eb4:	8005883a 	mov	r2,r16
   10eb8:	00000106 	br	10ec0 <_realloc_r+0x88>
   10ebc:	0005883a 	mov	r2,zero
   10ec0:	dfc00417 	ldw	ra,16(sp)
   10ec4:	dcc00317 	ldw	r19,12(sp)
   10ec8:	dc800217 	ldw	r18,8(sp)
   10ecc:	dc400117 	ldw	r17,4(sp)
   10ed0:	dc000017 	ldw	r16,0(sp)
   10ed4:	dec00504 	addi	sp,sp,20
   10ed8:	f800283a 	ret

00010edc <_printf_r>:
   10edc:	defffd04 	addi	sp,sp,-12
   10ee0:	dfc00015 	stw	ra,0(sp)
   10ee4:	d9800115 	stw	r6,4(sp)
   10ee8:	d9c00215 	stw	r7,8(sp)
   10eec:	20c00217 	ldw	r3,8(r4)
   10ef0:	01800074 	movhi	r6,1
   10ef4:	31878704 	addi	r6,r6,7708
   10ef8:	19800115 	stw	r6,4(r3)
   10efc:	280d883a 	mov	r6,r5
   10f00:	21400217 	ldw	r5,8(r4)
   10f04:	d9c00104 	addi	r7,sp,4
   10f08:	00118d40 	call	118d4 <___vfprintf_internal_r>
   10f0c:	dfc00017 	ldw	ra,0(sp)
   10f10:	dec00304 	addi	sp,sp,12
   10f14:	f800283a 	ret

00010f18 <printf>:
   10f18:	defffc04 	addi	sp,sp,-16
   10f1c:	dfc00015 	stw	ra,0(sp)
   10f20:	d9400115 	stw	r5,4(sp)
   10f24:	d9800215 	stw	r6,8(sp)
   10f28:	d9c00315 	stw	r7,12(sp)
   10f2c:	00800074 	movhi	r2,1
   10f30:	108a9e04 	addi	r2,r2,10872
   10f34:	10800017 	ldw	r2,0(r2)
   10f38:	01400074 	movhi	r5,1
   10f3c:	29478704 	addi	r5,r5,7708
   10f40:	10c00217 	ldw	r3,8(r2)
   10f44:	d9800104 	addi	r6,sp,4
   10f48:	19400115 	stw	r5,4(r3)
   10f4c:	200b883a 	mov	r5,r4
   10f50:	11000217 	ldw	r4,8(r2)
   10f54:	0011e000 	call	11e00 <__vfprintf_internal>
   10f58:	dfc00017 	ldw	ra,0(sp)
   10f5c:	dec00404 	addi	sp,sp,16
   10f60:	f800283a 	ret

00010f64 <_puts_r>:
   10f64:	defffd04 	addi	sp,sp,-12
   10f68:	dc000015 	stw	r16,0(sp)
   10f6c:	2021883a 	mov	r16,r4
   10f70:	2809883a 	mov	r4,r5
   10f74:	dfc00215 	stw	ra,8(sp)
   10f78:	dc400115 	stw	r17,4(sp)
   10f7c:	2823883a 	mov	r17,r5
   10f80:	00110480 	call	11048 <strlen>
   10f84:	81400217 	ldw	r5,8(r16)
   10f88:	01000074 	movhi	r4,1
   10f8c:	21078704 	addi	r4,r4,7708
   10f90:	29000115 	stw	r4,4(r5)
   10f94:	100f883a 	mov	r7,r2
   10f98:	880d883a 	mov	r6,r17
   10f9c:	8009883a 	mov	r4,r16
   10fa0:	0011e1c0 	call	11e1c <__sfvwrite_small_dev>
   10fa4:	00ffffc4 	movi	r3,-1
   10fa8:	10c00926 	beq	r2,r3,10fd0 <_puts_r+0x6c>
   10fac:	81400217 	ldw	r5,8(r16)
   10fb0:	01800074 	movhi	r6,1
   10fb4:	01c00044 	movi	r7,1
   10fb8:	28800117 	ldw	r2,4(r5)
   10fbc:	3189a004 	addi	r6,r6,9856
   10fc0:	8009883a 	mov	r4,r16
   10fc4:	103ee83a 	callr	r2
   10fc8:	10bfffe0 	cmpeqi	r2,r2,-1
   10fcc:	0085c83a 	sub	r2,zero,r2
   10fd0:	dfc00217 	ldw	ra,8(sp)
   10fd4:	dc400117 	ldw	r17,4(sp)
   10fd8:	dc000017 	ldw	r16,0(sp)
   10fdc:	dec00304 	addi	sp,sp,12
   10fe0:	f800283a 	ret

00010fe4 <puts>:
   10fe4:	00800074 	movhi	r2,1
   10fe8:	108a9e04 	addi	r2,r2,10872
   10fec:	200b883a 	mov	r5,r4
   10ff0:	11000017 	ldw	r4,0(r2)
   10ff4:	0010f641 	jmpi	10f64 <_puts_r>

00010ff8 <_sbrk_r>:
   10ff8:	defffd04 	addi	sp,sp,-12
   10ffc:	dc000015 	stw	r16,0(sp)
   11000:	04000074 	movhi	r16,1
   11004:	dc400115 	stw	r17,4(sp)
   11008:	840b1704 	addi	r16,r16,11356
   1100c:	2023883a 	mov	r17,r4
   11010:	2809883a 	mov	r4,r5
   11014:	dfc00215 	stw	ra,8(sp)
   11018:	80000015 	stw	zero,0(r16)
   1101c:	00121640 	call	12164 <sbrk>
   11020:	00ffffc4 	movi	r3,-1
   11024:	10c0031e 	bne	r2,r3,11034 <_sbrk_r+0x3c>
   11028:	80c00017 	ldw	r3,0(r16)
   1102c:	18000126 	beq	r3,zero,11034 <_sbrk_r+0x3c>
   11030:	88c00015 	stw	r3,0(r17)
   11034:	dfc00217 	ldw	ra,8(sp)
   11038:	dc400117 	ldw	r17,4(sp)
   1103c:	dc000017 	ldw	r16,0(sp)
   11040:	dec00304 	addi	sp,sp,12
   11044:	f800283a 	ret

00011048 <strlen>:
   11048:	2005883a 	mov	r2,r4
   1104c:	10c00007 	ldb	r3,0(r2)
   11050:	18000226 	beq	r3,zero,1105c <strlen+0x14>
   11054:	10800044 	addi	r2,r2,1
   11058:	003ffc06 	br	1104c <__alt_data_end+0xffff104c>
   1105c:	1105c83a 	sub	r2,r2,r4
   11060:	f800283a 	ret

00011064 <_strtol_r>:
   11064:	00800074 	movhi	r2,1
   11068:	defff304 	addi	sp,sp,-52
   1106c:	108a9f04 	addi	r2,r2,10876
   11070:	dcc00615 	stw	r19,24(sp)
   11074:	14c00017 	ldw	r19,0(r2)
   11078:	df000b15 	stw	fp,44(sp)
   1107c:	dd400815 	stw	r21,32(sp)
   11080:	dd000715 	stw	r20,28(sp)
   11084:	dc800515 	stw	r18,20(sp)
   11088:	202b883a 	mov	r21,r4
   1108c:	dfc00c15 	stw	ra,48(sp)
   11090:	ddc00a15 	stw	r23,40(sp)
   11094:	dd800915 	stw	r22,36(sp)
   11098:	dc400415 	stw	r17,16(sp)
   1109c:	dc000315 	stw	r16,12(sp)
   110a0:	2829883a 	mov	r20,r5
   110a4:	3039883a 	mov	fp,r6
   110a8:	3825883a 	mov	r18,r7
   110ac:	2809883a 	mov	r4,r5
   110b0:	2005883a 	mov	r2,r4
   110b4:	14400003 	ldbu	r17,0(r2)
   110b8:	24000044 	addi	r16,r4,1
   110bc:	8009883a 	mov	r4,r16
   110c0:	9c47883a 	add	r3,r19,r17
   110c4:	18c00043 	ldbu	r3,1(r3)
   110c8:	18c0020c 	andi	r3,r3,8
   110cc:	183ff81e 	bne	r3,zero,110b0 <__alt_data_end+0xffff10b0>
   110d0:	00c00b44 	movi	r3,45
   110d4:	88c0041e 	bne	r17,r3,110e8 <_strtol_r+0x84>
   110d8:	14000084 	addi	r16,r2,2
   110dc:	14400043 	ldbu	r17,1(r2)
   110e0:	05c00044 	movi	r23,1
   110e4:	00000506 	br	110fc <_strtol_r+0x98>
   110e8:	00c00ac4 	movi	r3,43
   110ec:	88c0021e 	bne	r17,r3,110f8 <_strtol_r+0x94>
   110f0:	14400043 	ldbu	r17,1(r2)
   110f4:	14000084 	addi	r16,r2,2
   110f8:	002f883a 	mov	r23,zero
   110fc:	90000326 	beq	r18,zero,1110c <_strtol_r+0xa8>
   11100:	00800404 	movi	r2,16
   11104:	90800a1e 	bne	r18,r2,11130 <_strtol_r+0xcc>
   11108:	00005406 	br	1125c <_strtol_r+0x1f8>
   1110c:	00800c04 	movi	r2,48
   11110:	8880501e 	bne	r17,r2,11254 <_strtol_r+0x1f0>
   11114:	80800003 	ldbu	r2,0(r16)
   11118:	00c01604 	movi	r3,88
   1111c:	108037cc 	andi	r2,r2,223
   11120:	10c0481e 	bne	r2,r3,11244 <_strtol_r+0x1e0>
   11124:	84400043 	ldbu	r17,1(r16)
   11128:	04800404 	movi	r18,16
   1112c:	84000084 	addi	r16,r16,2
   11130:	00e00034 	movhi	r3,32768
   11134:	18ffffc4 	addi	r3,r3,-1
   11138:	b8c7883a 	add	r3,r23,r3
   1113c:	1809883a 	mov	r4,r3
   11140:	900b883a 	mov	r5,r18
   11144:	d8c00015 	stw	r3,0(sp)
   11148:	00108740 	call	10874 <__umodsi3>
   1114c:	d8c00017 	ldw	r3,0(sp)
   11150:	900b883a 	mov	r5,r18
   11154:	102d883a 	mov	r22,r2
   11158:	1809883a 	mov	r4,r3
   1115c:	00108100 	call	10810 <__udivsi3>
   11160:	100d883a 	mov	r6,r2
   11164:	0009883a 	mov	r4,zero
   11168:	0005883a 	mov	r2,zero
   1116c:	01c00044 	movi	r7,1
   11170:	023fffc4 	movi	r8,-1
   11174:	9c47883a 	add	r3,r19,r17
   11178:	18c00043 	ldbu	r3,1(r3)
   1117c:	1940010c 	andi	r5,r3,4
   11180:	28000226 	beq	r5,zero,1118c <_strtol_r+0x128>
   11184:	8c7ff404 	addi	r17,r17,-48
   11188:	00000706 	br	111a8 <_strtol_r+0x144>
   1118c:	18c000cc 	andi	r3,r3,3
   11190:	18001a26 	beq	r3,zero,111fc <_strtol_r+0x198>
   11194:	19c00226 	beq	r3,r7,111a0 <_strtol_r+0x13c>
   11198:	00c015c4 	movi	r3,87
   1119c:	00000106 	br	111a4 <_strtol_r+0x140>
   111a0:	00c00dc4 	movi	r3,55
   111a4:	88e3c83a 	sub	r17,r17,r3
   111a8:	8c80140e 	bge	r17,r18,111fc <_strtol_r+0x198>
   111ac:	22001026 	beq	r4,r8,111f0 <_strtol_r+0x18c>
   111b0:	30800e36 	bltu	r6,r2,111ec <_strtol_r+0x188>
   111b4:	1180011e 	bne	r2,r6,111bc <_strtol_r+0x158>
   111b8:	b4400c16 	blt	r22,r17,111ec <_strtol_r+0x188>
   111bc:	1009883a 	mov	r4,r2
   111c0:	900b883a 	mov	r5,r18
   111c4:	d9800015 	stw	r6,0(sp)
   111c8:	d9c00115 	stw	r7,4(sp)
   111cc:	da000215 	stw	r8,8(sp)
   111d0:	00108cc0 	call	108cc <__mulsi3>
   111d4:	8885883a 	add	r2,r17,r2
   111d8:	01000044 	movi	r4,1
   111dc:	d9800017 	ldw	r6,0(sp)
   111e0:	d9c00117 	ldw	r7,4(sp)
   111e4:	da000217 	ldw	r8,8(sp)
   111e8:	00000106 	br	111f0 <_strtol_r+0x18c>
   111ec:	013fffc4 	movi	r4,-1
   111f0:	84400003 	ldbu	r17,0(r16)
   111f4:	84000044 	addi	r16,r16,1
   111f8:	003fde06 	br	11174 <__alt_data_end+0xffff1174>
   111fc:	00ffffc4 	movi	r3,-1
   11200:	20c0071e 	bne	r4,r3,11220 <_strtol_r+0x1bc>
   11204:	00a00034 	movhi	r2,32768
   11208:	10c5883a 	add	r2,r2,r3
   1120c:	00c00884 	movi	r3,34
   11210:	a8c00015 	stw	r3,0(r21)
   11214:	b885883a 	add	r2,r23,r2
   11218:	e000051e 	bne	fp,zero,11230 <_strtol_r+0x1cc>
   1121c:	00001206 	br	11268 <_strtol_r+0x204>
   11220:	b8000126 	beq	r23,zero,11228 <_strtol_r+0x1c4>
   11224:	0085c83a 	sub	r2,zero,r2
   11228:	e0000f26 	beq	fp,zero,11268 <_strtol_r+0x204>
   1122c:	20000226 	beq	r4,zero,11238 <_strtol_r+0x1d4>
   11230:	843fffc4 	addi	r16,r16,-1
   11234:	00000106 	br	1123c <_strtol_r+0x1d8>
   11238:	a021883a 	mov	r16,r20
   1123c:	e4000015 	stw	r16,0(fp)
   11240:	00000906 	br	11268 <_strtol_r+0x204>
   11244:	04400c04 	movi	r17,48
   11248:	903fb91e 	bne	r18,zero,11130 <__alt_data_end+0xffff1130>
   1124c:	04800204 	movi	r18,8
   11250:	003fb706 	br	11130 <__alt_data_end+0xffff1130>
   11254:	04800284 	movi	r18,10
   11258:	003fb506 	br	11130 <__alt_data_end+0xffff1130>
   1125c:	00800c04 	movi	r2,48
   11260:	88bfac26 	beq	r17,r2,11114 <__alt_data_end+0xffff1114>
   11264:	003fb206 	br	11130 <__alt_data_end+0xffff1130>
   11268:	dfc00c17 	ldw	ra,48(sp)
   1126c:	df000b17 	ldw	fp,44(sp)
   11270:	ddc00a17 	ldw	r23,40(sp)
   11274:	dd800917 	ldw	r22,36(sp)
   11278:	dd400817 	ldw	r21,32(sp)
   1127c:	dd000717 	ldw	r20,28(sp)
   11280:	dcc00617 	ldw	r19,24(sp)
   11284:	dc800517 	ldw	r18,20(sp)
   11288:	dc400417 	ldw	r17,16(sp)
   1128c:	dc000317 	ldw	r16,12(sp)
   11290:	dec00d04 	addi	sp,sp,52
   11294:	f800283a 	ret

00011298 <strtol>:
   11298:	00800074 	movhi	r2,1
   1129c:	108a9e04 	addi	r2,r2,10872
   112a0:	300f883a 	mov	r7,r6
   112a4:	280d883a 	mov	r6,r5
   112a8:	200b883a 	mov	r5,r4
   112ac:	11000017 	ldw	r4,0(r2)
   112b0:	00110641 	jmpi	11064 <_strtol_r>

000112b4 <print_repeat>:
   112b4:	defffb04 	addi	sp,sp,-20
   112b8:	dc800315 	stw	r18,12(sp)
   112bc:	dc400215 	stw	r17,8(sp)
   112c0:	dc000115 	stw	r16,4(sp)
   112c4:	dfc00415 	stw	ra,16(sp)
   112c8:	2025883a 	mov	r18,r4
   112cc:	2823883a 	mov	r17,r5
   112d0:	d9800005 	stb	r6,0(sp)
   112d4:	3821883a 	mov	r16,r7
   112d8:	04000a0e 	bge	zero,r16,11304 <print_repeat+0x50>
   112dc:	88800117 	ldw	r2,4(r17)
   112e0:	01c00044 	movi	r7,1
   112e4:	d80d883a 	mov	r6,sp
   112e8:	880b883a 	mov	r5,r17
   112ec:	9009883a 	mov	r4,r18
   112f0:	103ee83a 	callr	r2
   112f4:	843fffc4 	addi	r16,r16,-1
   112f8:	103ff726 	beq	r2,zero,112d8 <__alt_data_end+0xffff12d8>
   112fc:	00bfffc4 	movi	r2,-1
   11300:	00000106 	br	11308 <print_repeat+0x54>
   11304:	0005883a 	mov	r2,zero
   11308:	dfc00417 	ldw	ra,16(sp)
   1130c:	dc800317 	ldw	r18,12(sp)
   11310:	dc400217 	ldw	r17,8(sp)
   11314:	dc000117 	ldw	r16,4(sp)
   11318:	dec00504 	addi	sp,sp,20
   1131c:	f800283a 	ret

00011320 <___svfprintf_internal_r>:
   11320:	deffe504 	addi	sp,sp,-108
   11324:	d8c00804 	addi	r3,sp,32
   11328:	ddc01815 	stw	r23,96(sp)
   1132c:	dd801715 	stw	r22,92(sp)
   11330:	dd401615 	stw	r21,88(sp)
   11334:	dd001515 	stw	r20,84(sp)
   11338:	dcc01415 	stw	r19,80(sp)
   1133c:	dc801315 	stw	r18,76(sp)
   11340:	dc401215 	stw	r17,72(sp)
   11344:	dc001115 	stw	r16,68(sp)
   11348:	dfc01a15 	stw	ra,104(sp)
   1134c:	df001915 	stw	fp,100(sp)
   11350:	2029883a 	mov	r20,r4
   11354:	2823883a 	mov	r17,r5
   11358:	382d883a 	mov	r22,r7
   1135c:	d9800f15 	stw	r6,60(sp)
   11360:	0021883a 	mov	r16,zero
   11364:	d8000e15 	stw	zero,56(sp)
   11368:	d8000a15 	stw	zero,40(sp)
   1136c:	002b883a 	mov	r21,zero
   11370:	0027883a 	mov	r19,zero
   11374:	0025883a 	mov	r18,zero
   11378:	d8000c15 	stw	zero,48(sp)
   1137c:	d8000b15 	stw	zero,44(sp)
   11380:	002f883a 	mov	r23,zero
   11384:	d8c00915 	stw	r3,36(sp)
   11388:	d8c00f17 	ldw	r3,60(sp)
   1138c:	19000003 	ldbu	r4,0(r3)
   11390:	20803fcc 	andi	r2,r4,255
   11394:	1080201c 	xori	r2,r2,128
   11398:	10bfe004 	addi	r2,r2,-128
   1139c:	10011e26 	beq	r2,zero,11818 <___svfprintf_internal_r+0x4f8>
   113a0:	00c00044 	movi	r3,1
   113a4:	b8c01426 	beq	r23,r3,113f8 <___svfprintf_internal_r+0xd8>
   113a8:	1dc00216 	blt	r3,r23,113b4 <___svfprintf_internal_r+0x94>
   113ac:	b8000626 	beq	r23,zero,113c8 <___svfprintf_internal_r+0xa8>
   113b0:	00011506 	br	11808 <___svfprintf_internal_r+0x4e8>
   113b4:	01400084 	movi	r5,2
   113b8:	b9401d26 	beq	r23,r5,11430 <___svfprintf_internal_r+0x110>
   113bc:	014000c4 	movi	r5,3
   113c0:	b9402b26 	beq	r23,r5,11470 <___svfprintf_internal_r+0x150>
   113c4:	00011006 	br	11808 <___svfprintf_internal_r+0x4e8>
   113c8:	01400944 	movi	r5,37
   113cc:	1140fc26 	beq	r2,r5,117c0 <___svfprintf_internal_r+0x4a0>
   113d0:	88800117 	ldw	r2,4(r17)
   113d4:	d9000005 	stb	r4,0(sp)
   113d8:	01c00044 	movi	r7,1
   113dc:	d80d883a 	mov	r6,sp
   113e0:	880b883a 	mov	r5,r17
   113e4:	a009883a 	mov	r4,r20
   113e8:	103ee83a 	callr	r2
   113ec:	1000d81e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   113f0:	84000044 	addi	r16,r16,1
   113f4:	00010406 	br	11808 <___svfprintf_internal_r+0x4e8>
   113f8:	01400c04 	movi	r5,48
   113fc:	1140fa26 	beq	r2,r5,117e8 <___svfprintf_internal_r+0x4c8>
   11400:	01400944 	movi	r5,37
   11404:	11400a1e 	bne	r2,r5,11430 <___svfprintf_internal_r+0x110>
   11408:	d8800005 	stb	r2,0(sp)
   1140c:	88800117 	ldw	r2,4(r17)
   11410:	b80f883a 	mov	r7,r23
   11414:	d80d883a 	mov	r6,sp
   11418:	880b883a 	mov	r5,r17
   1141c:	a009883a 	mov	r4,r20
   11420:	103ee83a 	callr	r2
   11424:	1000ca1e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   11428:	84000044 	addi	r16,r16,1
   1142c:	0000f506 	br	11804 <___svfprintf_internal_r+0x4e4>
   11430:	25fff404 	addi	r23,r4,-48
   11434:	bdc03fcc 	andi	r23,r23,255
   11438:	00c00244 	movi	r3,9
   1143c:	1dc00936 	bltu	r3,r23,11464 <___svfprintf_internal_r+0x144>
   11440:	00bfffc4 	movi	r2,-1
   11444:	90800426 	beq	r18,r2,11458 <___svfprintf_internal_r+0x138>
   11448:	01400284 	movi	r5,10
   1144c:	9009883a 	mov	r4,r18
   11450:	00108cc0 	call	108cc <__mulsi3>
   11454:	00000106 	br	1145c <___svfprintf_internal_r+0x13c>
   11458:	0005883a 	mov	r2,zero
   1145c:	b8a5883a 	add	r18,r23,r2
   11460:	0000e206 	br	117ec <___svfprintf_internal_r+0x4cc>
   11464:	01400b84 	movi	r5,46
   11468:	1140e426 	beq	r2,r5,117fc <___svfprintf_internal_r+0x4dc>
   1146c:	05c00084 	movi	r23,2
   11470:	213ff404 	addi	r4,r4,-48
   11474:	27003fcc 	andi	fp,r4,255
   11478:	00c00244 	movi	r3,9
   1147c:	1f000936 	bltu	r3,fp,114a4 <___svfprintf_internal_r+0x184>
   11480:	00bfffc4 	movi	r2,-1
   11484:	98800426 	beq	r19,r2,11498 <___svfprintf_internal_r+0x178>
   11488:	01400284 	movi	r5,10
   1148c:	9809883a 	mov	r4,r19
   11490:	00108cc0 	call	108cc <__mulsi3>
   11494:	00000106 	br	1149c <___svfprintf_internal_r+0x17c>
   11498:	0005883a 	mov	r2,zero
   1149c:	e0a7883a 	add	r19,fp,r2
   114a0:	0000d906 	br	11808 <___svfprintf_internal_r+0x4e8>
   114a4:	00c01b04 	movi	r3,108
   114a8:	10c0d226 	beq	r2,r3,117f4 <___svfprintf_internal_r+0x4d4>
   114ac:	013fffc4 	movi	r4,-1
   114b0:	99000226 	beq	r19,r4,114bc <___svfprintf_internal_r+0x19c>
   114b4:	d8000b15 	stw	zero,44(sp)
   114b8:	00000106 	br	114c0 <___svfprintf_internal_r+0x1a0>
   114bc:	04c00044 	movi	r19,1
   114c0:	01001a44 	movi	r4,105
   114c4:	11001626 	beq	r2,r4,11520 <___svfprintf_internal_r+0x200>
   114c8:	20800916 	blt	r4,r2,114f0 <___svfprintf_internal_r+0x1d0>
   114cc:	010018c4 	movi	r4,99
   114d0:	11008826 	beq	r2,r4,116f4 <___svfprintf_internal_r+0x3d4>
   114d4:	01001904 	movi	r4,100
   114d8:	11001126 	beq	r2,r4,11520 <___svfprintf_internal_r+0x200>
   114dc:	01001604 	movi	r4,88
   114e0:	1100c81e 	bne	r2,r4,11804 <___svfprintf_internal_r+0x4e4>
   114e4:	00c00044 	movi	r3,1
   114e8:	d8c00e15 	stw	r3,56(sp)
   114ec:	00001506 	br	11544 <___svfprintf_internal_r+0x224>
   114f0:	01001cc4 	movi	r4,115
   114f4:	11009826 	beq	r2,r4,11758 <___svfprintf_internal_r+0x438>
   114f8:	20800416 	blt	r4,r2,1150c <___svfprintf_internal_r+0x1ec>
   114fc:	01001bc4 	movi	r4,111
   11500:	1100c01e 	bne	r2,r4,11804 <___svfprintf_internal_r+0x4e4>
   11504:	05400204 	movi	r21,8
   11508:	00000f06 	br	11548 <___svfprintf_internal_r+0x228>
   1150c:	01001d44 	movi	r4,117
   11510:	11000d26 	beq	r2,r4,11548 <___svfprintf_internal_r+0x228>
   11514:	01001e04 	movi	r4,120
   11518:	11000a26 	beq	r2,r4,11544 <___svfprintf_internal_r+0x224>
   1151c:	0000b906 	br	11804 <___svfprintf_internal_r+0x4e4>
   11520:	d8c00a17 	ldw	r3,40(sp)
   11524:	b7000104 	addi	fp,r22,4
   11528:	18000726 	beq	r3,zero,11548 <___svfprintf_internal_r+0x228>
   1152c:	df000d15 	stw	fp,52(sp)
   11530:	b5c00017 	ldw	r23,0(r22)
   11534:	b800080e 	bge	r23,zero,11558 <___svfprintf_internal_r+0x238>
   11538:	05efc83a 	sub	r23,zero,r23
   1153c:	02400044 	movi	r9,1
   11540:	00000606 	br	1155c <___svfprintf_internal_r+0x23c>
   11544:	05400404 	movi	r21,16
   11548:	b0c00104 	addi	r3,r22,4
   1154c:	d8c00d15 	stw	r3,52(sp)
   11550:	b5c00017 	ldw	r23,0(r22)
   11554:	d8000a15 	stw	zero,40(sp)
   11558:	0013883a 	mov	r9,zero
   1155c:	d839883a 	mov	fp,sp
   11560:	b8001726 	beq	r23,zero,115c0 <___svfprintf_internal_r+0x2a0>
   11564:	a80b883a 	mov	r5,r21
   11568:	b809883a 	mov	r4,r23
   1156c:	da401015 	stw	r9,64(sp)
   11570:	00108100 	call	10810 <__udivsi3>
   11574:	a80b883a 	mov	r5,r21
   11578:	1009883a 	mov	r4,r2
   1157c:	102d883a 	mov	r22,r2
   11580:	00108cc0 	call	108cc <__mulsi3>
   11584:	b885c83a 	sub	r2,r23,r2
   11588:	00c00244 	movi	r3,9
   1158c:	da401017 	ldw	r9,64(sp)
   11590:	18800216 	blt	r3,r2,1159c <___svfprintf_internal_r+0x27c>
   11594:	10800c04 	addi	r2,r2,48
   11598:	00000506 	br	115b0 <___svfprintf_internal_r+0x290>
   1159c:	d8c00e17 	ldw	r3,56(sp)
   115a0:	18000226 	beq	r3,zero,115ac <___svfprintf_internal_r+0x28c>
   115a4:	10800dc4 	addi	r2,r2,55
   115a8:	00000106 	br	115b0 <___svfprintf_internal_r+0x290>
   115ac:	108015c4 	addi	r2,r2,87
   115b0:	e0800005 	stb	r2,0(fp)
   115b4:	b02f883a 	mov	r23,r22
   115b8:	e7000044 	addi	fp,fp,1
   115bc:	003fe806 	br	11560 <__alt_data_end+0xffff1560>
   115c0:	e6efc83a 	sub	r23,fp,sp
   115c4:	9dc5c83a 	sub	r2,r19,r23
   115c8:	0080090e 	bge	zero,r2,115f0 <___svfprintf_internal_r+0x2d0>
   115cc:	e085883a 	add	r2,fp,r2
   115d0:	01400c04 	movi	r5,48
   115d4:	d8c00917 	ldw	r3,36(sp)
   115d8:	e009883a 	mov	r4,fp
   115dc:	e0c0032e 	bgeu	fp,r3,115ec <___svfprintf_internal_r+0x2cc>
   115e0:	e7000044 	addi	fp,fp,1
   115e4:	21400005 	stb	r5,0(r4)
   115e8:	e0bffa1e 	bne	fp,r2,115d4 <__alt_data_end+0xffff15d4>
   115ec:	e6efc83a 	sub	r23,fp,sp
   115f0:	d8c00b17 	ldw	r3,44(sp)
   115f4:	4dd1883a 	add	r8,r9,r23
   115f8:	922dc83a 	sub	r22,r18,r8
   115fc:	18001626 	beq	r3,zero,11658 <___svfprintf_internal_r+0x338>
   11600:	48000a26 	beq	r9,zero,1162c <___svfprintf_internal_r+0x30c>
   11604:	00800b44 	movi	r2,45
   11608:	d8800805 	stb	r2,32(sp)
   1160c:	88800117 	ldw	r2,4(r17)
   11610:	01c00044 	movi	r7,1
   11614:	d9800804 	addi	r6,sp,32
   11618:	880b883a 	mov	r5,r17
   1161c:	a009883a 	mov	r4,r20
   11620:	103ee83a 	callr	r2
   11624:	10004a1e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   11628:	84000044 	addi	r16,r16,1
   1162c:	0580070e 	bge	zero,r22,1164c <___svfprintf_internal_r+0x32c>
   11630:	b00f883a 	mov	r7,r22
   11634:	01800c04 	movi	r6,48
   11638:	880b883a 	mov	r5,r17
   1163c:	a009883a 	mov	r4,r20
   11640:	00112b40 	call	112b4 <print_repeat>
   11644:	1000421e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   11648:	85a1883a 	add	r16,r16,r22
   1164c:	e02d883a 	mov	r22,fp
   11650:	bf2fc83a 	sub	r23,r23,fp
   11654:	00002006 	br	116d8 <___svfprintf_internal_r+0x3b8>
   11658:	0580090e 	bge	zero,r22,11680 <___svfprintf_internal_r+0x360>
   1165c:	b00f883a 	mov	r7,r22
   11660:	01800804 	movi	r6,32
   11664:	880b883a 	mov	r5,r17
   11668:	a009883a 	mov	r4,r20
   1166c:	da401015 	stw	r9,64(sp)
   11670:	00112b40 	call	112b4 <print_repeat>
   11674:	da401017 	ldw	r9,64(sp)
   11678:	1000351e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   1167c:	85a1883a 	add	r16,r16,r22
   11680:	483ff226 	beq	r9,zero,1164c <__alt_data_end+0xffff164c>
   11684:	00800b44 	movi	r2,45
   11688:	d8800805 	stb	r2,32(sp)
   1168c:	88800117 	ldw	r2,4(r17)
   11690:	01c00044 	movi	r7,1
   11694:	d9800804 	addi	r6,sp,32
   11698:	880b883a 	mov	r5,r17
   1169c:	a009883a 	mov	r4,r20
   116a0:	103ee83a 	callr	r2
   116a4:	10002a1e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   116a8:	84000044 	addi	r16,r16,1
   116ac:	003fe706 	br	1164c <__alt_data_end+0xffff164c>
   116b0:	b5bfffc4 	addi	r22,r22,-1
   116b4:	b0800003 	ldbu	r2,0(r22)
   116b8:	01c00044 	movi	r7,1
   116bc:	d9800804 	addi	r6,sp,32
   116c0:	d8800805 	stb	r2,32(sp)
   116c4:	88800117 	ldw	r2,4(r17)
   116c8:	880b883a 	mov	r5,r17
   116cc:	a009883a 	mov	r4,r20
   116d0:	103ee83a 	callr	r2
   116d4:	10001e1e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   116d8:	8585c83a 	sub	r2,r16,r22
   116dc:	b5c9883a 	add	r4,r22,r23
   116e0:	e085883a 	add	r2,fp,r2
   116e4:	013ff216 	blt	zero,r4,116b0 <__alt_data_end+0xffff16b0>
   116e8:	1021883a 	mov	r16,r2
   116ec:	dd800d17 	ldw	r22,52(sp)
   116f0:	00004406 	br	11804 <___svfprintf_internal_r+0x4e4>
   116f4:	00800044 	movi	r2,1
   116f8:	1480080e 	bge	r2,r18,1171c <___svfprintf_internal_r+0x3fc>
   116fc:	95ffffc4 	addi	r23,r18,-1
   11700:	b80f883a 	mov	r7,r23
   11704:	01800804 	movi	r6,32
   11708:	880b883a 	mov	r5,r17
   1170c:	a009883a 	mov	r4,r20
   11710:	00112b40 	call	112b4 <print_repeat>
   11714:	10000e1e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   11718:	85e1883a 	add	r16,r16,r23
   1171c:	b0800017 	ldw	r2,0(r22)
   11720:	01c00044 	movi	r7,1
   11724:	d80d883a 	mov	r6,sp
   11728:	d8800005 	stb	r2,0(sp)
   1172c:	88800117 	ldw	r2,4(r17)
   11730:	880b883a 	mov	r5,r17
   11734:	a009883a 	mov	r4,r20
   11738:	b5c00104 	addi	r23,r22,4
   1173c:	103ee83a 	callr	r2
   11740:	1000031e 	bne	r2,zero,11750 <___svfprintf_internal_r+0x430>
   11744:	84000044 	addi	r16,r16,1
   11748:	b82d883a 	mov	r22,r23
   1174c:	00002d06 	br	11804 <___svfprintf_internal_r+0x4e4>
   11750:	00bfffc4 	movi	r2,-1
   11754:	00003106 	br	1181c <___svfprintf_internal_r+0x4fc>
   11758:	b5c00017 	ldw	r23,0(r22)
   1175c:	b7000104 	addi	fp,r22,4
   11760:	b809883a 	mov	r4,r23
   11764:	00110480 	call	11048 <strlen>
   11768:	9091c83a 	sub	r8,r18,r2
   1176c:	102d883a 	mov	r22,r2
   11770:	0200090e 	bge	zero,r8,11798 <___svfprintf_internal_r+0x478>
   11774:	400f883a 	mov	r7,r8
   11778:	01800804 	movi	r6,32
   1177c:	880b883a 	mov	r5,r17
   11780:	a009883a 	mov	r4,r20
   11784:	da001015 	stw	r8,64(sp)
   11788:	00112b40 	call	112b4 <print_repeat>
   1178c:	da001017 	ldw	r8,64(sp)
   11790:	103fef1e 	bne	r2,zero,11750 <__alt_data_end+0xffff1750>
   11794:	8221883a 	add	r16,r16,r8
   11798:	88800117 	ldw	r2,4(r17)
   1179c:	b00f883a 	mov	r7,r22
   117a0:	b80d883a 	mov	r6,r23
   117a4:	880b883a 	mov	r5,r17
   117a8:	a009883a 	mov	r4,r20
   117ac:	103ee83a 	callr	r2
   117b0:	103fe71e 	bne	r2,zero,11750 <__alt_data_end+0xffff1750>
   117b4:	85a1883a 	add	r16,r16,r22
   117b8:	e02d883a 	mov	r22,fp
   117bc:	00001106 	br	11804 <___svfprintf_internal_r+0x4e4>
   117c0:	00c00044 	movi	r3,1
   117c4:	04ffffc4 	movi	r19,-1
   117c8:	d8000e15 	stw	zero,56(sp)
   117cc:	d8c00a15 	stw	r3,40(sp)
   117d0:	05400284 	movi	r21,10
   117d4:	9825883a 	mov	r18,r19
   117d8:	d8000c15 	stw	zero,48(sp)
   117dc:	d8000b15 	stw	zero,44(sp)
   117e0:	182f883a 	mov	r23,r3
   117e4:	00000806 	br	11808 <___svfprintf_internal_r+0x4e8>
   117e8:	ddc00b15 	stw	r23,44(sp)
   117ec:	05c00084 	movi	r23,2
   117f0:	00000506 	br	11808 <___svfprintf_internal_r+0x4e8>
   117f4:	00c00044 	movi	r3,1
   117f8:	d8c00c15 	stw	r3,48(sp)
   117fc:	05c000c4 	movi	r23,3
   11800:	00000106 	br	11808 <___svfprintf_internal_r+0x4e8>
   11804:	002f883a 	mov	r23,zero
   11808:	d8c00f17 	ldw	r3,60(sp)
   1180c:	18c00044 	addi	r3,r3,1
   11810:	d8c00f15 	stw	r3,60(sp)
   11814:	003edc06 	br	11388 <__alt_data_end+0xffff1388>
   11818:	8005883a 	mov	r2,r16
   1181c:	dfc01a17 	ldw	ra,104(sp)
   11820:	df001917 	ldw	fp,100(sp)
   11824:	ddc01817 	ldw	r23,96(sp)
   11828:	dd801717 	ldw	r22,92(sp)
   1182c:	dd401617 	ldw	r21,88(sp)
   11830:	dd001517 	ldw	r20,84(sp)
   11834:	dcc01417 	ldw	r19,80(sp)
   11838:	dc801317 	ldw	r18,76(sp)
   1183c:	dc401217 	ldw	r17,72(sp)
   11840:	dc001117 	ldw	r16,68(sp)
   11844:	dec01b04 	addi	sp,sp,108
   11848:	f800283a 	ret

0001184c <__vfprintf_internal_unused>:
   1184c:	00800074 	movhi	r2,1
   11850:	108a9e04 	addi	r2,r2,10872
   11854:	300f883a 	mov	r7,r6
   11858:	280d883a 	mov	r6,r5
   1185c:	200b883a 	mov	r5,r4
   11860:	11000017 	ldw	r4,0(r2)
   11864:	00113201 	jmpi	11320 <___svfprintf_internal_r>

00011868 <print_repeat>:
   11868:	defffb04 	addi	sp,sp,-20
   1186c:	dc800315 	stw	r18,12(sp)
   11870:	dc400215 	stw	r17,8(sp)
   11874:	dc000115 	stw	r16,4(sp)
   11878:	dfc00415 	stw	ra,16(sp)
   1187c:	2025883a 	mov	r18,r4
   11880:	2823883a 	mov	r17,r5
   11884:	d9800005 	stb	r6,0(sp)
   11888:	3821883a 	mov	r16,r7
   1188c:	04000a0e 	bge	zero,r16,118b8 <print_repeat+0x50>
   11890:	88800117 	ldw	r2,4(r17)
   11894:	01c00044 	movi	r7,1
   11898:	d80d883a 	mov	r6,sp
   1189c:	880b883a 	mov	r5,r17
   118a0:	9009883a 	mov	r4,r18
   118a4:	103ee83a 	callr	r2
   118a8:	843fffc4 	addi	r16,r16,-1
   118ac:	103ff726 	beq	r2,zero,1188c <__alt_data_end+0xffff188c>
   118b0:	00bfffc4 	movi	r2,-1
   118b4:	00000106 	br	118bc <print_repeat+0x54>
   118b8:	0005883a 	mov	r2,zero
   118bc:	dfc00417 	ldw	ra,16(sp)
   118c0:	dc800317 	ldw	r18,12(sp)
   118c4:	dc400217 	ldw	r17,8(sp)
   118c8:	dc000117 	ldw	r16,4(sp)
   118cc:	dec00504 	addi	sp,sp,20
   118d0:	f800283a 	ret

000118d4 <___vfprintf_internal_r>:
   118d4:	deffe504 	addi	sp,sp,-108
   118d8:	d8c00804 	addi	r3,sp,32
   118dc:	ddc01815 	stw	r23,96(sp)
   118e0:	dd801715 	stw	r22,92(sp)
   118e4:	dd401615 	stw	r21,88(sp)
   118e8:	dd001515 	stw	r20,84(sp)
   118ec:	dcc01415 	stw	r19,80(sp)
   118f0:	dc801315 	stw	r18,76(sp)
   118f4:	dc401215 	stw	r17,72(sp)
   118f8:	dc001115 	stw	r16,68(sp)
   118fc:	dfc01a15 	stw	ra,104(sp)
   11900:	df001915 	stw	fp,100(sp)
   11904:	2029883a 	mov	r20,r4
   11908:	2823883a 	mov	r17,r5
   1190c:	382d883a 	mov	r22,r7
   11910:	d9800f15 	stw	r6,60(sp)
   11914:	0021883a 	mov	r16,zero
   11918:	d8000e15 	stw	zero,56(sp)
   1191c:	d8000a15 	stw	zero,40(sp)
   11920:	002b883a 	mov	r21,zero
   11924:	0027883a 	mov	r19,zero
   11928:	0025883a 	mov	r18,zero
   1192c:	d8000c15 	stw	zero,48(sp)
   11930:	d8000b15 	stw	zero,44(sp)
   11934:	002f883a 	mov	r23,zero
   11938:	d8c00915 	stw	r3,36(sp)
   1193c:	d8c00f17 	ldw	r3,60(sp)
   11940:	19000003 	ldbu	r4,0(r3)
   11944:	20803fcc 	andi	r2,r4,255
   11948:	1080201c 	xori	r2,r2,128
   1194c:	10bfe004 	addi	r2,r2,-128
   11950:	10011e26 	beq	r2,zero,11dcc <___vfprintf_internal_r+0x4f8>
   11954:	00c00044 	movi	r3,1
   11958:	b8c01426 	beq	r23,r3,119ac <___vfprintf_internal_r+0xd8>
   1195c:	1dc00216 	blt	r3,r23,11968 <___vfprintf_internal_r+0x94>
   11960:	b8000626 	beq	r23,zero,1197c <___vfprintf_internal_r+0xa8>
   11964:	00011506 	br	11dbc <___vfprintf_internal_r+0x4e8>
   11968:	01400084 	movi	r5,2
   1196c:	b9401d26 	beq	r23,r5,119e4 <___vfprintf_internal_r+0x110>
   11970:	014000c4 	movi	r5,3
   11974:	b9402b26 	beq	r23,r5,11a24 <___vfprintf_internal_r+0x150>
   11978:	00011006 	br	11dbc <___vfprintf_internal_r+0x4e8>
   1197c:	01400944 	movi	r5,37
   11980:	1140fc26 	beq	r2,r5,11d74 <___vfprintf_internal_r+0x4a0>
   11984:	88800117 	ldw	r2,4(r17)
   11988:	d9000005 	stb	r4,0(sp)
   1198c:	01c00044 	movi	r7,1
   11990:	d80d883a 	mov	r6,sp
   11994:	880b883a 	mov	r5,r17
   11998:	a009883a 	mov	r4,r20
   1199c:	103ee83a 	callr	r2
   119a0:	1000d81e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   119a4:	84000044 	addi	r16,r16,1
   119a8:	00010406 	br	11dbc <___vfprintf_internal_r+0x4e8>
   119ac:	01400c04 	movi	r5,48
   119b0:	1140fa26 	beq	r2,r5,11d9c <___vfprintf_internal_r+0x4c8>
   119b4:	01400944 	movi	r5,37
   119b8:	11400a1e 	bne	r2,r5,119e4 <___vfprintf_internal_r+0x110>
   119bc:	d8800005 	stb	r2,0(sp)
   119c0:	88800117 	ldw	r2,4(r17)
   119c4:	b80f883a 	mov	r7,r23
   119c8:	d80d883a 	mov	r6,sp
   119cc:	880b883a 	mov	r5,r17
   119d0:	a009883a 	mov	r4,r20
   119d4:	103ee83a 	callr	r2
   119d8:	1000ca1e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   119dc:	84000044 	addi	r16,r16,1
   119e0:	0000f506 	br	11db8 <___vfprintf_internal_r+0x4e4>
   119e4:	25fff404 	addi	r23,r4,-48
   119e8:	bdc03fcc 	andi	r23,r23,255
   119ec:	00c00244 	movi	r3,9
   119f0:	1dc00936 	bltu	r3,r23,11a18 <___vfprintf_internal_r+0x144>
   119f4:	00bfffc4 	movi	r2,-1
   119f8:	90800426 	beq	r18,r2,11a0c <___vfprintf_internal_r+0x138>
   119fc:	01400284 	movi	r5,10
   11a00:	9009883a 	mov	r4,r18
   11a04:	00108cc0 	call	108cc <__mulsi3>
   11a08:	00000106 	br	11a10 <___vfprintf_internal_r+0x13c>
   11a0c:	0005883a 	mov	r2,zero
   11a10:	b8a5883a 	add	r18,r23,r2
   11a14:	0000e206 	br	11da0 <___vfprintf_internal_r+0x4cc>
   11a18:	01400b84 	movi	r5,46
   11a1c:	1140e426 	beq	r2,r5,11db0 <___vfprintf_internal_r+0x4dc>
   11a20:	05c00084 	movi	r23,2
   11a24:	213ff404 	addi	r4,r4,-48
   11a28:	27003fcc 	andi	fp,r4,255
   11a2c:	00c00244 	movi	r3,9
   11a30:	1f000936 	bltu	r3,fp,11a58 <___vfprintf_internal_r+0x184>
   11a34:	00bfffc4 	movi	r2,-1
   11a38:	98800426 	beq	r19,r2,11a4c <___vfprintf_internal_r+0x178>
   11a3c:	01400284 	movi	r5,10
   11a40:	9809883a 	mov	r4,r19
   11a44:	00108cc0 	call	108cc <__mulsi3>
   11a48:	00000106 	br	11a50 <___vfprintf_internal_r+0x17c>
   11a4c:	0005883a 	mov	r2,zero
   11a50:	e0a7883a 	add	r19,fp,r2
   11a54:	0000d906 	br	11dbc <___vfprintf_internal_r+0x4e8>
   11a58:	00c01b04 	movi	r3,108
   11a5c:	10c0d226 	beq	r2,r3,11da8 <___vfprintf_internal_r+0x4d4>
   11a60:	013fffc4 	movi	r4,-1
   11a64:	99000226 	beq	r19,r4,11a70 <___vfprintf_internal_r+0x19c>
   11a68:	d8000b15 	stw	zero,44(sp)
   11a6c:	00000106 	br	11a74 <___vfprintf_internal_r+0x1a0>
   11a70:	04c00044 	movi	r19,1
   11a74:	01001a44 	movi	r4,105
   11a78:	11001626 	beq	r2,r4,11ad4 <___vfprintf_internal_r+0x200>
   11a7c:	20800916 	blt	r4,r2,11aa4 <___vfprintf_internal_r+0x1d0>
   11a80:	010018c4 	movi	r4,99
   11a84:	11008826 	beq	r2,r4,11ca8 <___vfprintf_internal_r+0x3d4>
   11a88:	01001904 	movi	r4,100
   11a8c:	11001126 	beq	r2,r4,11ad4 <___vfprintf_internal_r+0x200>
   11a90:	01001604 	movi	r4,88
   11a94:	1100c81e 	bne	r2,r4,11db8 <___vfprintf_internal_r+0x4e4>
   11a98:	00c00044 	movi	r3,1
   11a9c:	d8c00e15 	stw	r3,56(sp)
   11aa0:	00001506 	br	11af8 <___vfprintf_internal_r+0x224>
   11aa4:	01001cc4 	movi	r4,115
   11aa8:	11009826 	beq	r2,r4,11d0c <___vfprintf_internal_r+0x438>
   11aac:	20800416 	blt	r4,r2,11ac0 <___vfprintf_internal_r+0x1ec>
   11ab0:	01001bc4 	movi	r4,111
   11ab4:	1100c01e 	bne	r2,r4,11db8 <___vfprintf_internal_r+0x4e4>
   11ab8:	05400204 	movi	r21,8
   11abc:	00000f06 	br	11afc <___vfprintf_internal_r+0x228>
   11ac0:	01001d44 	movi	r4,117
   11ac4:	11000d26 	beq	r2,r4,11afc <___vfprintf_internal_r+0x228>
   11ac8:	01001e04 	movi	r4,120
   11acc:	11000a26 	beq	r2,r4,11af8 <___vfprintf_internal_r+0x224>
   11ad0:	0000b906 	br	11db8 <___vfprintf_internal_r+0x4e4>
   11ad4:	d8c00a17 	ldw	r3,40(sp)
   11ad8:	b7000104 	addi	fp,r22,4
   11adc:	18000726 	beq	r3,zero,11afc <___vfprintf_internal_r+0x228>
   11ae0:	df000d15 	stw	fp,52(sp)
   11ae4:	b5c00017 	ldw	r23,0(r22)
   11ae8:	b800080e 	bge	r23,zero,11b0c <___vfprintf_internal_r+0x238>
   11aec:	05efc83a 	sub	r23,zero,r23
   11af0:	02400044 	movi	r9,1
   11af4:	00000606 	br	11b10 <___vfprintf_internal_r+0x23c>
   11af8:	05400404 	movi	r21,16
   11afc:	b0c00104 	addi	r3,r22,4
   11b00:	d8c00d15 	stw	r3,52(sp)
   11b04:	b5c00017 	ldw	r23,0(r22)
   11b08:	d8000a15 	stw	zero,40(sp)
   11b0c:	0013883a 	mov	r9,zero
   11b10:	d839883a 	mov	fp,sp
   11b14:	b8001726 	beq	r23,zero,11b74 <___vfprintf_internal_r+0x2a0>
   11b18:	a80b883a 	mov	r5,r21
   11b1c:	b809883a 	mov	r4,r23
   11b20:	da401015 	stw	r9,64(sp)
   11b24:	00108100 	call	10810 <__udivsi3>
   11b28:	a80b883a 	mov	r5,r21
   11b2c:	1009883a 	mov	r4,r2
   11b30:	102d883a 	mov	r22,r2
   11b34:	00108cc0 	call	108cc <__mulsi3>
   11b38:	b885c83a 	sub	r2,r23,r2
   11b3c:	00c00244 	movi	r3,9
   11b40:	da401017 	ldw	r9,64(sp)
   11b44:	18800216 	blt	r3,r2,11b50 <___vfprintf_internal_r+0x27c>
   11b48:	10800c04 	addi	r2,r2,48
   11b4c:	00000506 	br	11b64 <___vfprintf_internal_r+0x290>
   11b50:	d8c00e17 	ldw	r3,56(sp)
   11b54:	18000226 	beq	r3,zero,11b60 <___vfprintf_internal_r+0x28c>
   11b58:	10800dc4 	addi	r2,r2,55
   11b5c:	00000106 	br	11b64 <___vfprintf_internal_r+0x290>
   11b60:	108015c4 	addi	r2,r2,87
   11b64:	e0800005 	stb	r2,0(fp)
   11b68:	b02f883a 	mov	r23,r22
   11b6c:	e7000044 	addi	fp,fp,1
   11b70:	003fe806 	br	11b14 <__alt_data_end+0xffff1b14>
   11b74:	e6efc83a 	sub	r23,fp,sp
   11b78:	9dc5c83a 	sub	r2,r19,r23
   11b7c:	0080090e 	bge	zero,r2,11ba4 <___vfprintf_internal_r+0x2d0>
   11b80:	e085883a 	add	r2,fp,r2
   11b84:	01400c04 	movi	r5,48
   11b88:	d8c00917 	ldw	r3,36(sp)
   11b8c:	e009883a 	mov	r4,fp
   11b90:	e0c0032e 	bgeu	fp,r3,11ba0 <___vfprintf_internal_r+0x2cc>
   11b94:	e7000044 	addi	fp,fp,1
   11b98:	21400005 	stb	r5,0(r4)
   11b9c:	e0bffa1e 	bne	fp,r2,11b88 <__alt_data_end+0xffff1b88>
   11ba0:	e6efc83a 	sub	r23,fp,sp
   11ba4:	d8c00b17 	ldw	r3,44(sp)
   11ba8:	4dd1883a 	add	r8,r9,r23
   11bac:	922dc83a 	sub	r22,r18,r8
   11bb0:	18001626 	beq	r3,zero,11c0c <___vfprintf_internal_r+0x338>
   11bb4:	48000a26 	beq	r9,zero,11be0 <___vfprintf_internal_r+0x30c>
   11bb8:	00800b44 	movi	r2,45
   11bbc:	d8800805 	stb	r2,32(sp)
   11bc0:	88800117 	ldw	r2,4(r17)
   11bc4:	01c00044 	movi	r7,1
   11bc8:	d9800804 	addi	r6,sp,32
   11bcc:	880b883a 	mov	r5,r17
   11bd0:	a009883a 	mov	r4,r20
   11bd4:	103ee83a 	callr	r2
   11bd8:	10004a1e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11bdc:	84000044 	addi	r16,r16,1
   11be0:	0580070e 	bge	zero,r22,11c00 <___vfprintf_internal_r+0x32c>
   11be4:	b00f883a 	mov	r7,r22
   11be8:	01800c04 	movi	r6,48
   11bec:	880b883a 	mov	r5,r17
   11bf0:	a009883a 	mov	r4,r20
   11bf4:	00118680 	call	11868 <print_repeat>
   11bf8:	1000421e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11bfc:	85a1883a 	add	r16,r16,r22
   11c00:	e02d883a 	mov	r22,fp
   11c04:	bf2fc83a 	sub	r23,r23,fp
   11c08:	00002006 	br	11c8c <___vfprintf_internal_r+0x3b8>
   11c0c:	0580090e 	bge	zero,r22,11c34 <___vfprintf_internal_r+0x360>
   11c10:	b00f883a 	mov	r7,r22
   11c14:	01800804 	movi	r6,32
   11c18:	880b883a 	mov	r5,r17
   11c1c:	a009883a 	mov	r4,r20
   11c20:	da401015 	stw	r9,64(sp)
   11c24:	00118680 	call	11868 <print_repeat>
   11c28:	da401017 	ldw	r9,64(sp)
   11c2c:	1000351e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11c30:	85a1883a 	add	r16,r16,r22
   11c34:	483ff226 	beq	r9,zero,11c00 <__alt_data_end+0xffff1c00>
   11c38:	00800b44 	movi	r2,45
   11c3c:	d8800805 	stb	r2,32(sp)
   11c40:	88800117 	ldw	r2,4(r17)
   11c44:	01c00044 	movi	r7,1
   11c48:	d9800804 	addi	r6,sp,32
   11c4c:	880b883a 	mov	r5,r17
   11c50:	a009883a 	mov	r4,r20
   11c54:	103ee83a 	callr	r2
   11c58:	10002a1e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11c5c:	84000044 	addi	r16,r16,1
   11c60:	003fe706 	br	11c00 <__alt_data_end+0xffff1c00>
   11c64:	b5bfffc4 	addi	r22,r22,-1
   11c68:	b0800003 	ldbu	r2,0(r22)
   11c6c:	01c00044 	movi	r7,1
   11c70:	d9800804 	addi	r6,sp,32
   11c74:	d8800805 	stb	r2,32(sp)
   11c78:	88800117 	ldw	r2,4(r17)
   11c7c:	880b883a 	mov	r5,r17
   11c80:	a009883a 	mov	r4,r20
   11c84:	103ee83a 	callr	r2
   11c88:	10001e1e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11c8c:	8585c83a 	sub	r2,r16,r22
   11c90:	b5c9883a 	add	r4,r22,r23
   11c94:	e085883a 	add	r2,fp,r2
   11c98:	013ff216 	blt	zero,r4,11c64 <__alt_data_end+0xffff1c64>
   11c9c:	1021883a 	mov	r16,r2
   11ca0:	dd800d17 	ldw	r22,52(sp)
   11ca4:	00004406 	br	11db8 <___vfprintf_internal_r+0x4e4>
   11ca8:	00800044 	movi	r2,1
   11cac:	1480080e 	bge	r2,r18,11cd0 <___vfprintf_internal_r+0x3fc>
   11cb0:	95ffffc4 	addi	r23,r18,-1
   11cb4:	b80f883a 	mov	r7,r23
   11cb8:	01800804 	movi	r6,32
   11cbc:	880b883a 	mov	r5,r17
   11cc0:	a009883a 	mov	r4,r20
   11cc4:	00118680 	call	11868 <print_repeat>
   11cc8:	10000e1e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11ccc:	85e1883a 	add	r16,r16,r23
   11cd0:	b0800017 	ldw	r2,0(r22)
   11cd4:	01c00044 	movi	r7,1
   11cd8:	d80d883a 	mov	r6,sp
   11cdc:	d8800005 	stb	r2,0(sp)
   11ce0:	88800117 	ldw	r2,4(r17)
   11ce4:	880b883a 	mov	r5,r17
   11ce8:	a009883a 	mov	r4,r20
   11cec:	b5c00104 	addi	r23,r22,4
   11cf0:	103ee83a 	callr	r2
   11cf4:	1000031e 	bne	r2,zero,11d04 <___vfprintf_internal_r+0x430>
   11cf8:	84000044 	addi	r16,r16,1
   11cfc:	b82d883a 	mov	r22,r23
   11d00:	00002d06 	br	11db8 <___vfprintf_internal_r+0x4e4>
   11d04:	00bfffc4 	movi	r2,-1
   11d08:	00003106 	br	11dd0 <___vfprintf_internal_r+0x4fc>
   11d0c:	b5c00017 	ldw	r23,0(r22)
   11d10:	b7000104 	addi	fp,r22,4
   11d14:	b809883a 	mov	r4,r23
   11d18:	00110480 	call	11048 <strlen>
   11d1c:	9091c83a 	sub	r8,r18,r2
   11d20:	102d883a 	mov	r22,r2
   11d24:	0200090e 	bge	zero,r8,11d4c <___vfprintf_internal_r+0x478>
   11d28:	400f883a 	mov	r7,r8
   11d2c:	01800804 	movi	r6,32
   11d30:	880b883a 	mov	r5,r17
   11d34:	a009883a 	mov	r4,r20
   11d38:	da001015 	stw	r8,64(sp)
   11d3c:	00118680 	call	11868 <print_repeat>
   11d40:	da001017 	ldw	r8,64(sp)
   11d44:	103fef1e 	bne	r2,zero,11d04 <__alt_data_end+0xffff1d04>
   11d48:	8221883a 	add	r16,r16,r8
   11d4c:	88800117 	ldw	r2,4(r17)
   11d50:	b00f883a 	mov	r7,r22
   11d54:	b80d883a 	mov	r6,r23
   11d58:	880b883a 	mov	r5,r17
   11d5c:	a009883a 	mov	r4,r20
   11d60:	103ee83a 	callr	r2
   11d64:	103fe71e 	bne	r2,zero,11d04 <__alt_data_end+0xffff1d04>
   11d68:	85a1883a 	add	r16,r16,r22
   11d6c:	e02d883a 	mov	r22,fp
   11d70:	00001106 	br	11db8 <___vfprintf_internal_r+0x4e4>
   11d74:	00c00044 	movi	r3,1
   11d78:	04ffffc4 	movi	r19,-1
   11d7c:	d8000e15 	stw	zero,56(sp)
   11d80:	d8c00a15 	stw	r3,40(sp)
   11d84:	05400284 	movi	r21,10
   11d88:	9825883a 	mov	r18,r19
   11d8c:	d8000c15 	stw	zero,48(sp)
   11d90:	d8000b15 	stw	zero,44(sp)
   11d94:	182f883a 	mov	r23,r3
   11d98:	00000806 	br	11dbc <___vfprintf_internal_r+0x4e8>
   11d9c:	ddc00b15 	stw	r23,44(sp)
   11da0:	05c00084 	movi	r23,2
   11da4:	00000506 	br	11dbc <___vfprintf_internal_r+0x4e8>
   11da8:	00c00044 	movi	r3,1
   11dac:	d8c00c15 	stw	r3,48(sp)
   11db0:	05c000c4 	movi	r23,3
   11db4:	00000106 	br	11dbc <___vfprintf_internal_r+0x4e8>
   11db8:	002f883a 	mov	r23,zero
   11dbc:	d8c00f17 	ldw	r3,60(sp)
   11dc0:	18c00044 	addi	r3,r3,1
   11dc4:	d8c00f15 	stw	r3,60(sp)
   11dc8:	003edc06 	br	1193c <__alt_data_end+0xffff193c>
   11dcc:	8005883a 	mov	r2,r16
   11dd0:	dfc01a17 	ldw	ra,104(sp)
   11dd4:	df001917 	ldw	fp,100(sp)
   11dd8:	ddc01817 	ldw	r23,96(sp)
   11ddc:	dd801717 	ldw	r22,92(sp)
   11de0:	dd401617 	ldw	r21,88(sp)
   11de4:	dd001517 	ldw	r20,84(sp)
   11de8:	dcc01417 	ldw	r19,80(sp)
   11dec:	dc801317 	ldw	r18,76(sp)
   11df0:	dc401217 	ldw	r17,72(sp)
   11df4:	dc001117 	ldw	r16,68(sp)
   11df8:	dec01b04 	addi	sp,sp,108
   11dfc:	f800283a 	ret

00011e00 <__vfprintf_internal>:
   11e00:	00800074 	movhi	r2,1
   11e04:	108a9e04 	addi	r2,r2,10872
   11e08:	300f883a 	mov	r7,r6
   11e0c:	280d883a 	mov	r6,r5
   11e10:	200b883a 	mov	r5,r4
   11e14:	11000017 	ldw	r4,0(r2)
   11e18:	00118d41 	jmpi	118d4 <___vfprintf_internal_r>

00011e1c <__sfvwrite_small_dev>:
   11e1c:	2880000b 	ldhu	r2,0(r5)
   11e20:	1080020c 	andi	r2,r2,8
   11e24:	10002126 	beq	r2,zero,11eac <__sfvwrite_small_dev+0x90>
   11e28:	2880008f 	ldh	r2,2(r5)
   11e2c:	defffa04 	addi	sp,sp,-24
   11e30:	dc000015 	stw	r16,0(sp)
   11e34:	dfc00515 	stw	ra,20(sp)
   11e38:	dd000415 	stw	r20,16(sp)
   11e3c:	dcc00315 	stw	r19,12(sp)
   11e40:	dc800215 	stw	r18,8(sp)
   11e44:	dc400115 	stw	r17,4(sp)
   11e48:	2821883a 	mov	r16,r5
   11e4c:	10001216 	blt	r2,zero,11e98 <__sfvwrite_small_dev+0x7c>
   11e50:	2027883a 	mov	r19,r4
   11e54:	3025883a 	mov	r18,r6
   11e58:	3823883a 	mov	r17,r7
   11e5c:	05010004 	movi	r20,1024
   11e60:	04400b0e 	bge	zero,r17,11e90 <__sfvwrite_small_dev+0x74>
   11e64:	880f883a 	mov	r7,r17
   11e68:	a440010e 	bge	r20,r17,11e70 <__sfvwrite_small_dev+0x54>
   11e6c:	01c10004 	movi	r7,1024
   11e70:	8140008f 	ldh	r5,2(r16)
   11e74:	900d883a 	mov	r6,r18
   11e78:	9809883a 	mov	r4,r19
   11e7c:	0011ef00 	call	11ef0 <_write_r>
   11e80:	0080050e 	bge	zero,r2,11e98 <__sfvwrite_small_dev+0x7c>
   11e84:	88a3c83a 	sub	r17,r17,r2
   11e88:	90a5883a 	add	r18,r18,r2
   11e8c:	003ff406 	br	11e60 <__alt_data_end+0xffff1e60>
   11e90:	0005883a 	mov	r2,zero
   11e94:	00000706 	br	11eb4 <__sfvwrite_small_dev+0x98>
   11e98:	8080000b 	ldhu	r2,0(r16)
   11e9c:	10801014 	ori	r2,r2,64
   11ea0:	8080000d 	sth	r2,0(r16)
   11ea4:	00bfffc4 	movi	r2,-1
   11ea8:	00000206 	br	11eb4 <__sfvwrite_small_dev+0x98>
   11eac:	00bfffc4 	movi	r2,-1
   11eb0:	f800283a 	ret
   11eb4:	dfc00517 	ldw	ra,20(sp)
   11eb8:	dd000417 	ldw	r20,16(sp)
   11ebc:	dcc00317 	ldw	r19,12(sp)
   11ec0:	dc800217 	ldw	r18,8(sp)
   11ec4:	dc400117 	ldw	r17,4(sp)
   11ec8:	dc000017 	ldw	r16,0(sp)
   11ecc:	dec00604 	addi	sp,sp,24
   11ed0:	f800283a 	ret

00011ed4 <_malloc_usable_size_r>:
   11ed4:	28bfff17 	ldw	r2,-4(r5)
   11ed8:	1000030e 	bge	r2,zero,11ee8 <_malloc_usable_size_r+0x14>
   11edc:	288b883a 	add	r5,r5,r2
   11ee0:	28ffff17 	ldw	r3,-4(r5)
   11ee4:	10c5883a 	add	r2,r2,r3
   11ee8:	10bfff04 	addi	r2,r2,-4
   11eec:	f800283a 	ret

00011ef0 <_write_r>:
   11ef0:	defffd04 	addi	sp,sp,-12
   11ef4:	dc000015 	stw	r16,0(sp)
   11ef8:	04000074 	movhi	r16,1
   11efc:	dc400115 	stw	r17,4(sp)
   11f00:	840b1704 	addi	r16,r16,11356
   11f04:	2023883a 	mov	r17,r4
   11f08:	2809883a 	mov	r4,r5
   11f0c:	300b883a 	mov	r5,r6
   11f10:	380d883a 	mov	r6,r7
   11f14:	dfc00215 	stw	ra,8(sp)
   11f18:	80000015 	stw	zero,0(r16)
   11f1c:	00121b00 	call	121b0 <write>
   11f20:	00ffffc4 	movi	r3,-1
   11f24:	10c0031e 	bne	r2,r3,11f34 <_write_r+0x44>
   11f28:	80c00017 	ldw	r3,0(r16)
   11f2c:	18000126 	beq	r3,zero,11f34 <_write_r+0x44>
   11f30:	88c00015 	stw	r3,0(r17)
   11f34:	dfc00217 	ldw	ra,8(sp)
   11f38:	dc400117 	ldw	r17,4(sp)
   11f3c:	dc000017 	ldw	r16,0(sp)
   11f40:	dec00304 	addi	sp,sp,12
   11f44:	f800283a 	ret

00011f48 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11f48:	00800074 	movhi	r2,1
   11f4c:	108a8704 	addi	r2,r2,10780
   11f50:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   11f54:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11f58:	01000074 	movhi	r4,1
   11f5c:	01800044 	movi	r6,1
   11f60:	d80b883a 	mov	r5,sp
   11f64:	210aa204 	addi	r4,r4,10888
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   11f68:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11f6c:	00122400 	call	12240 <altera_avalon_jtag_uart_read>
   11f70:	0080020e 	bge	zero,r2,11f7c <alt_getchar+0x34>
        return -1;
    }
    return c;
   11f74:	d8800007 	ldb	r2,0(sp)
   11f78:	00000106 	br	11f80 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   11f7c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   11f80:	dfc00117 	ldw	ra,4(sp)
   11f84:	dec00204 	addi	sp,sp,8
   11f88:	f800283a 	ret

00011f8c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11f8c:	008007c4 	movi	r2,31
   11f90:	11002136 	bltu	r2,r4,12018 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f94:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f98:	00ffff84 	movi	r3,-2
   11f9c:	38c4703a 	and	r2,r7,r3
   11fa0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11fa4:	200490fa 	slli	r2,r4,3
   11fa8:	02000074 	movhi	r8,1
   11fac:	420b2204 	addi	r8,r8,11400
   11fb0:	4085883a 	add	r2,r8,r2
   11fb4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11fb8:	11400115 	stw	r5,4(r2)
   11fbc:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11fc0:	30000726 	beq	r6,zero,11fe0 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fc4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fc8:	28c6703a 	and	r3,r5,r3
   11fcc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11fd0:	d0e07b17 	ldw	r3,-32276(gp)
   11fd4:	1104983a 	sll	r2,r2,r4
   11fd8:	10c4b03a 	or	r2,r2,r3
   11fdc:	00000706 	br	11ffc <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11fe0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11fe4:	28c6703a 	and	r3,r5,r3
   11fe8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11fec:	1104983a 	sll	r2,r2,r4
   11ff0:	d0e07b17 	ldw	r3,-32276(gp)
   11ff4:	0084303a 	nor	r2,zero,r2
   11ff8:	10c4703a 	and	r2,r2,r3
   11ffc:	d0a07b15 	stw	r2,-32276(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12000:	d0a07b17 	ldw	r2,-32276(gp)
   12004:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12008:	2801703a 	wrctl	status,r5
   1200c:	3801703a 	wrctl	status,r7
   12010:	0005883a 	mov	r2,zero
   12014:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   12018:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   1201c:	f800283a 	ret

00012020 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12020:	deffff04 	addi	sp,sp,-4
   12024:	01000074 	movhi	r4,1
   12028:	01400074 	movhi	r5,1
   1202c:	dfc00015 	stw	ra,0(sp)
   12030:	210a4404 	addi	r4,r4,10512
   12034:	294aa904 	addi	r5,r5,10916

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12038:	2140061e 	bne	r4,r5,12054 <alt_load+0x34>
   1203c:	01000074 	movhi	r4,1
   12040:	01400074 	movhi	r5,1
   12044:	21000804 	addi	r4,r4,32
   12048:	29400804 	addi	r5,r5,32
   1204c:	2140121e 	bne	r4,r5,12098 <alt_load+0x78>
   12050:	00000b06 	br	12080 <alt_load+0x60>
   12054:	00c00074 	movhi	r3,1
   12058:	18caa904 	addi	r3,r3,10916
   1205c:	1907c83a 	sub	r3,r3,r4
   12060:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12064:	10fff526 	beq	r2,r3,1203c <__alt_data_end+0xffff203c>
    {
      *to++ = *from++;
   12068:	114f883a 	add	r7,r2,r5
   1206c:	39c00017 	ldw	r7,0(r7)
   12070:	110d883a 	add	r6,r2,r4
   12074:	10800104 	addi	r2,r2,4
   12078:	31c00015 	stw	r7,0(r6)
   1207c:	003ff906 	br	12064 <__alt_data_end+0xffff2064>
   12080:	01000074 	movhi	r4,1
   12084:	01400074 	movhi	r5,1
   12088:	21097304 	addi	r4,r4,9676
   1208c:	29497304 	addi	r5,r5,9676

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12090:	2140101e 	bne	r4,r5,120d4 <alt_load+0xb4>
   12094:	00000b06 	br	120c4 <alt_load+0xa4>
   12098:	00c00074 	movhi	r3,1
   1209c:	18c06004 	addi	r3,r3,384
   120a0:	1907c83a 	sub	r3,r3,r4
   120a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   120a8:	10fff526 	beq	r2,r3,12080 <__alt_data_end+0xffff2080>
    {
      *to++ = *from++;
   120ac:	114f883a 	add	r7,r2,r5
   120b0:	39c00017 	ldw	r7,0(r7)
   120b4:	110d883a 	add	r6,r2,r4
   120b8:	10800104 	addi	r2,r2,4
   120bc:	31c00015 	stw	r7,0(r6)
   120c0:	003ff906 	br	120a8 <__alt_data_end+0xffff20a8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   120c4:	00124300 	call	12430 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   120c8:	dfc00017 	ldw	ra,0(sp)
   120cc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   120d0:	001251c1 	jmpi	1251c <alt_icache_flush_all>
   120d4:	00c00074 	movhi	r3,1
   120d8:	18ca4404 	addi	r3,r3,10512
   120dc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   120e0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   120e4:	18bff726 	beq	r3,r2,120c4 <__alt_data_end+0xffff20c4>
    {
      *to++ = *from++;
   120e8:	114f883a 	add	r7,r2,r5
   120ec:	39c00017 	ldw	r7,0(r7)
   120f0:	110d883a 	add	r6,r2,r4
   120f4:	10800104 	addi	r2,r2,4
   120f8:	31c00015 	stw	r7,0(r6)
   120fc:	003ff906 	br	120e4 <__alt_data_end+0xffff20e4>

00012100 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12100:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12104:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12108:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1210c:	00122100 	call	12210 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12110:	00122300 	call	12230 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12114:	d1a07c17 	ldw	r6,-32272(gp)
   12118:	d1607d17 	ldw	r5,-32268(gp)
   1211c:	d1207e17 	ldw	r4,-32264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   12120:	dfc00017 	ldw	ra,0(sp)
   12124:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12128:	00106f81 	jmpi	106f8 <main>

0001212c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1212c:	defffe04 	addi	sp,sp,-8
   12130:	dc000015 	stw	r16,0(sp)
   12134:	dfc00115 	stw	ra,4(sp)
   12138:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1213c:	00110480 	call	11048 <strlen>
   12140:	01000074 	movhi	r4,1
   12144:	000f883a 	mov	r7,zero
   12148:	100d883a 	mov	r6,r2
   1214c:	800b883a 	mov	r5,r16
   12150:	210aa204 	addi	r4,r4,10888
#else
    return fputs(str, stdout);
#endif
#endif
}
   12154:	dfc00117 	ldw	ra,4(sp)
   12158:	dc000017 	ldw	r16,0(sp)
   1215c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   12160:	001229c1 	jmpi	1229c <altera_avalon_jtag_uart_write>

00012164 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12164:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12168:	00bfff84 	movi	r2,-2
   1216c:	2884703a 	and	r2,r5,r2
   12170:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12174:	d0a00417 	ldw	r2,-32752(gp)
   12178:	00ffff04 	movi	r3,-4
   1217c:	108000c4 	addi	r2,r2,3
   12180:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12184:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12188:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1218c:	1109883a 	add	r4,r2,r4
   12190:	18c00004 	addi	r3,r3,0
   12194:	1900032e 	bgeu	r3,r4,121a4 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12198:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1219c:	00bfffc4 	movi	r2,-1
   121a0:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   121a4:	d1200415 	stw	r4,-32752(gp)
   121a8:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   121ac:	f800283a 	ret

000121b0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   121b0:	00800044 	movi	r2,1
   121b4:	20800226 	beq	r4,r2,121c0 <write+0x10>
   121b8:	00800084 	movi	r2,2
   121bc:	2080041e 	bne	r4,r2,121d0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   121c0:	01000074 	movhi	r4,1
   121c4:	000f883a 	mov	r7,zero
   121c8:	210aa204 	addi	r4,r4,10888
   121cc:	001229c1 	jmpi	1229c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   121d0:	d0a00b17 	ldw	r2,-32724(gp)
   121d4:	10000926 	beq	r2,zero,121fc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   121d8:	deffff04 	addi	sp,sp,-4
   121dc:	dfc00015 	stw	ra,0(sp)
   121e0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   121e4:	00c01444 	movi	r3,81
   121e8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   121ec:	00bfffc4 	movi	r2,-1
   121f0:	dfc00017 	ldw	ra,0(sp)
   121f4:	dec00104 	addi	sp,sp,4
   121f8:	f800283a 	ret
   121fc:	d0a07a04 	addi	r2,gp,-32280
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   12200:	00c01444 	movi	r3,81
   12204:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   12208:	00bfffc4 	movi	r2,-1
   1220c:	f800283a 	ret

00012210 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12210:	deffff04 	addi	sp,sp,-4
   12214:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   12218:	00125200 	call	12520 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1221c:	00800044 	movi	r2,1
   12220:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12224:	dfc00017 	ldw	ra,0(sp)
   12228:	dec00104 	addi	sp,sp,4
   1222c:	f800283a 	ret

00012230 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12230:	01000074 	movhi	r4,1
   12234:	d1600704 	addi	r5,gp,-32740
   12238:	210a7c04 	addi	r4,r4,10736
   1223c:	001243c1 	jmpi	1243c <alt_dev_llist_insert>

00012240 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   12240:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   12244:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   12248:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   1224c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12250:	11800b2e 	bgeu	r2,r6,12280 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12254:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   12258:	1a60000c 	andi	r9,r3,32768
   1225c:	48000326 	beq	r9,zero,1226c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12260:	10c00005 	stb	r3,0(r2)
   12264:	10800044 	addi	r2,r2,1
   12268:	003ff906 	br	12250 <__alt_data_end+0xffff2250>
    else if (ptr != buffer)
   1226c:	11400226 	beq	r2,r5,12278 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   12270:	1145c83a 	sub	r2,r2,r5
   12274:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   12278:	403ff526 	beq	r8,zero,12250 <__alt_data_end+0xffff2250>
   1227c:	00000106 	br	12284 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   12280:	117ffb1e 	bne	r2,r5,12270 <__alt_data_end+0xffff2270>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   12284:	39d0000c 	andi	r7,r7,16384
   12288:	3800021e 	bne	r7,zero,12294 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   1228c:	00bffec4 	movi	r2,-5
   12290:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   12294:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   12298:	f800283a 	ret

0001229c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1229c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   122a0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   122a4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   122a8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   122ac:	2980072e 	bgeu	r5,r6,122cc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   122b0:	38c00037 	ldwio	r3,0(r7)
   122b4:	18ffffec 	andhi	r3,r3,65535
   122b8:	183ffc26 	beq	r3,zero,122ac <__alt_data_end+0xffff22ac>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   122bc:	28c00007 	ldb	r3,0(r5)
   122c0:	20c00035 	stwio	r3,0(r4)
   122c4:	29400044 	addi	r5,r5,1
   122c8:	003ff806 	br	122ac <__alt_data_end+0xffff22ac>

  return count;
}
   122cc:	f800283a 	ret

000122d0 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   122d0:	d1600704 	addi	r5,gp,-32740
   122d4:	00124a81 	jmpi	124a8 <alt_find_dev>

000122d8 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   122d8:	20800a17 	ldw	r2,40(r4)
   122dc:	10800023 	ldbuio	r2,0(r2)
   122e0:	28800005 	stb	r2,0(r5)

	return 0;
}
   122e4:	0005883a 	mov	r2,zero
   122e8:	f800283a 	ret

000122ec <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   122ec:	20800a17 	ldw	r2,40(r4)
   122f0:	29400fcc 	andi	r5,r5,63
   122f4:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   122f8:	20800a17 	ldw	r2,40(r4)
   122fc:	10800063 	ldbuio	r2,1(r2)
   12300:	30800005 	stb	r2,0(r6)

	return 0;
}
   12304:	0005883a 	mov	r2,zero
   12308:	f800283a 	ret

0001230c <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1230c:	20800a17 	ldw	r2,40(r4)
   12310:	29400fcc 	andi	r5,r5,63
   12314:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   12318:	20800a17 	ldw	r2,40(r4)
   1231c:	11800065 	stbio	r6,1(r2)

	return 0;
}
   12320:	0005883a 	mov	r2,zero
   12324:	f800283a 	ret

00012328 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12328:	20800a17 	ldw	r2,40(r4)
   1232c:	00c00c84 	movi	r3,50
   12330:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12334:	20800a17 	ldw	r2,40(r4)
   12338:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1233c:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12340:	10803fcc 	andi	r2,r2,255
   12344:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12348:	20800a17 	ldw	r2,40(r4)
   1234c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12350:	20800a17 	ldw	r2,40(r4)
   12354:	10800063 	ldbuio	r2,1(r2)
   12358:	10803fcc 	andi	r2,r2,255
   1235c:	1006923a 	slli	r3,r2,8
   12360:	28800017 	ldw	r2,0(r5)
   12364:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   12368:	10e0000c 	andi	r3,r2,32768
   1236c:	18000126 	beq	r3,zero,12374 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   12370:	10bffff4 	orhi	r2,r2,65535
   12374:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12378:	0005883a 	mov	r2,zero
   1237c:	f800283a 	ret

00012380 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12380:	20800a17 	ldw	r2,40(r4)
   12384:	00c00d04 	movi	r3,52
   12388:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1238c:	20800a17 	ldw	r2,40(r4)
   12390:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12394:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12398:	10803fcc 	andi	r2,r2,255
   1239c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   123a0:	20800a17 	ldw	r2,40(r4)
   123a4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   123a8:	20800a17 	ldw	r2,40(r4)
   123ac:	10800063 	ldbuio	r2,1(r2)
   123b0:	10803fcc 	andi	r2,r2,255
   123b4:	1006923a 	slli	r3,r2,8
   123b8:	28800017 	ldw	r2,0(r5)
   123bc:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   123c0:	10e0000c 	andi	r3,r2,32768
   123c4:	18000126 	beq	r3,zero,123cc <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   123c8:	10bffff4 	orhi	r2,r2,65535
   123cc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   123d0:	0005883a 	mov	r2,zero
   123d4:	f800283a 	ret

000123d8 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   123d8:	20800a17 	ldw	r2,40(r4)
   123dc:	00c00d84 	movi	r3,54
   123e0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   123e4:	20800a17 	ldw	r2,40(r4)
   123e8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   123ec:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   123f0:	10803fcc 	andi	r2,r2,255
   123f4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   123f8:	20800a17 	ldw	r2,40(r4)
   123fc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12400:	20800a17 	ldw	r2,40(r4)
   12404:	10800063 	ldbuio	r2,1(r2)
   12408:	10803fcc 	andi	r2,r2,255
   1240c:	1006923a 	slli	r3,r2,8
   12410:	28800017 	ldw	r2,0(r5)
   12414:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   12418:	10e0000c 	andi	r3,r2,32768
   1241c:	18000126 	beq	r3,zero,12424 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   12420:	10bffff4 	orhi	r2,r2,65535
   12424:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12428:	0005883a 	mov	r2,zero
   1242c:	f800283a 	ret

00012430 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12430:	f800283a 	ret

00012434 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   12434:	3005883a 	mov	r2,r6
   12438:	f800283a 	ret

0001243c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1243c:	20000226 	beq	r4,zero,12448 <alt_dev_llist_insert+0xc>
   12440:	20800217 	ldw	r2,8(r4)
   12444:	1000101e 	bne	r2,zero,12488 <alt_dev_llist_insert+0x4c>
   12448:	d0a00b17 	ldw	r2,-32724(gp)
   1244c:	10000926 	beq	r2,zero,12474 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12450:	deffff04 	addi	sp,sp,-4
   12454:	dfc00015 	stw	ra,0(sp)
   12458:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   1245c:	00c00584 	movi	r3,22
   12460:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12464:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12468:	dfc00017 	ldw	ra,0(sp)
   1246c:	dec00104 	addi	sp,sp,4
   12470:	f800283a 	ret
   12474:	d0a07a04 	addi	r2,gp,-32280
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12478:	00c00584 	movi	r3,22
   1247c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12480:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12484:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   12488:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1248c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   12490:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   12494:	28800017 	ldw	r2,0(r5)
   12498:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   1249c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   124a0:	0005883a 	mov	r2,zero
   124a4:	f800283a 	ret

000124a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   124a8:	defffb04 	addi	sp,sp,-20
   124ac:	dcc00315 	stw	r19,12(sp)
   124b0:	dc800215 	stw	r18,8(sp)
   124b4:	dc400115 	stw	r17,4(sp)
   124b8:	dc000015 	stw	r16,0(sp)
   124bc:	dfc00415 	stw	ra,16(sp)
   124c0:	2027883a 	mov	r19,r4
   124c4:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   124c8:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   124cc:	00110480 	call	11048 <strlen>
   124d0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   124d4:	84400726 	beq	r16,r17,124f4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   124d8:	81000217 	ldw	r4,8(r16)
   124dc:	900d883a 	mov	r6,r18
   124e0:	980b883a 	mov	r5,r19
   124e4:	001259c0 	call	1259c <memcmp>
   124e8:	10000426 	beq	r2,zero,124fc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   124ec:	84000017 	ldw	r16,0(r16)
   124f0:	003ff806 	br	124d4 <__alt_data_end+0xffff24d4>
  }
  
  /* No match found */
  
  return NULL;
   124f4:	0005883a 	mov	r2,zero
   124f8:	00000106 	br	12500 <alt_find_dev+0x58>
   124fc:	8005883a 	mov	r2,r16
}
   12500:	dfc00417 	ldw	ra,16(sp)
   12504:	dcc00317 	ldw	r19,12(sp)
   12508:	dc800217 	ldw	r18,8(sp)
   1250c:	dc400117 	ldw	r17,4(sp)
   12510:	dc000017 	ldw	r16,0(sp)
   12514:	dec00504 	addi	sp,sp,20
   12518:	f800283a 	ret

0001251c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1251c:	f800283a 	ret

00012520 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   12520:	000170fa 	wrctl	ienable,zero
   12524:	f800283a 	ret

00012528 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   12528:	213ffe84 	addi	r4,r4,-6
   1252c:	008003c4 	movi	r2,15
   12530:	11001636 	bltu	r2,r4,1258c <alt_exception_cause_generated_bad_addr+0x64>
   12534:	200890ba 	slli	r4,r4,2
   12538:	00800074 	movhi	r2,1
   1253c:	10895304 	addi	r2,r2,9548
   12540:	2089883a 	add	r4,r4,r2
   12544:	20800017 	ldw	r2,0(r4)
   12548:	1000683a 	jmp	r2
   1254c:	00012594 	movui	zero,1174
   12550:	00012594 	movui	zero,1174
   12554:	0001258c 	andi	zero,zero,1174
   12558:	0001258c 	andi	zero,zero,1174
   1255c:	0001258c 	andi	zero,zero,1174
   12560:	00012594 	movui	zero,1174
   12564:	0001258c 	andi	zero,zero,1174
   12568:	0001258c 	andi	zero,zero,1174
   1256c:	00012594 	movui	zero,1174
   12570:	00012594 	movui	zero,1174
   12574:	0001258c 	andi	zero,zero,1174
   12578:	00012594 	movui	zero,1174
   1257c:	0001258c 	andi	zero,zero,1174
   12580:	0001258c 	andi	zero,zero,1174
   12584:	0001258c 	andi	zero,zero,1174
   12588:	00012594 	movui	zero,1174
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1258c:	0005883a 	mov	r2,zero
   12590:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12594:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   12598:	f800283a 	ret

0001259c <memcmp>:
   1259c:	218d883a 	add	r6,r4,r6
   125a0:	21800826 	beq	r4,r6,125c4 <memcmp+0x28>
   125a4:	20800003 	ldbu	r2,0(r4)
   125a8:	28c00003 	ldbu	r3,0(r5)
   125ac:	10c00226 	beq	r2,r3,125b8 <memcmp+0x1c>
   125b0:	10c5c83a 	sub	r2,r2,r3
   125b4:	f800283a 	ret
   125b8:	21000044 	addi	r4,r4,1
   125bc:	29400044 	addi	r5,r5,1
   125c0:	003ff706 	br	125a0 <__alt_data_end+0xffff25a0>
   125c4:	0005883a 	mov	r2,zero
   125c8:	f800283a 	ret
