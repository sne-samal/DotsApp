
accelerometer.elf:     file format elf32-littlenios2
accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000030cc memsz 0x000030cc flags r-x
    LOAD off    0x000040ec vaddr 0x000130ec paddr 0x00013294 align 2**12
         filesz 0x000001a8 memsz 0x000001a8 flags rw-
    LOAD off    0x0000443c vaddr 0x0001343c paddr 0x0001343c align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002d4c  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000220  00012ecc  00012ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001a8  000130ec  00013294  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  0001343c  0001343c  0000443c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00013730  00013730  00004294  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f0  00000000  00000000  000042b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000076d0  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002dc7  00000000  00000000  0000bf78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003139  00000000  00000000  0000ed3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000950  00000000  00000000  00011e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000219d  00000000  00000000  000127c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a33  00000000  00000000  00014965  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00019398  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000808  00000000  00000000  000193a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001b7aa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001b7ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001b7b0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001b7b1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001b7b2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001b7b6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001b7ba  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001b7be  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001b7c7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001b7d0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  0001b7d9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000039  00000000  00000000  0001b7eb  2**0
                  CONTENTS, READONLY
 29 .jdi          00005009  00000000  00000000  0001b824  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048a95  00000000  00000000  0002082d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00012ecc l    d  .rodata	00000000 .rodata
000130ec l    d  .rwdata	00000000 .rwdata
0001343c l    d  .bss	00000000 .bss
00013730 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../accelerometer_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0001343c l     O .bss	00000004 index.3328
000135f4 l     O .bss	00000014 window.3327
00013530 l     O .bss	000000c4 past_readings.3362
0001346c l     O .bss	000000c4 past_readings.3376
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011efc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00013100 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000131e0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012a80 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012c48 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00013468 g     O .bss	00000004 alt_instruction_exception_handler
00012750 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00013630 g     O .bss	00000100 alt_irq
00013294 g       *ABS*	00000000 __flash_rwdata_start
00011eb0 g     F .text	0000004c printf
00010d24 g     F .text	00000440 .hidden __divsf3
00011164 g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
00013270 g     O .rwdata	00000004 jtag_uart
00012e20 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00012934 g     F .text	00000060 times
00012b3c g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001344c g     O .bss	00000004 errno
00013458 g     O .bss	00000004 alt_argv
0001b264 g       *ABS*	00000000 _gp
0001320c g     O .rwdata	00000030 alt_fd_list
00012cbc g     F .text	00000074 alt_find_dev
00011e4c g     F .text	00000028 memcpy
00011b64 g     F .text	000000dc .hidden __floatsidf
00012e28 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00011e74 g     F .text	0000003c _printf_r
00010778 g     F .text	00000064 .hidden __udivsi3
00013608 g     O .bss	00000014 buffer_q
00013274 g     O .rwdata	00000004 alt_max_fd
000125dc g     F .text	00000094 alt_irq_register
00013264 g     O .rwdata	00000004 _global_impure_ptr
00013730 g       *ABS*	00000000 __bss_end
00012d68 g     F .text	000000b8 alt_tick
00012d34 g     F .text	00000034 alt_alarm_stop
00013450 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001323c g     O .rwdata	00000028 alt_dev_null
00012c44 g     F .text	00000004 alt_dcache_flush_all
00013294 g       *ABS*	00000000 __ram_rwdata_end
00010518 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00013278 g     O .rwdata	00000008 alt_dev_list
00012994 g     F .text	00000060 write
000130ec g       *ABS*	00000000 __ram_rodata_end
00013444 g     O .bss	00000001 led
000107dc g     F .text	00000058 .hidden __umodsi3
00013730 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00012abc g     F .text	00000028 alt_avalon_timer_sc_init
00011de8 g     F .text	00000064 .hidden __clzsi2
00012a4c g     F .text	00000034 altera_avalon_jtag_uart_write
00011f68 g     F .text	0000052c ___vfprintf_internal_r
0001277c g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
00013448 g     O .bss	00000004 level
00013464 g     O .bss	00000004 _alt_tick_rate
00013460 g     O .bss	00000004 _alt_nticks
00012a14 g     F .text	00000038 alt_sys_init
00012aec g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
000111d4 g     F .text	00000124 .hidden __floatsisf
0001361c g     O .bss	00000014 buffer
00010834 g     F .text	00000028 .hidden __mulsi3
000130ec g       *ABS*	00000000 __ram_rwdata_start
00012ecc g       *ABS*	00000000 __ram_rodata_start
00012b94 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00012e9c g     F .text	00000030 memcmp
0001035c g     F .text	000000a0 moving_average_q
00013730 g       *ABS*	00000000 __alt_stack_base
000104b0 g     F .text	00000034 filter_accel_float
000112f8 g     F .text	0000086c .hidden __muldf3
00012c50 g     F .text	0000006c alt_dev_llist_insert
000102c0 g     F .text	0000009c moving_average
000124b0 g     F .text	000000b8 __sfvwrite_small_dev
0001343c g       *ABS*	00000000 __bss_start
00010588 g     F .text	000000f8 main
00013454 g     O .bss	00000004 alt_envp
00011c40 g     F .text	000001a8 .hidden __truncdfsf2
00013288 g     O .rwdata	00000004 alt_errno
00010680 g     F .text	00000084 .hidden __divsi3
00012ecc g       *ABS*	00000000 __flash_rodata_start
000129f4 g     F .text	00000020 alt_irq_init
00012fdd g     O .rodata	00000100 .hidden __clz_tab
00012584 g     F .text	00000058 _write_r
00013268 g     O .rwdata	00000004 _impure_ptr
0001345c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00013440 g     O .bss	00000001 pwm
00013280 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012ae4 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00013294 g       *ABS*	00000000 _edata
00013730 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010704 g     F .text	00000074 .hidden __modsi3
00012bec g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000070 moving_average_quantized
000104e4 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00012b00 g     F .text	00000020 alt_up_accelerometer_spi_read
00012b20 g     F .text	0000001c alt_up_accelerometer_spi_write
00012568 g     F .text	0000001c strlen
000128ec g     F .text	00000048 alt_putchar
000103fc g     F .text	000000b4 filter_accel_int
00012d30 g     F .text	00000004 alt_icache_flush_all
0001326c g     O .rwdata	00000004 alt_priority_mask
00012494 g     F .text	0000001c __vfprintf_internal
0001328c g     O .rwdata	00000008 alt_alarm_list
0001085c g     F .text	000004c8 .hidden __addsf3
000130ec g     O .rwdata	00000014 coefficients
00012670 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	840d8c04 	addi	r16,r16,13872

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08117 	ldw	r2,-32252(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6ac9914 	ori	gp,gp,45668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	108d0f14 	ori	r2,r2,13372

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18cdcc14 	ori	r3,r3,14128

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00126700 	call	12670 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00127500 	call	12750 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07917 	ldw	r2,-32284(gp)
   101cc:	d1607707 	ldb	r5,-32292(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c41004 	addi	r3,r3,4160
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
float buffer[] = {0, 0, 0, 0, 0};
int buffer_q[] = {0, 0, 0, 0, 0};
int coefficients[] = {46, 74, -24, -71, 33};

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07803 	ldbu	r2,-32288(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07803 	ldbu	r2,-32288(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07803 	ldbu	r2,-32288(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07703 	ldbu	r2,-32292(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207705 	stb	zero,-32292(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07705 	stb	r2,-32292(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
float buffer[] = {0, 0, 0, 0, 0};
int buffer_q[] = {0, 0, 0, 0, 0};
int coefficients[] = {46, 74, -24, -71, 33};

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10841004 	addi	r2,r2,4160
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <moving_average_quantized>:
int moving_average_quantized(alt_32 newValue) {
  static int window[WINDOW_SIZE];
  static int index = 0;

  // Add new value to window
  window[index] = newValue;
   10250:	d0a07617 	ldw	r2,-32296(gp)
   10254:	01400074 	movhi	r5,1
   10258:	294d7d04 	addi	r5,r5,13812
   1025c:	1087883a 	add	r3,r2,r2
   10260:	18c7883a 	add	r3,r3,r3
   10264:	28c7883a 	add	r3,r5,r3
   10268:	19000015 	stw	r4,0(r3)

  // Increment index
  index++;
   1026c:	10800044 	addi	r2,r2,1
  if(index >= WINDOW_SIZE) {
   10270:	00c00104 	movi	r3,4
   10274:	18800216 	blt	r3,r2,10280 <moving_average_quantized+0x30>

  // Add new value to window
  window[index] = newValue;

  // Increment index
  index++;
   10278:	d0a07615 	stw	r2,-32296(gp)
   1027c:	00000106 	br	10284 <moving_average_quantized+0x34>
  if(index >= WINDOW_SIZE) {
    index = 0;
   10280:	d0207615 	stw	zero,-32296(gp)

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

int moving_average_quantized(alt_32 newValue) {
   10284:	0005883a 	mov	r2,zero
  if(index >= WINDOW_SIZE) {
    index = 0;
  }

  // Calculate average
  int sum = 0;
   10288:	0009883a 	mov	r4,zero
  for(int i=0; i<WINDOW_SIZE; i++) {
   1028c:	00c00504 	movi	r3,20
    sum += window[i];
   10290:	114d883a 	add	r6,r2,r5
   10294:	31800017 	ldw	r6,0(r6)
   10298:	10800104 	addi	r2,r2,4
   1029c:	2189883a 	add	r4,r4,r6
    index = 0;
  }

  // Calculate average
  int sum = 0;
  for(int i=0; i<WINDOW_SIZE; i++) {
   102a0:	10fffb1e 	bne	r2,r3,10290 <__alt_data_end+0xffff0290>

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

int moving_average_quantized(alt_32 newValue) {
   102a4:	deffff04 	addi	sp,sp,-4
  int sum = 0;
  for(int i=0; i<WINDOW_SIZE; i++) {
    sum += window[i];
  }

  return sum / WINDOW_SIZE;
   102a8:	01400144 	movi	r5,5

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

int moving_average_quantized(alt_32 newValue) {
   102ac:	dfc00015 	stw	ra,0(sp)
  int sum = 0;
  for(int i=0; i<WINDOW_SIZE; i++) {
    sum += window[i];
  }

  return sum / WINDOW_SIZE;
   102b0:	00106800 	call	10680 <__divsi3>
}
   102b4:	dfc00017 	ldw	ra,0(sp)
   102b8:	dec00104 	addi	sp,sp,4
   102bc:	f800283a 	ret

000102c0 <moving_average>:


float moving_average(alt_32 newValue)
{
   102c0:	defffc04 	addi	sp,sp,-16
   102c4:	dc000015 	stw	r16,0(sp)
	// each coefficient is 2
	// start by  shifting each item in the buffer to the right
	for (int i = 0; i < 4; i++)
	{
		buffer[i+1] = buffer[i];
   102c8:	04000074 	movhi	r16,1
   102cc:	840d8704 	addi	r16,r16,13852
   102d0:	80800017 	ldw	r2,0(r16)
  return sum / WINDOW_SIZE;
}


float moving_average(alt_32 newValue)
{
   102d4:	dfc00315 	stw	ra,12(sp)
   102d8:	dc800215 	stw	r18,8(sp)
   102dc:	dc400115 	stw	r17,4(sp)
	// each coefficient is 2
	// start by  shifting each item in the buffer to the right
	for (int i = 0; i < 4; i++)
	{
		buffer[i+1] = buffer[i];
   102e0:	80800115 	stw	r2,4(r16)
   102e4:	80800215 	stw	r2,8(r16)
   102e8:	80800315 	stw	r2,12(r16)
   102ec:	80800415 	stw	r2,16(r16)
	}
	// insert to the start, 0.2*newValue
	buffer[0] = 0.2*newValue;
   102f0:	0011b640 	call	11b64 <__floatsidf>
   102f4:	01a666b4 	movhi	r6,39322
   102f8:	01cff2b4 	movhi	r7,16330
   102fc:	31a66684 	addi	r6,r6,-26214
   10300:	39e66644 	addi	r7,r7,-26215
   10304:	1009883a 	mov	r4,r2
   10308:	180b883a 	mov	r5,r3
   1030c:	00112f80 	call	112f8 <__muldf3>
   10310:	1009883a 	mov	r4,r2
   10314:	180b883a 	mov	r5,r3
   10318:	0011c400 	call	11c40 <__truncdfsf2>
   1031c:	80800015 	stw	r2,0(r16)
   10320:	0023883a 	mov	r17,zero
	// calculate sum
	float average = 0;
   10324:	0009883a 	mov	r4,zero
	for(int i = 0; i < 5; i++)
   10328:	04800504 	movi	r18,20
	{
		average += buffer[i];
   1032c:	8c05883a 	add	r2,r17,r16
   10330:	11400017 	ldw	r5,0(r2)
   10334:	8c400104 	addi	r17,r17,4
   10338:	001085c0 	call	1085c <__addsf3>
   1033c:	1009883a 	mov	r4,r2
	}
	// insert to the start, 0.2*newValue
	buffer[0] = 0.2*newValue;
	// calculate sum
	float average = 0;
	for(int i = 0; i < 5; i++)
   10340:	8cbffa1e 	bne	r17,r18,1032c <__alt_data_end+0xffff032c>
	{
		average += buffer[i];
	}
	// return average
	return average;
}
   10344:	dfc00317 	ldw	ra,12(sp)
   10348:	dc800217 	ldw	r18,8(sp)
   1034c:	dc400117 	ldw	r17,4(sp)
   10350:	dc000017 	ldw	r16,0(sp)
   10354:	dec00404 	addi	sp,sp,16
   10358:	f800283a 	ret

0001035c <moving_average_q>:
{
	// each coefficient is 2
	// start by  shifting each item in the buffer to the right
	for (int i = 0; i < 4; i++)
	{
		buffer_q[i+1] = buffer_q[i];
   1035c:	00800074 	movhi	r2,1
   10360:	108d8204 	addi	r2,r2,13832
   10364:	10c00017 	ldw	r3,0(r2)
	// return average
	return average;
}

int moving_average_q(alt_32 newValue)
{
   10368:	defffb04 	addi	sp,sp,-20
   1036c:	dcc00315 	stw	r19,12(sp)
   10370:	dc800215 	stw	r18,8(sp)
   10374:	dc400115 	stw	r17,4(sp)
   10378:	dc000015 	stw	r16,0(sp)
   1037c:	dfc00415 	stw	ra,16(sp)
	for (int i = 0; i < 4; i++)
	{
		buffer_q[i+1] = buffer_q[i];
	}
	// insert to the start, 0.2*newValue
	buffer_q[0] = 2*newValue;
   10380:	2109883a 	add	r4,r4,r4
{
	// each coefficient is 2
	// start by  shifting each item in the buffer to the right
	for (int i = 0; i < 4; i++)
	{
		buffer_q[i+1] = buffer_q[i];
   10384:	10c00115 	stw	r3,4(r2)
   10388:	10c00215 	stw	r3,8(r2)
   1038c:	10c00315 	stw	r3,12(r2)
   10390:	10c00415 	stw	r3,16(r2)
	}
	// insert to the start, 0.2*newValue
	buffer_q[0] = 2*newValue;
   10394:	11000015 	stw	r4,0(r2)
   10398:	0023883a 	mov	r17,zero
	// calculate sum
	float average = 0;
   1039c:	0025883a 	mov	r18,zero
   103a0:	1021883a 	mov	r16,r2
	for(int i = 0; i < 5; i++)
   103a4:	04c00504 	movi	r19,20
	{
		average += buffer_q[i];
   103a8:	8c05883a 	add	r2,r17,r16
   103ac:	11000017 	ldw	r4,0(r2)
   103b0:	8c400104 	addi	r17,r17,4
   103b4:	00111d40 	call	111d4 <__floatsisf>
   103b8:	9009883a 	mov	r4,r18
   103bc:	100b883a 	mov	r5,r2
   103c0:	001085c0 	call	1085c <__addsf3>
   103c4:	1025883a 	mov	r18,r2
	}
	// insert to the start, 0.2*newValue
	buffer_q[0] = 2*newValue;
	// calculate sum
	float average = 0;
	for(int i = 0; i < 5; i++)
   103c8:	8cfff71e 	bne	r17,r19,103a8 <__alt_data_end+0xffff03a8>
	{
		average += buffer_q[i];
	}
	// return average
	return average/10;
   103cc:	01504834 	movhi	r5,16672
   103d0:	1009883a 	mov	r4,r2
   103d4:	0010d240 	call	10d24 <__divsf3>
   103d8:	1009883a 	mov	r4,r2
   103dc:	00111640 	call	11164 <__fixsfsi>
}
   103e0:	dfc00417 	ldw	ra,16(sp)
   103e4:	dcc00317 	ldw	r19,12(sp)
   103e8:	dc800217 	ldw	r18,8(sp)
   103ec:	dc400117 	ldw	r17,4(sp)
   103f0:	dc000017 	ldw	r16,0(sp)
   103f4:	dec00504 	addi	sp,sp,20
   103f8:	f800283a 	ret

000103fc <filter_accel_int>:


int filter_accel_int (int accel_reading) {
   103fc:	deffca04 	addi	sp,sp,-216
	alt_32 filter_coeffs[FILTER_TAPS] = {
   10400:	01400074 	movhi	r5,1
	// return average
	return average/10;
}


int filter_accel_int (int accel_reading) {
   10404:	dc003115 	stw	r16,196(sp)
	alt_32 filter_coeffs[FILTER_TAPS] = {
   10408:	01803104 	movi	r6,196
	// return average
	return average/10;
}


int filter_accel_int (int accel_reading) {
   1040c:	2021883a 	mov	r16,r4
	alt_32 filter_coeffs[FILTER_TAPS] = {
   10410:	294bb304 	addi	r5,r5,11980
   10414:	d809883a 	mov	r4,sp
	// return average
	return average/10;
}


int filter_accel_int (int accel_reading) {
   10418:	dfc03515 	stw	ra,212(sp)
   1041c:	dcc03415 	stw	r19,208(sp)
   10420:	dc803315 	stw	r18,204(sp)
   10424:	dc403215 	stw	r17,200(sp)
	alt_32 filter_coeffs[FILTER_TAPS] = {
   10428:	0011e4c0 	call	11e4c <memcpy>
   1042c:	00800074 	movhi	r2,1
   10430:	108d7b04 	addi	r2,r2,13804
	};

	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
   10434:	00c00c04 	movi	r3,48
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
   10438:	11000017 	ldw	r4,0(r2)
   1043c:	18ffffc4 	addi	r3,r3,-1
   10440:	10bfff04 	addi	r2,r2,-4
   10444:	11000215 	stw	r4,8(r2)
	};

	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
   10448:	183ffb1e 	bne	r3,zero,10438 <__alt_data_end+0xffff0438>
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
    }

    past_readings[0] = accel_reading;
   1044c:	00800074 	movhi	r2,1
   10450:	108d4c04 	addi	r2,r2,13616
   10454:	14000015 	stw	r16,0(r2)
	    44, 40, -94, 1, 33, -71, -24, 74,
	    46
	};

	static alt_32 past_readings[FILTER_TAPS] = {0};
    alt_32 filtered_value = 0;
   10458:	0025883a 	mov	r18,zero
    for (int i = FILTER_TAPS - 1; i > 0; i--) {
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
    }

    past_readings[0] = accel_reading;
   1045c:	0021883a 	mov	r16,zero
   10460:	1023883a 	mov	r17,r2

    for (int i = 0; i < FILTER_TAPS; i++) {
   10464:	04c03104 	movi	r19,196
    	filtered_value += past_readings[i] * filter_coeffs[i];
   10468:	8445883a 	add	r2,r16,r17
   1046c:	dc07883a 	add	r3,sp,r16
   10470:	19400017 	ldw	r5,0(r3)
   10474:	11000017 	ldw	r4,0(r2)
   10478:	84000104 	addi	r16,r16,4
   1047c:	00108340 	call	10834 <__mulsi3>
   10480:	90a5883a 	add	r18,r18,r2
        past_readings[i] = past_readings[i-1];
    }

    past_readings[0] = accel_reading;

    for (int i = 0; i < FILTER_TAPS; i++) {
   10484:	84fff81e 	bne	r16,r19,10468 <__alt_data_end+0xffff0468>
    	filtered_value += past_readings[i] * filter_coeffs[i];
    }


    return filtered_value/10000;
   10488:	0149c404 	movi	r5,10000
   1048c:	9009883a 	mov	r4,r18
   10490:	00106800 	call	10680 <__divsi3>
}
   10494:	dfc03517 	ldw	ra,212(sp)
   10498:	dcc03417 	ldw	r19,208(sp)
   1049c:	dc803317 	ldw	r18,204(sp)
   104a0:	dc403217 	ldw	r17,200(sp)
   104a4:	dc003117 	ldw	r16,196(sp)
   104a8:	dec03604 	addi	sp,sp,216
   104ac:	f800283a 	ret

000104b0 <filter_accel_float>:


float filter_accel_float (int accel_reading) {
   104b0:	00800074 	movhi	r2,1
   104b4:	108d4a04 	addi	r2,r2,13608
	};

	static alt_32 past_readings[FILTER_TAPS] = {0};
    float filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
   104b8:	00c00c04 	movi	r3,48
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
   104bc:	11400017 	ldw	r5,0(r2)
   104c0:	18ffffc4 	addi	r3,r3,-1
   104c4:	10bfff04 	addi	r2,r2,-4
   104c8:	11400215 	stw	r5,8(r2)
	};

	static alt_32 past_readings[FILTER_TAPS] = {0};
    float filtered_value = 0;

    for (int i = FILTER_TAPS - 1; i > 0; i--) {
   104cc:	183ffb1e 	bne	r3,zero,104bc <__alt_data_end+0xffff04bc>
        // Shift past readings to the right, making room for the new reading
        past_readings[i] = past_readings[i-1];
    }

    past_readings[0] = accel_reading;
   104d0:	00800074 	movhi	r2,1
   104d4:	108d1b04 	addi	r2,r2,13420
   104d8:	11000015 	stw	r4,0(r2)
    	// alt_printf("Calculating...");
    }


    return filtered_value;
}
   104dc:	0005883a 	mov	r2,zero
   104e0:	f800283a 	ret

000104e4 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   104e4:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   104e8:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   104ec:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   104f0:	10c001cc 	andi	r3,r2,7
   104f4:	00800204 	movi	r2,8
   104f8:	10cfc83a 	sub	r7,r2,r3
   104fc:	11ce983a 	sll	r7,r2,r7
   10500:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10504:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10508:	3884b03a 	or	r2,r7,r2
   1050c:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   10510:	29000015 	stw	r4,0(r5)
   10514:	f800283a 	ret

00010518 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   10518:	defffe04 	addi	sp,sp,-8
   1051c:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10520:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   10524:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10528:	84040904 	addi	r16,r16,4132
   1052c:	008000c4 	movi	r2,3
   10530:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10534:	00c000b4 	movhi	r3,2
   10538:	0005883a 	mov	r2,zero
   1053c:	18c40804 	addi	r3,r3,4128
   10540:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10544:	00c000b4 	movhi	r3,2
   10548:	18c40a04 	addi	r3,r3,4136
   1054c:	01424004 	movi	r5,2304
   10550:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   10554:	00c000b4 	movhi	r3,2
   10558:	18c40b04 	addi	r3,r3,4140
   1055c:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10560:	200d883a 	mov	r6,r4
   10564:	000b883a 	mov	r5,zero
   10568:	01000044 	movi	r4,1
   1056c:	00125dc0 	call	125dc <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10570:	008001c4 	movi	r2,7
   10574:	80800035 	stwio	r2,0(r16)

}
   10578:	dfc00117 	ldw	ra,4(sp)
   1057c:	dc000017 	ldw	r16,0(sp)
   10580:	dec00204 	addi	sp,sp,8
   10584:	f800283a 	ret

00010588 <main>:



    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10588:	01000074 	movhi	r4,1
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}


int main() {
   1058c:	defffa04 	addi	sp,sp,-24



    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10590:	210be404 	addi	r4,r4,12176
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}


int main() {
   10594:	dfc00515 	stw	ra,20(sp)
   10598:	dcc00415 	stw	r19,16(sp)
   1059c:	dc800315 	stw	r18,12(sp)
   105a0:	dc400215 	stw	r17,8(sp)
   105a4:	dc000115 	stw	r16,4(sp)



    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   105a8:	0012ae40 	call	12ae4 <alt_up_accelerometer_spi_open_dev>

    alt_32 x_read_filtered;

    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   105ac:	10002c26 	beq	r2,zero,10660 <main+0xd8>
        return 1;
    }

    clock_t exec_t1, exec_t2;
    alt_printf("Timer Started");
   105b0:	01000074 	movhi	r4,1
   105b4:	210bea04 	addi	r4,r4,12200
   105b8:	1025883a 	mov	r18,r2
   105bc:	001277c0 	call	1277c <alt_printf>
    struct tms timer;
    int iterations = 1000;

    exec_t1 = times(NULL); // get system time before starting the process
   105c0:	0009883a 	mov	r4,zero
   105c4:	00129340 	call	12934 <times>
    int i = 0;
    timer_init(sys_timer_isr);
   105c8:	01000074 	movhi	r4,1
   105cc:	21006f04 	addi	r4,r4,444
    clock_t exec_t1, exec_t2;
    alt_printf("Timer Started");
    struct tms timer;
    int iterations = 1000;

    exec_t1 = times(NULL); // get system time before starting the process
   105d0:	1027883a 	mov	r19,r2
    int i = 0;
    timer_init(sys_timer_isr);
   105d4:	0400fa04 	movi	r16,1000
   105d8:	00105180 	call	10518 <timer_init>
    while (i < iterations) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   105dc:	d80b883a 	mov	r5,sp
   105e0:	9009883a 	mov	r4,r18
   105e4:	0012b3c0 	call	12b3c <alt_up_accelerometer_spi_read_x_axis>

        x_read_filtered = (alt_32)filter_accel_int(x_read);
   105e8:	d9000017 	ldw	r4,0(sp)
   105ec:	843fffc4 	addi	r16,r16,-1
   105f0:	00103fc0 	call	103fc <filter_accel_int>

        // x_read_filtered = (alt_32)filter_accel_float(x_read);
        convert_read(x_read_filtered, & level, & led);
   105f4:	d1a07804 	addi	r6,gp,-32288
   105f8:	1009883a 	mov	r4,r2
   105fc:	d1607904 	addi	r5,gp,-32284
    timer_init(sys_timer_isr);
    while (i < iterations) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);

        x_read_filtered = (alt_32)filter_accel_int(x_read);
   10600:	1023883a 	mov	r17,r2

        // x_read_filtered = (alt_32)filter_accel_float(x_read);
        convert_read(x_read_filtered, & level, & led);
   10604:	00104e40 	call	104e4 <convert_read>
        printf("filtered value: %d\n", (int)x_read_filtered);
   10608:	01000074 	movhi	r4,1
   1060c:	880b883a 	mov	r5,r17
   10610:	210bee04 	addi	r4,r4,12216
   10614:	0011eb00 	call	11eb0 <printf>
        alt_printf("level %x\n", level);
   10618:	d1607917 	ldw	r5,-32284(gp)
   1061c:	01000074 	movhi	r4,1
   10620:	210bf304 	addi	r4,r4,12236
   10624:	001277c0 	call	1277c <alt_printf>
    int iterations = 1000;

    exec_t1 = times(NULL); // get system time before starting the process
    int i = 0;
    timer_init(sys_timer_isr);
    while (i < iterations) {
   10628:	803fec1e 	bne	r16,zero,105dc <__alt_data_end+0xffff05dc>

        i++;

    }

    exec_t2 = times(NULL); // get system time after finishing the process
   1062c:	0009883a 	mov	r4,zero
   10630:	00129340 	call	12934 <times>
    long time_1 = exec_t1;
    long time_2 = exec_t2;
    printf("%ld\n", time_1);
   10634:	01000074 	movhi	r4,1
   10638:	980b883a 	mov	r5,r19
   1063c:	210bf604 	addi	r4,r4,12248

        i++;

    }

    exec_t2 = times(NULL); // get system time after finishing the process
   10640:	1021883a 	mov	r16,r2
    long time_1 = exec_t1;
    long time_2 = exec_t2;
    printf("%ld\n", time_1);
   10644:	0011eb00 	call	11eb0 <printf>
    printf("%ld\n", time_2);
   10648:	01000074 	movhi	r4,1
   1064c:	800b883a 	mov	r5,r16
   10650:	210bf604 	addi	r4,r4,12248
   10654:	0011eb00 	call	11eb0 <printf>
    //printf(" proc time= %ju ticks\n", (uintmax_t)(exec_t2-exec_t1));

    return 0;
   10658:	0005883a 	mov	r2,zero
   1065c:	00000106 	br	10664 <main+0xdc>
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");

    alt_32 x_read_filtered;

    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
   10660:	00800044 	movi	r2,1
    printf("%ld\n", time_1);
    printf("%ld\n", time_2);
    //printf(" proc time= %ju ticks\n", (uintmax_t)(exec_t2-exec_t1));

    return 0;
}
   10664:	dfc00517 	ldw	ra,20(sp)
   10668:	dcc00417 	ldw	r19,16(sp)
   1066c:	dc800317 	ldw	r18,12(sp)
   10670:	dc400217 	ldw	r17,8(sp)
   10674:	dc000117 	ldw	r16,4(sp)
   10678:	dec00604 	addi	sp,sp,24
   1067c:	f800283a 	ret

00010680 <__divsi3>:
   10680:	20001b16 	blt	r4,zero,106f0 <__divsi3+0x70>
   10684:	000f883a 	mov	r7,zero
   10688:	28001616 	blt	r5,zero,106e4 <__divsi3+0x64>
   1068c:	200d883a 	mov	r6,r4
   10690:	29001a2e 	bgeu	r5,r4,106fc <__divsi3+0x7c>
   10694:	00800804 	movi	r2,32
   10698:	00c00044 	movi	r3,1
   1069c:	00000106 	br	106a4 <__divsi3+0x24>
   106a0:	10000d26 	beq	r2,zero,106d8 <__divsi3+0x58>
   106a4:	294b883a 	add	r5,r5,r5
   106a8:	10bfffc4 	addi	r2,r2,-1
   106ac:	18c7883a 	add	r3,r3,r3
   106b0:	293ffb36 	bltu	r5,r4,106a0 <__alt_data_end+0xffff06a0>
   106b4:	0005883a 	mov	r2,zero
   106b8:	18000726 	beq	r3,zero,106d8 <__divsi3+0x58>
   106bc:	0005883a 	mov	r2,zero
   106c0:	31400236 	bltu	r6,r5,106cc <__divsi3+0x4c>
   106c4:	314dc83a 	sub	r6,r6,r5
   106c8:	10c4b03a 	or	r2,r2,r3
   106cc:	1806d07a 	srli	r3,r3,1
   106d0:	280ad07a 	srli	r5,r5,1
   106d4:	183ffa1e 	bne	r3,zero,106c0 <__alt_data_end+0xffff06c0>
   106d8:	38000126 	beq	r7,zero,106e0 <__divsi3+0x60>
   106dc:	0085c83a 	sub	r2,zero,r2
   106e0:	f800283a 	ret
   106e4:	014bc83a 	sub	r5,zero,r5
   106e8:	39c0005c 	xori	r7,r7,1
   106ec:	003fe706 	br	1068c <__alt_data_end+0xffff068c>
   106f0:	0109c83a 	sub	r4,zero,r4
   106f4:	01c00044 	movi	r7,1
   106f8:	003fe306 	br	10688 <__alt_data_end+0xffff0688>
   106fc:	00c00044 	movi	r3,1
   10700:	003fee06 	br	106bc <__alt_data_end+0xffff06bc>

00010704 <__modsi3>:
   10704:	20001716 	blt	r4,zero,10764 <__modsi3+0x60>
   10708:	000f883a 	mov	r7,zero
   1070c:	2005883a 	mov	r2,r4
   10710:	28001216 	blt	r5,zero,1075c <__modsi3+0x58>
   10714:	2900162e 	bgeu	r5,r4,10770 <__modsi3+0x6c>
   10718:	01800804 	movi	r6,32
   1071c:	00c00044 	movi	r3,1
   10720:	00000106 	br	10728 <__modsi3+0x24>
   10724:	30000a26 	beq	r6,zero,10750 <__modsi3+0x4c>
   10728:	294b883a 	add	r5,r5,r5
   1072c:	31bfffc4 	addi	r6,r6,-1
   10730:	18c7883a 	add	r3,r3,r3
   10734:	293ffb36 	bltu	r5,r4,10724 <__alt_data_end+0xffff0724>
   10738:	18000526 	beq	r3,zero,10750 <__modsi3+0x4c>
   1073c:	1806d07a 	srli	r3,r3,1
   10740:	11400136 	bltu	r2,r5,10748 <__modsi3+0x44>
   10744:	1145c83a 	sub	r2,r2,r5
   10748:	280ad07a 	srli	r5,r5,1
   1074c:	183ffb1e 	bne	r3,zero,1073c <__alt_data_end+0xffff073c>
   10750:	38000126 	beq	r7,zero,10758 <__modsi3+0x54>
   10754:	0085c83a 	sub	r2,zero,r2
   10758:	f800283a 	ret
   1075c:	014bc83a 	sub	r5,zero,r5
   10760:	003fec06 	br	10714 <__alt_data_end+0xffff0714>
   10764:	0109c83a 	sub	r4,zero,r4
   10768:	01c00044 	movi	r7,1
   1076c:	003fe706 	br	1070c <__alt_data_end+0xffff070c>
   10770:	00c00044 	movi	r3,1
   10774:	003ff106 	br	1073c <__alt_data_end+0xffff073c>

00010778 <__udivsi3>:
   10778:	200d883a 	mov	r6,r4
   1077c:	2900152e 	bgeu	r5,r4,107d4 <__udivsi3+0x5c>
   10780:	28001416 	blt	r5,zero,107d4 <__udivsi3+0x5c>
   10784:	00800804 	movi	r2,32
   10788:	00c00044 	movi	r3,1
   1078c:	00000206 	br	10798 <__udivsi3+0x20>
   10790:	10000e26 	beq	r2,zero,107cc <__udivsi3+0x54>
   10794:	28000516 	blt	r5,zero,107ac <__udivsi3+0x34>
   10798:	294b883a 	add	r5,r5,r5
   1079c:	10bfffc4 	addi	r2,r2,-1
   107a0:	18c7883a 	add	r3,r3,r3
   107a4:	293ffa36 	bltu	r5,r4,10790 <__alt_data_end+0xffff0790>
   107a8:	18000826 	beq	r3,zero,107cc <__udivsi3+0x54>
   107ac:	0005883a 	mov	r2,zero
   107b0:	31400236 	bltu	r6,r5,107bc <__udivsi3+0x44>
   107b4:	314dc83a 	sub	r6,r6,r5
   107b8:	10c4b03a 	or	r2,r2,r3
   107bc:	1806d07a 	srli	r3,r3,1
   107c0:	280ad07a 	srli	r5,r5,1
   107c4:	183ffa1e 	bne	r3,zero,107b0 <__alt_data_end+0xffff07b0>
   107c8:	f800283a 	ret
   107cc:	0005883a 	mov	r2,zero
   107d0:	f800283a 	ret
   107d4:	00c00044 	movi	r3,1
   107d8:	003ff406 	br	107ac <__alt_data_end+0xffff07ac>

000107dc <__umodsi3>:
   107dc:	2005883a 	mov	r2,r4
   107e0:	2900122e 	bgeu	r5,r4,1082c <__umodsi3+0x50>
   107e4:	28001116 	blt	r5,zero,1082c <__umodsi3+0x50>
   107e8:	01800804 	movi	r6,32
   107ec:	00c00044 	movi	r3,1
   107f0:	00000206 	br	107fc <__umodsi3+0x20>
   107f4:	30000c26 	beq	r6,zero,10828 <__umodsi3+0x4c>
   107f8:	28000516 	blt	r5,zero,10810 <__umodsi3+0x34>
   107fc:	294b883a 	add	r5,r5,r5
   10800:	31bfffc4 	addi	r6,r6,-1
   10804:	18c7883a 	add	r3,r3,r3
   10808:	293ffa36 	bltu	r5,r4,107f4 <__alt_data_end+0xffff07f4>
   1080c:	18000626 	beq	r3,zero,10828 <__umodsi3+0x4c>
   10810:	1806d07a 	srli	r3,r3,1
   10814:	11400136 	bltu	r2,r5,1081c <__umodsi3+0x40>
   10818:	1145c83a 	sub	r2,r2,r5
   1081c:	280ad07a 	srli	r5,r5,1
   10820:	183ffb1e 	bne	r3,zero,10810 <__alt_data_end+0xffff0810>
   10824:	f800283a 	ret
   10828:	f800283a 	ret
   1082c:	00c00044 	movi	r3,1
   10830:	003ff706 	br	10810 <__alt_data_end+0xffff0810>

00010834 <__mulsi3>:
   10834:	0005883a 	mov	r2,zero
   10838:	20000726 	beq	r4,zero,10858 <__mulsi3+0x24>
   1083c:	20c0004c 	andi	r3,r4,1
   10840:	2008d07a 	srli	r4,r4,1
   10844:	18000126 	beq	r3,zero,1084c <__mulsi3+0x18>
   10848:	1145883a 	add	r2,r2,r5
   1084c:	294b883a 	add	r5,r5,r5
   10850:	203ffa1e 	bne	r4,zero,1083c <__alt_data_end+0xffff083c>
   10854:	f800283a 	ret
   10858:	f800283a 	ret

0001085c <__addsf3>:
   1085c:	defffc04 	addi	sp,sp,-16
   10860:	2004d7fa 	srli	r2,r4,31
   10864:	280cd5fa 	srli	r6,r5,23
   10868:	dc000015 	stw	r16,0(sp)
   1086c:	00c02034 	movhi	r3,128
   10870:	2020d5fa 	srli	r16,r4,23
   10874:	280ed7fa 	srli	r7,r5,31
   10878:	18ffffc4 	addi	r3,r3,-1
   1087c:	dc400115 	stw	r17,4(sp)
   10880:	1908703a 	and	r4,r3,r4
   10884:	194a703a 	and	r5,r3,r5
   10888:	dfc00315 	stw	ra,12(sp)
   1088c:	dc800215 	stw	r18,8(sp)
   10890:	14403fcc 	andi	r17,r2,255
   10894:	84003fcc 	andi	r16,r16,255
   10898:	200890fa 	slli	r4,r4,3
   1089c:	31803fcc 	andi	r6,r6,255
   108a0:	280a90fa 	slli	r5,r5,3
   108a4:	89c05026 	beq	r17,r7,109e8 <__addsf3+0x18c>
   108a8:	8185c83a 	sub	r2,r16,r6
   108ac:	00807a0e 	bge	zero,r2,10a98 <__addsf3+0x23c>
   108b0:	30001e1e 	bne	r6,zero,1092c <__addsf3+0xd0>
   108b4:	28006d1e 	bne	r5,zero,10a6c <__addsf3+0x210>
   108b8:	208001cc 	andi	r2,r4,7
   108bc:	10000426 	beq	r2,zero,108d0 <__addsf3+0x74>
   108c0:	208003cc 	andi	r2,r4,15
   108c4:	00c00104 	movi	r3,4
   108c8:	10c00126 	beq	r2,r3,108d0 <__addsf3+0x74>
   108cc:	20c9883a 	add	r4,r4,r3
   108d0:	2081002c 	andhi	r2,r4,1024
   108d4:	10003926 	beq	r2,zero,109bc <__addsf3+0x160>
   108d8:	84000044 	addi	r16,r16,1
   108dc:	00803fc4 	movi	r2,255
   108e0:	80807826 	beq	r16,r2,10ac4 <__addsf3+0x268>
   108e4:	200891ba 	slli	r4,r4,6
   108e8:	8805883a 	mov	r2,r17
   108ec:	2008d27a 	srli	r4,r4,9
   108f0:	84003fcc 	andi	r16,r16,255
   108f4:	800695fa 	slli	r3,r16,23
   108f8:	10803fcc 	andi	r2,r2,255
   108fc:	04002034 	movhi	r16,128
   10900:	843fffc4 	addi	r16,r16,-1
   10904:	100497fa 	slli	r2,r2,31
   10908:	2408703a 	and	r4,r4,r16
   1090c:	20e0b03a 	or	r16,r4,r3
   10910:	8084b03a 	or	r2,r16,r2
   10914:	dfc00317 	ldw	ra,12(sp)
   10918:	dc800217 	ldw	r18,8(sp)
   1091c:	dc400117 	ldw	r17,4(sp)
   10920:	dc000017 	ldw	r16,0(sp)
   10924:	dec00404 	addi	sp,sp,16
   10928:	f800283a 	ret
   1092c:	00c03fc4 	movi	r3,255
   10930:	80ffe126 	beq	r16,r3,108b8 <__alt_data_end+0xffff08b8>
   10934:	29410034 	orhi	r5,r5,1024
   10938:	00c006c4 	movi	r3,27
   1093c:	18807516 	blt	r3,r2,10b14 <__addsf3+0x2b8>
   10940:	00c00804 	movi	r3,32
   10944:	1887c83a 	sub	r3,r3,r2
   10948:	28c6983a 	sll	r3,r5,r3
   1094c:	288ad83a 	srl	r5,r5,r2
   10950:	1804c03a 	cmpne	r2,r3,zero
   10954:	288ab03a 	or	r5,r5,r2
   10958:	2149c83a 	sub	r4,r4,r5
   1095c:	2081002c 	andhi	r2,r4,1024
   10960:	10001426 	beq	r2,zero,109b4 <__addsf3+0x158>
   10964:	04810034 	movhi	r18,1024
   10968:	94bfffc4 	addi	r18,r18,-1
   1096c:	24a4703a 	and	r18,r4,r18
   10970:	9009883a 	mov	r4,r18
   10974:	0011de80 	call	11de8 <__clzsi2>
   10978:	10bffec4 	addi	r2,r2,-5
   1097c:	90a4983a 	sll	r18,r18,r2
   10980:	14005416 	blt	r2,r16,10ad4 <__addsf3+0x278>
   10984:	1405c83a 	sub	r2,r2,r16
   10988:	11000044 	addi	r4,r2,1
   1098c:	00800804 	movi	r2,32
   10990:	1105c83a 	sub	r2,r2,r4
   10994:	9084983a 	sll	r2,r18,r2
   10998:	9124d83a 	srl	r18,r18,r4
   1099c:	0021883a 	mov	r16,zero
   109a0:	1008c03a 	cmpne	r4,r2,zero
   109a4:	9108b03a 	or	r4,r18,r4
   109a8:	003fc306 	br	108b8 <__alt_data_end+0xffff08b8>
   109ac:	1000db26 	beq	r2,zero,10d1c <__addsf3+0x4c0>
   109b0:	1009883a 	mov	r4,r2
   109b4:	208001cc 	andi	r2,r4,7
   109b8:	103fc11e 	bne	r2,zero,108c0 <__alt_data_end+0xffff08c0>
   109bc:	2006d0fa 	srli	r3,r4,3
   109c0:	01003fc4 	movi	r4,255
   109c4:	8805883a 	mov	r2,r17
   109c8:	8100241e 	bne	r16,r4,10a5c <__addsf3+0x200>
   109cc:	18006e26 	beq	r3,zero,10b88 <__addsf3+0x32c>
   109d0:	19001034 	orhi	r4,r3,64
   109d4:	00c02034 	movhi	r3,128
   109d8:	18ffffc4 	addi	r3,r3,-1
   109dc:	043fffc4 	movi	r16,-1
   109e0:	20c8703a 	and	r4,r4,r3
   109e4:	003fc206 	br	108f0 <__alt_data_end+0xffff08f0>
   109e8:	8187c83a 	sub	r3,r16,r6
   109ec:	00c03e0e 	bge	zero,r3,10ae8 <__addsf3+0x28c>
   109f0:	30002326 	beq	r6,zero,10a80 <__addsf3+0x224>
   109f4:	01803fc4 	movi	r6,255
   109f8:	81bfaf26 	beq	r16,r6,108b8 <__alt_data_end+0xffff08b8>
   109fc:	29410034 	orhi	r5,r5,1024
   10a00:	018006c4 	movi	r6,27
   10a04:	30c07416 	blt	r6,r3,10bd8 <__addsf3+0x37c>
   10a08:	01800804 	movi	r6,32
   10a0c:	30cdc83a 	sub	r6,r6,r3
   10a10:	298c983a 	sll	r6,r5,r6
   10a14:	28cad83a 	srl	r5,r5,r3
   10a18:	3006c03a 	cmpne	r3,r6,zero
   10a1c:	28cab03a 	or	r5,r5,r3
   10a20:	2149883a 	add	r4,r4,r5
   10a24:	20c1002c 	andhi	r3,r4,1024
   10a28:	183fe226 	beq	r3,zero,109b4 <__alt_data_end+0xffff09b4>
   10a2c:	84000044 	addi	r16,r16,1
   10a30:	00c03fc4 	movi	r3,255
   10a34:	80c05426 	beq	r16,r3,10b88 <__addsf3+0x32c>
   10a38:	00bf0034 	movhi	r2,64512
   10a3c:	10bfffc4 	addi	r2,r2,-1
   10a40:	20c0004c 	andi	r3,r4,1
   10a44:	2088703a 	and	r4,r4,r2
   10a48:	2008d07a 	srli	r4,r4,1
   10a4c:	20c8b03a 	or	r4,r4,r3
   10a50:	003f9906 	br	108b8 <__alt_data_end+0xffff08b8>
   10a54:	0007883a 	mov	r3,zero
   10a58:	0005883a 	mov	r2,zero
   10a5c:	01002034 	movhi	r4,128
   10a60:	213fffc4 	addi	r4,r4,-1
   10a64:	1908703a 	and	r4,r3,r4
   10a68:	003fa106 	br	108f0 <__alt_data_end+0xffff08f0>
   10a6c:	10bfffc4 	addi	r2,r2,-1
   10a70:	103fb926 	beq	r2,zero,10958 <__alt_data_end+0xffff0958>
   10a74:	00c03fc4 	movi	r3,255
   10a78:	80ffaf1e 	bne	r16,r3,10938 <__alt_data_end+0xffff0938>
   10a7c:	003f8e06 	br	108b8 <__alt_data_end+0xffff08b8>
   10a80:	283f8d26 	beq	r5,zero,108b8 <__alt_data_end+0xffff08b8>
   10a84:	18ffffc4 	addi	r3,r3,-1
   10a88:	183fe526 	beq	r3,zero,10a20 <__alt_data_end+0xffff0a20>
   10a8c:	01803fc4 	movi	r6,255
   10a90:	81bfdb1e 	bne	r16,r6,10a00 <__alt_data_end+0xffff0a00>
   10a94:	003f8806 	br	108b8 <__alt_data_end+0xffff08b8>
   10a98:	1000201e 	bne	r2,zero,10b1c <__addsf3+0x2c0>
   10a9c:	80800044 	addi	r2,r16,1
   10aa0:	10803fcc 	andi	r2,r2,255
   10aa4:	01800044 	movi	r6,1
   10aa8:	3080450e 	bge	r6,r2,10bc0 <__addsf3+0x364>
   10aac:	2165c83a 	sub	r18,r4,r5
   10ab0:	90c1002c 	andhi	r3,r18,1024
   10ab4:	18002b26 	beq	r3,zero,10b64 <__addsf3+0x308>
   10ab8:	2925c83a 	sub	r18,r5,r4
   10abc:	3823883a 	mov	r17,r7
   10ac0:	003fab06 	br	10970 <__alt_data_end+0xffff0970>
   10ac4:	8805883a 	mov	r2,r17
   10ac8:	043fffc4 	movi	r16,-1
   10acc:	0009883a 	mov	r4,zero
   10ad0:	003f8706 	br	108f0 <__alt_data_end+0xffff08f0>
   10ad4:	013f0034 	movhi	r4,64512
   10ad8:	213fffc4 	addi	r4,r4,-1
   10adc:	80a1c83a 	sub	r16,r16,r2
   10ae0:	9108703a 	and	r4,r18,r4
   10ae4:	003f7406 	br	108b8 <__alt_data_end+0xffff08b8>
   10ae8:	1800411e 	bne	r3,zero,10bf0 <__addsf3+0x394>
   10aec:	80c00044 	addi	r3,r16,1
   10af0:	19c03fcc 	andi	r7,r3,255
   10af4:	01800044 	movi	r6,1
   10af8:	31c0260e 	bge	r6,r7,10b94 <__addsf3+0x338>
   10afc:	01803fc4 	movi	r6,255
   10b00:	19802126 	beq	r3,r6,10b88 <__addsf3+0x32c>
   10b04:	2149883a 	add	r4,r4,r5
   10b08:	2008d07a 	srli	r4,r4,1
   10b0c:	1821883a 	mov	r16,r3
   10b10:	003f6906 	br	108b8 <__alt_data_end+0xffff08b8>
   10b14:	01400044 	movi	r5,1
   10b18:	003f8f06 	br	10958 <__alt_data_end+0xffff0958>
   10b1c:	8000151e 	bne	r16,zero,10b74 <__addsf3+0x318>
   10b20:	20002f26 	beq	r4,zero,10be0 <__addsf3+0x384>
   10b24:	0084303a 	nor	r2,zero,r2
   10b28:	10000a26 	beq	r2,zero,10b54 <__addsf3+0x2f8>
   10b2c:	00c03fc4 	movi	r3,255
   10b30:	30c02b26 	beq	r6,r3,10be0 <__addsf3+0x384>
   10b34:	00c006c4 	movi	r3,27
   10b38:	18806d16 	blt	r3,r2,10cf0 <__addsf3+0x494>
   10b3c:	00c00804 	movi	r3,32
   10b40:	1887c83a 	sub	r3,r3,r2
   10b44:	20c6983a 	sll	r3,r4,r3
   10b48:	2084d83a 	srl	r2,r4,r2
   10b4c:	1808c03a 	cmpne	r4,r3,zero
   10b50:	1108b03a 	or	r4,r2,r4
   10b54:	2909c83a 	sub	r4,r5,r4
   10b58:	3021883a 	mov	r16,r6
   10b5c:	3823883a 	mov	r17,r7
   10b60:	003f7e06 	br	1095c <__alt_data_end+0xffff095c>
   10b64:	903f821e 	bne	r18,zero,10970 <__alt_data_end+0xffff0970>
   10b68:	0005883a 	mov	r2,zero
   10b6c:	0021883a 	mov	r16,zero
   10b70:	003fba06 	br	10a5c <__alt_data_end+0xffff0a5c>
   10b74:	00c03fc4 	movi	r3,255
   10b78:	30c01926 	beq	r6,r3,10be0 <__addsf3+0x384>
   10b7c:	0085c83a 	sub	r2,zero,r2
   10b80:	21010034 	orhi	r4,r4,1024
   10b84:	003feb06 	br	10b34 <__alt_data_end+0xffff0b34>
   10b88:	043fffc4 	movi	r16,-1
   10b8c:	0009883a 	mov	r4,zero
   10b90:	003f5706 	br	108f0 <__alt_data_end+0xffff08f0>
   10b94:	80004a1e 	bne	r16,zero,10cc0 <__addsf3+0x464>
   10b98:	20005926 	beq	r4,zero,10d00 <__addsf3+0x4a4>
   10b9c:	283f4626 	beq	r5,zero,108b8 <__alt_data_end+0xffff08b8>
   10ba0:	2149883a 	add	r4,r4,r5
   10ba4:	2081002c 	andhi	r2,r4,1024
   10ba8:	103f8226 	beq	r2,zero,109b4 <__alt_data_end+0xffff09b4>
   10bac:	00bf0034 	movhi	r2,64512
   10bb0:	10bfffc4 	addi	r2,r2,-1
   10bb4:	3021883a 	mov	r16,r6
   10bb8:	2088703a 	and	r4,r4,r2
   10bbc:	003f3e06 	br	108b8 <__alt_data_end+0xffff08b8>
   10bc0:	8000121e 	bne	r16,zero,10c0c <__addsf3+0x3b0>
   10bc4:	2000261e 	bne	r4,zero,10c60 <__addsf3+0x404>
   10bc8:	283fa226 	beq	r5,zero,10a54 <__alt_data_end+0xffff0a54>
   10bcc:	2809883a 	mov	r4,r5
   10bd0:	3823883a 	mov	r17,r7
   10bd4:	003f3806 	br	108b8 <__alt_data_end+0xffff08b8>
   10bd8:	01400044 	movi	r5,1
   10bdc:	003f9006 	br	10a20 <__alt_data_end+0xffff0a20>
   10be0:	2809883a 	mov	r4,r5
   10be4:	3021883a 	mov	r16,r6
   10be8:	3823883a 	mov	r17,r7
   10bec:	003f3206 	br	108b8 <__alt_data_end+0xffff08b8>
   10bf0:	80000c1e 	bne	r16,zero,10c24 <__addsf3+0x3c8>
   10bf4:	20002f26 	beq	r4,zero,10cb4 <__addsf3+0x458>
   10bf8:	00c6303a 	nor	r3,zero,r3
   10bfc:	18002b1e 	bne	r3,zero,10cac <__addsf3+0x450>
   10c00:	2149883a 	add	r4,r4,r5
   10c04:	3021883a 	mov	r16,r6
   10c08:	003f8606 	br	10a24 <__alt_data_end+0xffff0a24>
   10c0c:	20001b1e 	bne	r4,zero,10c7c <__addsf3+0x420>
   10c10:	28003926 	beq	r5,zero,10cf8 <__addsf3+0x49c>
   10c14:	2809883a 	mov	r4,r5
   10c18:	3823883a 	mov	r17,r7
   10c1c:	04003fc4 	movi	r16,255
   10c20:	003f2506 	br	108b8 <__alt_data_end+0xffff08b8>
   10c24:	01c03fc4 	movi	r7,255
   10c28:	31c02226 	beq	r6,r7,10cb4 <__addsf3+0x458>
   10c2c:	00c7c83a 	sub	r3,zero,r3
   10c30:	21010034 	orhi	r4,r4,1024
   10c34:	01c006c4 	movi	r7,27
   10c38:	38c03616 	blt	r7,r3,10d14 <__addsf3+0x4b8>
   10c3c:	01c00804 	movi	r7,32
   10c40:	38cfc83a 	sub	r7,r7,r3
   10c44:	21ce983a 	sll	r7,r4,r7
   10c48:	20c6d83a 	srl	r3,r4,r3
   10c4c:	3808c03a 	cmpne	r4,r7,zero
   10c50:	1906b03a 	or	r3,r3,r4
   10c54:	1949883a 	add	r4,r3,r5
   10c58:	3021883a 	mov	r16,r6
   10c5c:	003f7106 	br	10a24 <__alt_data_end+0xffff0a24>
   10c60:	283f1526 	beq	r5,zero,108b8 <__alt_data_end+0xffff08b8>
   10c64:	2145c83a 	sub	r2,r4,r5
   10c68:	10c1002c 	andhi	r3,r2,1024
   10c6c:	183f4f26 	beq	r3,zero,109ac <__alt_data_end+0xffff09ac>
   10c70:	2909c83a 	sub	r4,r5,r4
   10c74:	3823883a 	mov	r17,r7
   10c78:	003f0f06 	br	108b8 <__alt_data_end+0xffff08b8>
   10c7c:	28001a26 	beq	r5,zero,10ce8 <__addsf3+0x48c>
   10c80:	2008d0fa 	srli	r4,r4,3
   10c84:	2080102c 	andhi	r2,r4,64
   10c88:	10000526 	beq	r2,zero,10ca0 <__addsf3+0x444>
   10c8c:	280ad0fa 	srli	r5,r5,3
   10c90:	2880102c 	andhi	r2,r5,64
   10c94:	1000021e 	bne	r2,zero,10ca0 <__addsf3+0x444>
   10c98:	2809883a 	mov	r4,r5
   10c9c:	3823883a 	mov	r17,r7
   10ca0:	200890fa 	slli	r4,r4,3
   10ca4:	04003fc4 	movi	r16,255
   10ca8:	003f0306 	br	108b8 <__alt_data_end+0xffff08b8>
   10cac:	01c03fc4 	movi	r7,255
   10cb0:	31ffe01e 	bne	r6,r7,10c34 <__alt_data_end+0xffff0c34>
   10cb4:	2809883a 	mov	r4,r5
   10cb8:	3021883a 	mov	r16,r6
   10cbc:	003efe06 	br	108b8 <__alt_data_end+0xffff08b8>
   10cc0:	20001126 	beq	r4,zero,10d08 <__addsf3+0x4ac>
   10cc4:	28000826 	beq	r5,zero,10ce8 <__addsf3+0x48c>
   10cc8:	2008d0fa 	srli	r4,r4,3
   10ccc:	2080102c 	andhi	r2,r4,64
   10cd0:	103ff326 	beq	r2,zero,10ca0 <__alt_data_end+0xffff0ca0>
   10cd4:	280ad0fa 	srli	r5,r5,3
   10cd8:	2880102c 	andhi	r2,r5,64
   10cdc:	103ff01e 	bne	r2,zero,10ca0 <__alt_data_end+0xffff0ca0>
   10ce0:	2809883a 	mov	r4,r5
   10ce4:	003fee06 	br	10ca0 <__alt_data_end+0xffff0ca0>
   10ce8:	04003fc4 	movi	r16,255
   10cec:	003ef206 	br	108b8 <__alt_data_end+0xffff08b8>
   10cf0:	01000044 	movi	r4,1
   10cf4:	003f9706 	br	10b54 <__alt_data_end+0xffff0b54>
   10cf8:	0005883a 	mov	r2,zero
   10cfc:	003f3406 	br	109d0 <__alt_data_end+0xffff09d0>
   10d00:	2809883a 	mov	r4,r5
   10d04:	003eec06 	br	108b8 <__alt_data_end+0xffff08b8>
   10d08:	2809883a 	mov	r4,r5
   10d0c:	04003fc4 	movi	r16,255
   10d10:	003ee906 	br	108b8 <__alt_data_end+0xffff08b8>
   10d14:	00c00044 	movi	r3,1
   10d18:	003fce06 	br	10c54 <__alt_data_end+0xffff0c54>
   10d1c:	0005883a 	mov	r2,zero
   10d20:	003f4e06 	br	10a5c <__alt_data_end+0xffff0a5c>

00010d24 <__divsf3>:
   10d24:	defff504 	addi	sp,sp,-44
   10d28:	200cd5fa 	srli	r6,r4,23
   10d2c:	dcc00415 	stw	r19,16(sp)
   10d30:	2026d7fa 	srli	r19,r4,31
   10d34:	00c02034 	movhi	r3,128
   10d38:	dd800715 	stw	r22,28(sp)
   10d3c:	dd000515 	stw	r20,20(sp)
   10d40:	dc800315 	stw	r18,12(sp)
   10d44:	18ffffc4 	addi	r3,r3,-1
   10d48:	dfc00a15 	stw	ra,40(sp)
   10d4c:	df000915 	stw	fp,36(sp)
   10d50:	ddc00815 	stw	r23,32(sp)
   10d54:	dd400615 	stw	r21,24(sp)
   10d58:	dc400215 	stw	r17,8(sp)
   10d5c:	dc000115 	stw	r16,4(sp)
   10d60:	35003fcc 	andi	r20,r6,255
   10d64:	1924703a 	and	r18,r3,r4
   10d68:	9d803fcc 	andi	r22,r19,255
   10d6c:	a0005226 	beq	r20,zero,10eb8 <__divsf3+0x194>
   10d70:	00803fc4 	movi	r2,255
   10d74:	a0802e26 	beq	r20,r2,10e30 <__divsf3+0x10c>
   10d78:	91002034 	orhi	r4,r18,128
   10d7c:	202490fa 	slli	r18,r4,3
   10d80:	a53fe044 	addi	r20,r20,-127
   10d84:	0021883a 	mov	r16,zero
   10d88:	002f883a 	mov	r23,zero
   10d8c:	280cd5fa 	srli	r6,r5,23
   10d90:	282ad7fa 	srli	r21,r5,31
   10d94:	00c02034 	movhi	r3,128
   10d98:	18ffffc4 	addi	r3,r3,-1
   10d9c:	31803fcc 	andi	r6,r6,255
   10da0:	1962703a 	and	r17,r3,r5
   10da4:	af003fcc 	andi	fp,r21,255
   10da8:	30004a26 	beq	r6,zero,10ed4 <__divsf3+0x1b0>
   10dac:	00803fc4 	movi	r2,255
   10db0:	30804526 	beq	r6,r2,10ec8 <__divsf3+0x1a4>
   10db4:	89402034 	orhi	r5,r17,128
   10db8:	282290fa 	slli	r17,r5,3
   10dbc:	31bfe044 	addi	r6,r6,-127
   10dc0:	000b883a 	mov	r5,zero
   10dc4:	2c20b03a 	or	r16,r5,r16
   10dc8:	802090ba 	slli	r16,r16,2
   10dcc:	00800074 	movhi	r2,1
   10dd0:	10837c04 	addi	r2,r2,3568
   10dd4:	80a1883a 	add	r16,r16,r2
   10dd8:	81000017 	ldw	r4,0(r16)
   10ddc:	9d46f03a 	xor	r3,r19,r21
   10de0:	180f883a 	mov	r7,r3
   10de4:	18803fcc 	andi	r2,r3,255
   10de8:	a18dc83a 	sub	r6,r20,r6
   10dec:	2000683a 	jmp	r4
   10df0:	00010fd4 	movui	zero,1087
   10df4:	00010e58 	cmpnei	zero,zero,1081
   10df8:	00010fc8 	cmpgei	zero,zero,1087
   10dfc:	00010e44 	movi	zero,1081
   10e00:	00010fc8 	cmpgei	zero,zero,1087
   10e04:	00010fa0 	cmpeqi	zero,zero,1086
   10e08:	00010fc8 	cmpgei	zero,zero,1087
   10e0c:	00010e44 	movi	zero,1081
   10e10:	00010e58 	cmpnei	zero,zero,1081
   10e14:	00010e58 	cmpnei	zero,zero,1081
   10e18:	00010fa0 	cmpeqi	zero,zero,1086
   10e1c:	00010e44 	movi	zero,1081
   10e20:	000110b4 	movhi	zero,1090
   10e24:	000110b4 	movhi	zero,1090
   10e28:	000110b4 	movhi	zero,1090
   10e2c:	00011068 	cmpgeui	zero,zero,1089
   10e30:	9000581e 	bne	r18,zero,10f94 <__divsf3+0x270>
   10e34:	04000204 	movi	r16,8
   10e38:	05c00084 	movi	r23,2
   10e3c:	003fd306 	br	10d8c <__alt_data_end+0xffff0d8c>
   10e40:	0023883a 	mov	r17,zero
   10e44:	e02d883a 	mov	r22,fp
   10e48:	282f883a 	mov	r23,r5
   10e4c:	00800084 	movi	r2,2
   10e50:	b8808f1e 	bne	r23,r2,11090 <__divsf3+0x36c>
   10e54:	b005883a 	mov	r2,r22
   10e58:	11c0004c 	andi	r7,r2,1
   10e5c:	013fffc4 	movi	r4,-1
   10e60:	000d883a 	mov	r6,zero
   10e64:	21003fcc 	andi	r4,r4,255
   10e68:	200895fa 	slli	r4,r4,23
   10e6c:	38803fcc 	andi	r2,r7,255
   10e70:	00c02034 	movhi	r3,128
   10e74:	100497fa 	slli	r2,r2,31
   10e78:	18ffffc4 	addi	r3,r3,-1
   10e7c:	30c6703a 	and	r3,r6,r3
   10e80:	1906b03a 	or	r3,r3,r4
   10e84:	1884b03a 	or	r2,r3,r2
   10e88:	dfc00a17 	ldw	ra,40(sp)
   10e8c:	df000917 	ldw	fp,36(sp)
   10e90:	ddc00817 	ldw	r23,32(sp)
   10e94:	dd800717 	ldw	r22,28(sp)
   10e98:	dd400617 	ldw	r21,24(sp)
   10e9c:	dd000517 	ldw	r20,20(sp)
   10ea0:	dcc00417 	ldw	r19,16(sp)
   10ea4:	dc800317 	ldw	r18,12(sp)
   10ea8:	dc400217 	ldw	r17,8(sp)
   10eac:	dc000117 	ldw	r16,4(sp)
   10eb0:	dec00b04 	addi	sp,sp,44
   10eb4:	f800283a 	ret
   10eb8:	90002b1e 	bne	r18,zero,10f68 <__divsf3+0x244>
   10ebc:	04000104 	movi	r16,4
   10ec0:	05c00044 	movi	r23,1
   10ec4:	003fb106 	br	10d8c <__alt_data_end+0xffff0d8c>
   10ec8:	8800251e 	bne	r17,zero,10f60 <__divsf3+0x23c>
   10ecc:	01400084 	movi	r5,2
   10ed0:	00000206 	br	10edc <__divsf3+0x1b8>
   10ed4:	88001a1e 	bne	r17,zero,10f40 <__divsf3+0x21c>
   10ed8:	01400044 	movi	r5,1
   10edc:	8160b03a 	or	r16,r16,r5
   10ee0:	802090ba 	slli	r16,r16,2
   10ee4:	00c00074 	movhi	r3,1
   10ee8:	18c3c004 	addi	r3,r3,3840
   10eec:	80e1883a 	add	r16,r16,r3
   10ef0:	80c00017 	ldw	r3,0(r16)
   10ef4:	9d44f03a 	xor	r2,r19,r21
   10ef8:	a18dc83a 	sub	r6,r20,r6
   10efc:	1800683a 	jmp	r3
   10f00:	00010e58 	cmpnei	zero,zero,1081
   10f04:	00010e58 	cmpnei	zero,zero,1081
   10f08:	000110a4 	muli	zero,zero,1090
   10f0c:	00010e40 	call	10e4 <__alt_mem_onchip_memory-0xef1c>
   10f10:	000110a4 	muli	zero,zero,1090
   10f14:	00010fa0 	cmpeqi	zero,zero,1086
   10f18:	000110a4 	muli	zero,zero,1090
   10f1c:	00010e40 	call	10e4 <__alt_mem_onchip_memory-0xef1c>
   10f20:	00010e58 	cmpnei	zero,zero,1081
   10f24:	00010e58 	cmpnei	zero,zero,1081
   10f28:	00010fa0 	cmpeqi	zero,zero,1086
   10f2c:	00010e40 	call	10e4 <__alt_mem_onchip_memory-0xef1c>
   10f30:	000110b4 	movhi	zero,1090
   10f34:	000110b4 	movhi	zero,1090
   10f38:	000110b4 	movhi	zero,1090
   10f3c:	000110cc 	andi	zero,zero,1091
   10f40:	8809883a 	mov	r4,r17
   10f44:	0011de80 	call	11de8 <__clzsi2>
   10f48:	10fffec4 	addi	r3,r2,-5
   10f4c:	10801d84 	addi	r2,r2,118
   10f50:	88e2983a 	sll	r17,r17,r3
   10f54:	008dc83a 	sub	r6,zero,r2
   10f58:	000b883a 	mov	r5,zero
   10f5c:	003f9906 	br	10dc4 <__alt_data_end+0xffff0dc4>
   10f60:	014000c4 	movi	r5,3
   10f64:	003f9706 	br	10dc4 <__alt_data_end+0xffff0dc4>
   10f68:	9009883a 	mov	r4,r18
   10f6c:	d9400015 	stw	r5,0(sp)
   10f70:	0011de80 	call	11de8 <__clzsi2>
   10f74:	10fffec4 	addi	r3,r2,-5
   10f78:	11801d84 	addi	r6,r2,118
   10f7c:	90e4983a 	sll	r18,r18,r3
   10f80:	01a9c83a 	sub	r20,zero,r6
   10f84:	0021883a 	mov	r16,zero
   10f88:	002f883a 	mov	r23,zero
   10f8c:	d9400017 	ldw	r5,0(sp)
   10f90:	003f7e06 	br	10d8c <__alt_data_end+0xffff0d8c>
   10f94:	04000304 	movi	r16,12
   10f98:	05c000c4 	movi	r23,3
   10f9c:	003f7b06 	br	10d8c <__alt_data_end+0xffff0d8c>
   10fa0:	01802034 	movhi	r6,128
   10fa4:	000f883a 	mov	r7,zero
   10fa8:	31bfffc4 	addi	r6,r6,-1
   10fac:	013fffc4 	movi	r4,-1
   10fb0:	003fac06 	br	10e64 <__alt_data_end+0xffff0e64>
   10fb4:	01400044 	movi	r5,1
   10fb8:	2909c83a 	sub	r4,r5,r4
   10fbc:	00c006c4 	movi	r3,27
   10fc0:	19004b0e 	bge	r3,r4,110f0 <__divsf3+0x3cc>
   10fc4:	114e703a 	and	r7,r2,r5
   10fc8:	0009883a 	mov	r4,zero
   10fcc:	000d883a 	mov	r6,zero
   10fd0:	003fa406 	br	10e64 <__alt_data_end+0xffff0e64>
   10fd4:	9006917a 	slli	r3,r18,5
   10fd8:	8822917a 	slli	r17,r17,5
   10fdc:	1c40372e 	bgeu	r3,r17,110bc <__divsf3+0x398>
   10fe0:	31bfffc4 	addi	r6,r6,-1
   10fe4:	010006c4 	movi	r4,27
   10fe8:	000b883a 	mov	r5,zero
   10fec:	180f883a 	mov	r7,r3
   10ff0:	294b883a 	add	r5,r5,r5
   10ff4:	18c7883a 	add	r3,r3,r3
   10ff8:	38000116 	blt	r7,zero,11000 <__divsf3+0x2dc>
   10ffc:	1c400236 	bltu	r3,r17,11008 <__divsf3+0x2e4>
   11000:	1c47c83a 	sub	r3,r3,r17
   11004:	29400054 	ori	r5,r5,1
   11008:	213fffc4 	addi	r4,r4,-1
   1100c:	203ff71e 	bne	r4,zero,10fec <__alt_data_end+0xffff0fec>
   11010:	1806c03a 	cmpne	r3,r3,zero
   11014:	1962b03a 	or	r17,r3,r5
   11018:	31001fc4 	addi	r4,r6,127
   1101c:	013fe50e 	bge	zero,r4,10fb4 <__alt_data_end+0xffff0fb4>
   11020:	88c001cc 	andi	r3,r17,7
   11024:	18000426 	beq	r3,zero,11038 <__divsf3+0x314>
   11028:	88c003cc 	andi	r3,r17,15
   1102c:	01400104 	movi	r5,4
   11030:	19400126 	beq	r3,r5,11038 <__divsf3+0x314>
   11034:	8963883a 	add	r17,r17,r5
   11038:	88c2002c 	andhi	r3,r17,2048
   1103c:	18000426 	beq	r3,zero,11050 <__divsf3+0x32c>
   11040:	00fe0034 	movhi	r3,63488
   11044:	18ffffc4 	addi	r3,r3,-1
   11048:	31002004 	addi	r4,r6,128
   1104c:	88e2703a 	and	r17,r17,r3
   11050:	00c03f84 	movi	r3,254
   11054:	193f8016 	blt	r3,r4,10e58 <__alt_data_end+0xffff0e58>
   11058:	880c91ba 	slli	r6,r17,6
   1105c:	11c0004c 	andi	r7,r2,1
   11060:	300cd27a 	srli	r6,r6,9
   11064:	003f7f06 	br	10e64 <__alt_data_end+0xffff0e64>
   11068:	9080102c 	andhi	r2,r18,64
   1106c:	10000226 	beq	r2,zero,11078 <__divsf3+0x354>
   11070:	8880102c 	andhi	r2,r17,64
   11074:	10001826 	beq	r2,zero,110d8 <__divsf3+0x3b4>
   11078:	00802034 	movhi	r2,128
   1107c:	91801034 	orhi	r6,r18,64
   11080:	10bfffc4 	addi	r2,r2,-1
   11084:	980f883a 	mov	r7,r19
   11088:	308c703a 	and	r6,r6,r2
   1108c:	003fc706 	br	10fac <__alt_data_end+0xffff0fac>
   11090:	008000c4 	movi	r2,3
   11094:	b8802d26 	beq	r23,r2,1114c <__divsf3+0x428>
   11098:	00c00044 	movi	r3,1
   1109c:	b005883a 	mov	r2,r22
   110a0:	b8ffdd1e 	bne	r23,r3,11018 <__alt_data_end+0xffff1018>
   110a4:	11c0004c 	andi	r7,r2,1
   110a8:	0009883a 	mov	r4,zero
   110ac:	000d883a 	mov	r6,zero
   110b0:	003f6c06 	br	10e64 <__alt_data_end+0xffff0e64>
   110b4:	9023883a 	mov	r17,r18
   110b8:	003f6406 	br	10e4c <__alt_data_end+0xffff0e4c>
   110bc:	1c47c83a 	sub	r3,r3,r17
   110c0:	01000684 	movi	r4,26
   110c4:	01400044 	movi	r5,1
   110c8:	003fc806 	br	10fec <__alt_data_end+0xffff0fec>
   110cc:	9080102c 	andhi	r2,r18,64
   110d0:	103fe926 	beq	r2,zero,11078 <__alt_data_end+0xffff1078>
   110d4:	0023883a 	mov	r17,zero
   110d8:	00802034 	movhi	r2,128
   110dc:	89801034 	orhi	r6,r17,64
   110e0:	10bfffc4 	addi	r2,r2,-1
   110e4:	a80f883a 	mov	r7,r21
   110e8:	308c703a 	and	r6,r6,r2
   110ec:	003faf06 	br	10fac <__alt_data_end+0xffff0fac>
   110f0:	01c00804 	movi	r7,32
   110f4:	390fc83a 	sub	r7,r7,r4
   110f8:	89ce983a 	sll	r7,r17,r7
   110fc:	890ad83a 	srl	r5,r17,r4
   11100:	380ec03a 	cmpne	r7,r7,zero
   11104:	29cab03a 	or	r5,r5,r7
   11108:	28c001cc 	andi	r3,r5,7
   1110c:	18000426 	beq	r3,zero,11120 <__divsf3+0x3fc>
   11110:	28c003cc 	andi	r3,r5,15
   11114:	01000104 	movi	r4,4
   11118:	19000126 	beq	r3,r4,11120 <__divsf3+0x3fc>
   1111c:	290b883a 	add	r5,r5,r4
   11120:	28c1002c 	andhi	r3,r5,1024
   11124:	18000426 	beq	r3,zero,11138 <__divsf3+0x414>
   11128:	11c0004c 	andi	r7,r2,1
   1112c:	01000044 	movi	r4,1
   11130:	000d883a 	mov	r6,zero
   11134:	003f4b06 	br	10e64 <__alt_data_end+0xffff0e64>
   11138:	280a91ba 	slli	r5,r5,6
   1113c:	11c0004c 	andi	r7,r2,1
   11140:	0009883a 	mov	r4,zero
   11144:	280cd27a 	srli	r6,r5,9
   11148:	003f4606 	br	10e64 <__alt_data_end+0xffff0e64>
   1114c:	00802034 	movhi	r2,128
   11150:	89801034 	orhi	r6,r17,64
   11154:	10bfffc4 	addi	r2,r2,-1
   11158:	b00f883a 	mov	r7,r22
   1115c:	308c703a 	and	r6,r6,r2
   11160:	003f9206 	br	10fac <__alt_data_end+0xffff0fac>

00011164 <__fixsfsi>:
   11164:	200ad5fa 	srli	r5,r4,23
   11168:	00c02034 	movhi	r3,128
   1116c:	18ffffc4 	addi	r3,r3,-1
   11170:	29403fcc 	andi	r5,r5,255
   11174:	00801f84 	movi	r2,126
   11178:	1906703a 	and	r3,r3,r4
   1117c:	2008d7fa 	srli	r4,r4,31
   11180:	11400e0e 	bge	r2,r5,111bc <__fixsfsi+0x58>
   11184:	00802744 	movi	r2,157
   11188:	11400816 	blt	r2,r5,111ac <__fixsfsi+0x48>
   1118c:	00802544 	movi	r2,149
   11190:	18c02034 	orhi	r3,r3,128
   11194:	11400b0e 	bge	r2,r5,111c4 <__fixsfsi+0x60>
   11198:	28bfda84 	addi	r2,r5,-150
   1119c:	1884983a 	sll	r2,r3,r2
   111a0:	20000726 	beq	r4,zero,111c0 <__fixsfsi+0x5c>
   111a4:	0085c83a 	sub	r2,zero,r2
   111a8:	f800283a 	ret
   111ac:	00a00034 	movhi	r2,32768
   111b0:	10bfffc4 	addi	r2,r2,-1
   111b4:	2085883a 	add	r2,r4,r2
   111b8:	f800283a 	ret
   111bc:	0005883a 	mov	r2,zero
   111c0:	f800283a 	ret
   111c4:	00802584 	movi	r2,150
   111c8:	1145c83a 	sub	r2,r2,r5
   111cc:	1884d83a 	srl	r2,r3,r2
   111d0:	003ff306 	br	111a0 <__alt_data_end+0xffff11a0>

000111d4 <__floatsisf>:
   111d4:	defffd04 	addi	sp,sp,-12
   111d8:	dfc00215 	stw	ra,8(sp)
   111dc:	dc400115 	stw	r17,4(sp)
   111e0:	dc000015 	stw	r16,0(sp)
   111e4:	20003526 	beq	r4,zero,112bc <__floatsisf+0xe8>
   111e8:	2021883a 	mov	r16,r4
   111ec:	2022d7fa 	srli	r17,r4,31
   111f0:	20003616 	blt	r4,zero,112cc <__floatsisf+0xf8>
   111f4:	8009883a 	mov	r4,r16
   111f8:	0011de80 	call	11de8 <__clzsi2>
   111fc:	00c02784 	movi	r3,158
   11200:	1887c83a 	sub	r3,r3,r2
   11204:	01002584 	movi	r4,150
   11208:	20c01416 	blt	r4,r3,1125c <__floatsisf+0x88>
   1120c:	20c9c83a 	sub	r4,r4,r3
   11210:	8120983a 	sll	r16,r16,r4
   11214:	00802034 	movhi	r2,128
   11218:	10bfffc4 	addi	r2,r2,-1
   1121c:	8809883a 	mov	r4,r17
   11220:	80a0703a 	and	r16,r16,r2
   11224:	18803fcc 	andi	r2,r3,255
   11228:	100695fa 	slli	r3,r2,23
   1122c:	20803fcc 	andi	r2,r4,255
   11230:	100897fa 	slli	r4,r2,31
   11234:	00802034 	movhi	r2,128
   11238:	10bfffc4 	addi	r2,r2,-1
   1123c:	8084703a 	and	r2,r16,r2
   11240:	10c4b03a 	or	r2,r2,r3
   11244:	1104b03a 	or	r2,r2,r4
   11248:	dfc00217 	ldw	ra,8(sp)
   1124c:	dc400117 	ldw	r17,4(sp)
   11250:	dc000017 	ldw	r16,0(sp)
   11254:	dec00304 	addi	sp,sp,12
   11258:	f800283a 	ret
   1125c:	01002644 	movi	r4,153
   11260:	20c01c16 	blt	r4,r3,112d4 <__floatsisf+0x100>
   11264:	20c9c83a 	sub	r4,r4,r3
   11268:	8120983a 	sll	r16,r16,r4
   1126c:	013f0034 	movhi	r4,64512
   11270:	213fffc4 	addi	r4,r4,-1
   11274:	814001cc 	andi	r5,r16,7
   11278:	8108703a 	and	r4,r16,r4
   1127c:	28000426 	beq	r5,zero,11290 <__floatsisf+0xbc>
   11280:	840003cc 	andi	r16,r16,15
   11284:	01400104 	movi	r5,4
   11288:	81400126 	beq	r16,r5,11290 <__floatsisf+0xbc>
   1128c:	2149883a 	add	r4,r4,r5
   11290:	2141002c 	andhi	r5,r4,1024
   11294:	28000526 	beq	r5,zero,112ac <__floatsisf+0xd8>
   11298:	00c027c4 	movi	r3,159
   1129c:	1887c83a 	sub	r3,r3,r2
   112a0:	00bf0034 	movhi	r2,64512
   112a4:	10bfffc4 	addi	r2,r2,-1
   112a8:	2088703a 	and	r4,r4,r2
   112ac:	202091ba 	slli	r16,r4,6
   112b0:	8809883a 	mov	r4,r17
   112b4:	8020d27a 	srli	r16,r16,9
   112b8:	003fda06 	br	11224 <__alt_data_end+0xffff1224>
   112bc:	0009883a 	mov	r4,zero
   112c0:	0007883a 	mov	r3,zero
   112c4:	0021883a 	mov	r16,zero
   112c8:	003fd606 	br	11224 <__alt_data_end+0xffff1224>
   112cc:	0121c83a 	sub	r16,zero,r4
   112d0:	003fc806 	br	111f4 <__alt_data_end+0xffff11f4>
   112d4:	01002e44 	movi	r4,185
   112d8:	20c9c83a 	sub	r4,r4,r3
   112dc:	01400144 	movi	r5,5
   112e0:	8108983a 	sll	r4,r16,r4
   112e4:	288bc83a 	sub	r5,r5,r2
   112e8:	8160d83a 	srl	r16,r16,r5
   112ec:	2008c03a 	cmpne	r4,r4,zero
   112f0:	8120b03a 	or	r16,r16,r4
   112f4:	003fdd06 	br	1126c <__alt_data_end+0xffff126c>

000112f8 <__muldf3>:
   112f8:	deffee04 	addi	sp,sp,-72
   112fc:	dd000c15 	stw	r20,48(sp)
   11300:	2828d53a 	srli	r20,r5,20
   11304:	ddc00f15 	stw	r23,60(sp)
   11308:	282ed7fa 	srli	r23,r5,31
   1130c:	dc000815 	stw	r16,32(sp)
   11310:	04000434 	movhi	r16,16
   11314:	dcc00b15 	stw	r19,44(sp)
   11318:	843fffc4 	addi	r16,r16,-1
   1131c:	dfc01115 	stw	ra,68(sp)
   11320:	df001015 	stw	fp,64(sp)
   11324:	dd800e15 	stw	r22,56(sp)
   11328:	dd400d15 	stw	r21,52(sp)
   1132c:	dc800a15 	stw	r18,40(sp)
   11330:	dc400915 	stw	r17,36(sp)
   11334:	a501ffcc 	andi	r20,r20,2047
   11338:	2c20703a 	and	r16,r5,r16
   1133c:	b827883a 	mov	r19,r23
   11340:	ba403fcc 	andi	r9,r23,255
   11344:	a0006026 	beq	r20,zero,114c8 <__muldf3+0x1d0>
   11348:	0081ffc4 	movi	r2,2047
   1134c:	202d883a 	mov	r22,r4
   11350:	a0803626 	beq	r20,r2,1142c <__muldf3+0x134>
   11354:	84000434 	orhi	r16,r16,16
   11358:	200ad77a 	srli	r5,r4,29
   1135c:	800490fa 	slli	r2,r16,3
   11360:	202c90fa 	slli	r22,r4,3
   11364:	a53f0044 	addi	r20,r20,-1023
   11368:	28a0b03a 	or	r16,r5,r2
   1136c:	002b883a 	mov	r21,zero
   11370:	000b883a 	mov	r5,zero
   11374:	3804d53a 	srli	r2,r7,20
   11378:	3838d7fa 	srli	fp,r7,31
   1137c:	04400434 	movhi	r17,16
   11380:	8c7fffc4 	addi	r17,r17,-1
   11384:	1081ffcc 	andi	r2,r2,2047
   11388:	3025883a 	mov	r18,r6
   1138c:	3c62703a 	and	r17,r7,r17
   11390:	e2803fcc 	andi	r10,fp,255
   11394:	10006d26 	beq	r2,zero,1154c <__muldf3+0x254>
   11398:	00c1ffc4 	movi	r3,2047
   1139c:	10c06526 	beq	r2,r3,11534 <__muldf3+0x23c>
   113a0:	8c400434 	orhi	r17,r17,16
   113a4:	300ed77a 	srli	r7,r6,29
   113a8:	880690fa 	slli	r3,r17,3
   113ac:	302490fa 	slli	r18,r6,3
   113b0:	10bf0044 	addi	r2,r2,-1023
   113b4:	38e2b03a 	or	r17,r7,r3
   113b8:	000f883a 	mov	r7,zero
   113bc:	a087883a 	add	r3,r20,r2
   113c0:	010003c4 	movi	r4,15
   113c4:	3d44b03a 	or	r2,r7,r21
   113c8:	e5ccf03a 	xor	r6,fp,r23
   113cc:	1a000044 	addi	r8,r3,1
   113d0:	20809b36 	bltu	r4,r2,11640 <__muldf3+0x348>
   113d4:	100490ba 	slli	r2,r2,2
   113d8:	01000074 	movhi	r4,1
   113dc:	2104fb04 	addi	r4,r4,5100
   113e0:	1105883a 	add	r2,r2,r4
   113e4:	10800017 	ldw	r2,0(r2)
   113e8:	1000683a 	jmp	r2
   113ec:	00011640 	call	1164 <__alt_mem_onchip_memory-0xee9c>
   113f0:	0001144c 	andi	zero,zero,1105
   113f4:	0001144c 	andi	zero,zero,1105
   113f8:	00011448 	cmpgei	zero,zero,1105
   113fc:	0001161c 	xori	zero,zero,1112
   11400:	0001161c 	xori	zero,zero,1112
   11404:	00011604 	movi	zero,1112
   11408:	00011448 	cmpgei	zero,zero,1105
   1140c:	0001161c 	xori	zero,zero,1112
   11410:	00011604 	movi	zero,1112
   11414:	0001161c 	xori	zero,zero,1112
   11418:	00011448 	cmpgei	zero,zero,1105
   1141c:	0001162c 	andhi	zero,zero,1112
   11420:	0001162c 	andhi	zero,zero,1112
   11424:	0001162c 	andhi	zero,zero,1112
   11428:	0001198c 	andi	zero,zero,1126
   1142c:	2404b03a 	or	r2,r4,r16
   11430:	1000711e 	bne	r2,zero,115f8 <__muldf3+0x300>
   11434:	05400204 	movi	r21,8
   11438:	0021883a 	mov	r16,zero
   1143c:	002d883a 	mov	r22,zero
   11440:	01400084 	movi	r5,2
   11444:	003fcb06 	br	11374 <__alt_data_end+0xffff1374>
   11448:	500d883a 	mov	r6,r10
   1144c:	00800084 	movi	r2,2
   11450:	38805926 	beq	r7,r2,115b8 <__muldf3+0x2c0>
   11454:	008000c4 	movi	r2,3
   11458:	3881bb26 	beq	r7,r2,11b48 <__muldf3+0x850>
   1145c:	00800044 	movi	r2,1
   11460:	3881961e 	bne	r7,r2,11abc <__muldf3+0x7c4>
   11464:	3027883a 	mov	r19,r6
   11468:	0005883a 	mov	r2,zero
   1146c:	0021883a 	mov	r16,zero
   11470:	002d883a 	mov	r22,zero
   11474:	1004953a 	slli	r2,r2,20
   11478:	98c03fcc 	andi	r3,r19,255
   1147c:	04400434 	movhi	r17,16
   11480:	8c7fffc4 	addi	r17,r17,-1
   11484:	180697fa 	slli	r3,r3,31
   11488:	8460703a 	and	r16,r16,r17
   1148c:	80a0b03a 	or	r16,r16,r2
   11490:	80c6b03a 	or	r3,r16,r3
   11494:	b005883a 	mov	r2,r22
   11498:	dfc01117 	ldw	ra,68(sp)
   1149c:	df001017 	ldw	fp,64(sp)
   114a0:	ddc00f17 	ldw	r23,60(sp)
   114a4:	dd800e17 	ldw	r22,56(sp)
   114a8:	dd400d17 	ldw	r21,52(sp)
   114ac:	dd000c17 	ldw	r20,48(sp)
   114b0:	dcc00b17 	ldw	r19,44(sp)
   114b4:	dc800a17 	ldw	r18,40(sp)
   114b8:	dc400917 	ldw	r17,36(sp)
   114bc:	dc000817 	ldw	r16,32(sp)
   114c0:	dec01204 	addi	sp,sp,72
   114c4:	f800283a 	ret
   114c8:	2404b03a 	or	r2,r4,r16
   114cc:	202b883a 	mov	r21,r4
   114d0:	10004426 	beq	r2,zero,115e4 <__muldf3+0x2ec>
   114d4:	80015126 	beq	r16,zero,11a1c <__muldf3+0x724>
   114d8:	8009883a 	mov	r4,r16
   114dc:	d9800715 	stw	r6,28(sp)
   114e0:	d9c00215 	stw	r7,8(sp)
   114e4:	da400415 	stw	r9,16(sp)
   114e8:	0011de80 	call	11de8 <__clzsi2>
   114ec:	d9800717 	ldw	r6,28(sp)
   114f0:	d9c00217 	ldw	r7,8(sp)
   114f4:	da400417 	ldw	r9,16(sp)
   114f8:	113ffd44 	addi	r4,r2,-11
   114fc:	00c00704 	movi	r3,28
   11500:	19014216 	blt	r3,r4,11a0c <__muldf3+0x714>
   11504:	00c00744 	movi	r3,29
   11508:	15bffe04 	addi	r22,r2,-8
   1150c:	1907c83a 	sub	r3,r3,r4
   11510:	85a0983a 	sll	r16,r16,r22
   11514:	a8c6d83a 	srl	r3,r21,r3
   11518:	adac983a 	sll	r22,r21,r22
   1151c:	1c20b03a 	or	r16,r3,r16
   11520:	1080fcc4 	addi	r2,r2,1011
   11524:	00a9c83a 	sub	r20,zero,r2
   11528:	002b883a 	mov	r21,zero
   1152c:	000b883a 	mov	r5,zero
   11530:	003f9006 	br	11374 <__alt_data_end+0xffff1374>
   11534:	3446b03a 	or	r3,r6,r17
   11538:	1800281e 	bne	r3,zero,115dc <__muldf3+0x2e4>
   1153c:	0023883a 	mov	r17,zero
   11540:	0025883a 	mov	r18,zero
   11544:	01c00084 	movi	r7,2
   11548:	003f9c06 	br	113bc <__alt_data_end+0xffff13bc>
   1154c:	3446b03a 	or	r3,r6,r17
   11550:	18001e26 	beq	r3,zero,115cc <__muldf3+0x2d4>
   11554:	88012126 	beq	r17,zero,119dc <__muldf3+0x6e4>
   11558:	8809883a 	mov	r4,r17
   1155c:	d9400215 	stw	r5,8(sp)
   11560:	d9800715 	stw	r6,28(sp)
   11564:	da400415 	stw	r9,16(sp)
   11568:	da800315 	stw	r10,12(sp)
   1156c:	0011de80 	call	11de8 <__clzsi2>
   11570:	d9400217 	ldw	r5,8(sp)
   11574:	d9800717 	ldw	r6,28(sp)
   11578:	da400417 	ldw	r9,16(sp)
   1157c:	da800317 	ldw	r10,12(sp)
   11580:	113ffd44 	addi	r4,r2,-11
   11584:	00c00704 	movi	r3,28
   11588:	19011016 	blt	r3,r4,119cc <__muldf3+0x6d4>
   1158c:	00c00744 	movi	r3,29
   11590:	14bffe04 	addi	r18,r2,-8
   11594:	1907c83a 	sub	r3,r3,r4
   11598:	8ca2983a 	sll	r17,r17,r18
   1159c:	30c6d83a 	srl	r3,r6,r3
   115a0:	34a4983a 	sll	r18,r6,r18
   115a4:	1c62b03a 	or	r17,r3,r17
   115a8:	1080fcc4 	addi	r2,r2,1011
   115ac:	0085c83a 	sub	r2,zero,r2
   115b0:	000f883a 	mov	r7,zero
   115b4:	003f8106 	br	113bc <__alt_data_end+0xffff13bc>
   115b8:	3027883a 	mov	r19,r6
   115bc:	0081ffc4 	movi	r2,2047
   115c0:	0021883a 	mov	r16,zero
   115c4:	002d883a 	mov	r22,zero
   115c8:	003faa06 	br	11474 <__alt_data_end+0xffff1474>
   115cc:	0023883a 	mov	r17,zero
   115d0:	0025883a 	mov	r18,zero
   115d4:	01c00044 	movi	r7,1
   115d8:	003f7806 	br	113bc <__alt_data_end+0xffff13bc>
   115dc:	01c000c4 	movi	r7,3
   115e0:	003f7606 	br	113bc <__alt_data_end+0xffff13bc>
   115e4:	05400104 	movi	r21,4
   115e8:	0021883a 	mov	r16,zero
   115ec:	002d883a 	mov	r22,zero
   115f0:	01400044 	movi	r5,1
   115f4:	003f5f06 	br	11374 <__alt_data_end+0xffff1374>
   115f8:	05400304 	movi	r21,12
   115fc:	014000c4 	movi	r5,3
   11600:	003f5c06 	br	11374 <__alt_data_end+0xffff1374>
   11604:	04000434 	movhi	r16,16
   11608:	0027883a 	mov	r19,zero
   1160c:	843fffc4 	addi	r16,r16,-1
   11610:	05bfffc4 	movi	r22,-1
   11614:	0081ffc4 	movi	r2,2047
   11618:	003f9606 	br	11474 <__alt_data_end+0xffff1474>
   1161c:	8023883a 	mov	r17,r16
   11620:	b025883a 	mov	r18,r22
   11624:	280f883a 	mov	r7,r5
   11628:	003f8806 	br	1144c <__alt_data_end+0xffff144c>
   1162c:	8023883a 	mov	r17,r16
   11630:	b025883a 	mov	r18,r22
   11634:	480d883a 	mov	r6,r9
   11638:	280f883a 	mov	r7,r5
   1163c:	003f8306 	br	1144c <__alt_data_end+0xffff144c>
   11640:	b026d43a 	srli	r19,r22,16
   11644:	902ed43a 	srli	r23,r18,16
   11648:	b5bfffcc 	andi	r22,r22,65535
   1164c:	94bfffcc 	andi	r18,r18,65535
   11650:	b00b883a 	mov	r5,r22
   11654:	9009883a 	mov	r4,r18
   11658:	d8c00515 	stw	r3,20(sp)
   1165c:	d9800715 	stw	r6,28(sp)
   11660:	da000615 	stw	r8,24(sp)
   11664:	00108340 	call	10834 <__mulsi3>
   11668:	980b883a 	mov	r5,r19
   1166c:	9009883a 	mov	r4,r18
   11670:	1029883a 	mov	r20,r2
   11674:	00108340 	call	10834 <__mulsi3>
   11678:	b80b883a 	mov	r5,r23
   1167c:	9809883a 	mov	r4,r19
   11680:	102b883a 	mov	r21,r2
   11684:	00108340 	call	10834 <__mulsi3>
   11688:	b809883a 	mov	r4,r23
   1168c:	b00b883a 	mov	r5,r22
   11690:	1039883a 	mov	fp,r2
   11694:	00108340 	call	10834 <__mulsi3>
   11698:	a008d43a 	srli	r4,r20,16
   1169c:	1545883a 	add	r2,r2,r21
   116a0:	d8c00517 	ldw	r3,20(sp)
   116a4:	2085883a 	add	r2,r4,r2
   116a8:	d9800717 	ldw	r6,28(sp)
   116ac:	da000617 	ldw	r8,24(sp)
   116b0:	1540022e 	bgeu	r2,r21,116bc <__muldf3+0x3c4>
   116b4:	01000074 	movhi	r4,1
   116b8:	e139883a 	add	fp,fp,r4
   116bc:	100e943a 	slli	r7,r2,16
   116c0:	1004d43a 	srli	r2,r2,16
   116c4:	882ad43a 	srli	r21,r17,16
   116c8:	a53fffcc 	andi	r20,r20,65535
   116cc:	8c7fffcc 	andi	r17,r17,65535
   116d0:	3d29883a 	add	r20,r7,r20
   116d4:	b00b883a 	mov	r5,r22
   116d8:	8809883a 	mov	r4,r17
   116dc:	d8c00515 	stw	r3,20(sp)
   116e0:	d9800715 	stw	r6,28(sp)
   116e4:	da000615 	stw	r8,24(sp)
   116e8:	dd000115 	stw	r20,4(sp)
   116ec:	d8800015 	stw	r2,0(sp)
   116f0:	00108340 	call	10834 <__mulsi3>
   116f4:	980b883a 	mov	r5,r19
   116f8:	8809883a 	mov	r4,r17
   116fc:	d8800215 	stw	r2,8(sp)
   11700:	00108340 	call	10834 <__mulsi3>
   11704:	9809883a 	mov	r4,r19
   11708:	a80b883a 	mov	r5,r21
   1170c:	1029883a 	mov	r20,r2
   11710:	00108340 	call	10834 <__mulsi3>
   11714:	b00b883a 	mov	r5,r22
   11718:	a809883a 	mov	r4,r21
   1171c:	d8800415 	stw	r2,16(sp)
   11720:	00108340 	call	10834 <__mulsi3>
   11724:	d9c00217 	ldw	r7,8(sp)
   11728:	1505883a 	add	r2,r2,r20
   1172c:	d8c00517 	ldw	r3,20(sp)
   11730:	3826d43a 	srli	r19,r7,16
   11734:	d9800717 	ldw	r6,28(sp)
   11738:	da000617 	ldw	r8,24(sp)
   1173c:	9885883a 	add	r2,r19,r2
   11740:	da400417 	ldw	r9,16(sp)
   11744:	1500022e 	bgeu	r2,r20,11750 <__muldf3+0x458>
   11748:	01000074 	movhi	r4,1
   1174c:	4913883a 	add	r9,r9,r4
   11750:	1028d43a 	srli	r20,r2,16
   11754:	1004943a 	slli	r2,r2,16
   11758:	802cd43a 	srli	r22,r16,16
   1175c:	843fffcc 	andi	r16,r16,65535
   11760:	3cffffcc 	andi	r19,r7,65535
   11764:	9009883a 	mov	r4,r18
   11768:	800b883a 	mov	r5,r16
   1176c:	a269883a 	add	r20,r20,r9
   11770:	d8c00515 	stw	r3,20(sp)
   11774:	d9800715 	stw	r6,28(sp)
   11778:	da000615 	stw	r8,24(sp)
   1177c:	14e7883a 	add	r19,r2,r19
   11780:	00108340 	call	10834 <__mulsi3>
   11784:	9009883a 	mov	r4,r18
   11788:	b00b883a 	mov	r5,r22
   1178c:	d8800315 	stw	r2,12(sp)
   11790:	00108340 	call	10834 <__mulsi3>
   11794:	b809883a 	mov	r4,r23
   11798:	b00b883a 	mov	r5,r22
   1179c:	d8800215 	stw	r2,8(sp)
   117a0:	00108340 	call	10834 <__mulsi3>
   117a4:	b80b883a 	mov	r5,r23
   117a8:	8009883a 	mov	r4,r16
   117ac:	d8800415 	stw	r2,16(sp)
   117b0:	00108340 	call	10834 <__mulsi3>
   117b4:	da800317 	ldw	r10,12(sp)
   117b8:	d9c00217 	ldw	r7,8(sp)
   117bc:	d9000017 	ldw	r4,0(sp)
   117c0:	502ed43a 	srli	r23,r10,16
   117c4:	11c5883a 	add	r2,r2,r7
   117c8:	24e5883a 	add	r18,r4,r19
   117cc:	b885883a 	add	r2,r23,r2
   117d0:	d8c00517 	ldw	r3,20(sp)
   117d4:	d9800717 	ldw	r6,28(sp)
   117d8:	da000617 	ldw	r8,24(sp)
   117dc:	da400417 	ldw	r9,16(sp)
   117e0:	11c0022e 	bgeu	r2,r7,117ec <__muldf3+0x4f4>
   117e4:	01000074 	movhi	r4,1
   117e8:	4913883a 	add	r9,r9,r4
   117ec:	100ed43a 	srli	r7,r2,16
   117f0:	1004943a 	slli	r2,r2,16
   117f4:	55ffffcc 	andi	r23,r10,65535
   117f8:	3a53883a 	add	r9,r7,r9
   117fc:	8809883a 	mov	r4,r17
   11800:	800b883a 	mov	r5,r16
   11804:	d8c00515 	stw	r3,20(sp)
   11808:	d9800715 	stw	r6,28(sp)
   1180c:	da000615 	stw	r8,24(sp)
   11810:	da400415 	stw	r9,16(sp)
   11814:	15ef883a 	add	r23,r2,r23
   11818:	00108340 	call	10834 <__mulsi3>
   1181c:	8809883a 	mov	r4,r17
   11820:	b00b883a 	mov	r5,r22
   11824:	d8800215 	stw	r2,8(sp)
   11828:	00108340 	call	10834 <__mulsi3>
   1182c:	b00b883a 	mov	r5,r22
   11830:	a809883a 	mov	r4,r21
   11834:	d8800315 	stw	r2,12(sp)
   11838:	00108340 	call	10834 <__mulsi3>
   1183c:	8009883a 	mov	r4,r16
   11840:	a80b883a 	mov	r5,r21
   11844:	1023883a 	mov	r17,r2
   11848:	00108340 	call	10834 <__mulsi3>
   1184c:	d9c00217 	ldw	r7,8(sp)
   11850:	da800317 	ldw	r10,12(sp)
   11854:	d8c00517 	ldw	r3,20(sp)
   11858:	3808d43a 	srli	r4,r7,16
   1185c:	1285883a 	add	r2,r2,r10
   11860:	d9800717 	ldw	r6,28(sp)
   11864:	2085883a 	add	r2,r4,r2
   11868:	da000617 	ldw	r8,24(sp)
   1186c:	da400417 	ldw	r9,16(sp)
   11870:	1280022e 	bgeu	r2,r10,1187c <__muldf3+0x584>
   11874:	01000074 	movhi	r4,1
   11878:	8923883a 	add	r17,r17,r4
   1187c:	1008943a 	slli	r4,r2,16
   11880:	39ffffcc 	andi	r7,r7,65535
   11884:	e4b9883a 	add	fp,fp,r18
   11888:	21cf883a 	add	r7,r4,r7
   1188c:	e4e7803a 	cmpltu	r19,fp,r19
   11890:	3d0f883a 	add	r7,r7,r20
   11894:	bf39883a 	add	fp,r23,fp
   11898:	99c9883a 	add	r4,r19,r7
   1189c:	e5ef803a 	cmpltu	r23,fp,r23
   118a0:	490b883a 	add	r5,r9,r4
   118a4:	1004d43a 	srli	r2,r2,16
   118a8:	b965883a 	add	r18,r23,r5
   118ac:	24c9803a 	cmpltu	r4,r4,r19
   118b0:	3d29803a 	cmpltu	r20,r7,r20
   118b4:	a128b03a 	or	r20,r20,r4
   118b8:	95ef803a 	cmpltu	r23,r18,r23
   118bc:	2a53803a 	cmpltu	r9,r5,r9
   118c0:	a0a9883a 	add	r20,r20,r2
   118c4:	4deeb03a 	or	r23,r9,r23
   118c8:	a5ef883a 	add	r23,r20,r23
   118cc:	bc63883a 	add	r17,r23,r17
   118d0:	e004927a 	slli	r2,fp,9
   118d4:	d9000117 	ldw	r4,4(sp)
   118d8:	882e927a 	slli	r23,r17,9
   118dc:	9022d5fa 	srli	r17,r18,23
   118e0:	e038d5fa 	srli	fp,fp,23
   118e4:	1104b03a 	or	r2,r2,r4
   118e8:	9024927a 	slli	r18,r18,9
   118ec:	1004c03a 	cmpne	r2,r2,zero
   118f0:	bc62b03a 	or	r17,r23,r17
   118f4:	1738b03a 	or	fp,r2,fp
   118f8:	8880402c 	andhi	r2,r17,256
   118fc:	e4a4b03a 	or	r18,fp,r18
   11900:	10000726 	beq	r2,zero,11920 <__muldf3+0x628>
   11904:	9006d07a 	srli	r3,r18,1
   11908:	880497fa 	slli	r2,r17,31
   1190c:	9480004c 	andi	r18,r18,1
   11910:	8822d07a 	srli	r17,r17,1
   11914:	1ca4b03a 	or	r18,r3,r18
   11918:	14a4b03a 	or	r18,r2,r18
   1191c:	4007883a 	mov	r3,r8
   11920:	1880ffc4 	addi	r2,r3,1023
   11924:	0080460e 	bge	zero,r2,11a40 <__muldf3+0x748>
   11928:	910001cc 	andi	r4,r18,7
   1192c:	20000726 	beq	r4,zero,1194c <__muldf3+0x654>
   11930:	910003cc 	andi	r4,r18,15
   11934:	01400104 	movi	r5,4
   11938:	21400426 	beq	r4,r5,1194c <__muldf3+0x654>
   1193c:	9149883a 	add	r4,r18,r5
   11940:	24a5803a 	cmpltu	r18,r4,r18
   11944:	8ca3883a 	add	r17,r17,r18
   11948:	2025883a 	mov	r18,r4
   1194c:	8900402c 	andhi	r4,r17,256
   11950:	20000426 	beq	r4,zero,11964 <__muldf3+0x66c>
   11954:	18810004 	addi	r2,r3,1024
   11958:	00ffc034 	movhi	r3,65280
   1195c:	18ffffc4 	addi	r3,r3,-1
   11960:	88e2703a 	and	r17,r17,r3
   11964:	00c1ff84 	movi	r3,2046
   11968:	18bf1316 	blt	r3,r2,115b8 <__alt_data_end+0xffff15b8>
   1196c:	882c977a 	slli	r22,r17,29
   11970:	9024d0fa 	srli	r18,r18,3
   11974:	8822927a 	slli	r17,r17,9
   11978:	1081ffcc 	andi	r2,r2,2047
   1197c:	b4acb03a 	or	r22,r22,r18
   11980:	8820d33a 	srli	r16,r17,12
   11984:	3027883a 	mov	r19,r6
   11988:	003eba06 	br	11474 <__alt_data_end+0xffff1474>
   1198c:	8080022c 	andhi	r2,r16,8
   11990:	10000926 	beq	r2,zero,119b8 <__muldf3+0x6c0>
   11994:	8880022c 	andhi	r2,r17,8
   11998:	1000071e 	bne	r2,zero,119b8 <__muldf3+0x6c0>
   1199c:	00800434 	movhi	r2,16
   119a0:	8c000234 	orhi	r16,r17,8
   119a4:	10bfffc4 	addi	r2,r2,-1
   119a8:	e027883a 	mov	r19,fp
   119ac:	80a0703a 	and	r16,r16,r2
   119b0:	902d883a 	mov	r22,r18
   119b4:	003f1706 	br	11614 <__alt_data_end+0xffff1614>
   119b8:	00800434 	movhi	r2,16
   119bc:	84000234 	orhi	r16,r16,8
   119c0:	10bfffc4 	addi	r2,r2,-1
   119c4:	80a0703a 	and	r16,r16,r2
   119c8:	003f1206 	br	11614 <__alt_data_end+0xffff1614>
   119cc:	147ff604 	addi	r17,r2,-40
   119d0:	3462983a 	sll	r17,r6,r17
   119d4:	0025883a 	mov	r18,zero
   119d8:	003ef306 	br	115a8 <__alt_data_end+0xffff15a8>
   119dc:	3009883a 	mov	r4,r6
   119e0:	d9400215 	stw	r5,8(sp)
   119e4:	d9800715 	stw	r6,28(sp)
   119e8:	da400415 	stw	r9,16(sp)
   119ec:	da800315 	stw	r10,12(sp)
   119f0:	0011de80 	call	11de8 <__clzsi2>
   119f4:	10800804 	addi	r2,r2,32
   119f8:	da800317 	ldw	r10,12(sp)
   119fc:	da400417 	ldw	r9,16(sp)
   11a00:	d9800717 	ldw	r6,28(sp)
   11a04:	d9400217 	ldw	r5,8(sp)
   11a08:	003edd06 	br	11580 <__alt_data_end+0xffff1580>
   11a0c:	143ff604 	addi	r16,r2,-40
   11a10:	ac20983a 	sll	r16,r21,r16
   11a14:	002d883a 	mov	r22,zero
   11a18:	003ec106 	br	11520 <__alt_data_end+0xffff1520>
   11a1c:	d9800715 	stw	r6,28(sp)
   11a20:	d9c00215 	stw	r7,8(sp)
   11a24:	da400415 	stw	r9,16(sp)
   11a28:	0011de80 	call	11de8 <__clzsi2>
   11a2c:	10800804 	addi	r2,r2,32
   11a30:	da400417 	ldw	r9,16(sp)
   11a34:	d9c00217 	ldw	r7,8(sp)
   11a38:	d9800717 	ldw	r6,28(sp)
   11a3c:	003eae06 	br	114f8 <__alt_data_end+0xffff14f8>
   11a40:	00c00044 	movi	r3,1
   11a44:	1887c83a 	sub	r3,r3,r2
   11a48:	01000e04 	movi	r4,56
   11a4c:	20fe8516 	blt	r4,r3,11464 <__alt_data_end+0xffff1464>
   11a50:	010007c4 	movi	r4,31
   11a54:	20c01b16 	blt	r4,r3,11ac4 <__muldf3+0x7cc>
   11a58:	00800804 	movi	r2,32
   11a5c:	10c5c83a 	sub	r2,r2,r3
   11a60:	888a983a 	sll	r5,r17,r2
   11a64:	90c8d83a 	srl	r4,r18,r3
   11a68:	9084983a 	sll	r2,r18,r2
   11a6c:	88e2d83a 	srl	r17,r17,r3
   11a70:	2906b03a 	or	r3,r5,r4
   11a74:	1004c03a 	cmpne	r2,r2,zero
   11a78:	1886b03a 	or	r3,r3,r2
   11a7c:	188001cc 	andi	r2,r3,7
   11a80:	10000726 	beq	r2,zero,11aa0 <__muldf3+0x7a8>
   11a84:	188003cc 	andi	r2,r3,15
   11a88:	01000104 	movi	r4,4
   11a8c:	11000426 	beq	r2,r4,11aa0 <__muldf3+0x7a8>
   11a90:	1805883a 	mov	r2,r3
   11a94:	10c00104 	addi	r3,r2,4
   11a98:	1885803a 	cmpltu	r2,r3,r2
   11a9c:	88a3883a 	add	r17,r17,r2
   11aa0:	8880202c 	andhi	r2,r17,128
   11aa4:	10001c26 	beq	r2,zero,11b18 <__muldf3+0x820>
   11aa8:	3027883a 	mov	r19,r6
   11aac:	00800044 	movi	r2,1
   11ab0:	0021883a 	mov	r16,zero
   11ab4:	002d883a 	mov	r22,zero
   11ab8:	003e6e06 	br	11474 <__alt_data_end+0xffff1474>
   11abc:	4007883a 	mov	r3,r8
   11ac0:	003f9706 	br	11920 <__alt_data_end+0xffff1920>
   11ac4:	017ff844 	movi	r5,-31
   11ac8:	2885c83a 	sub	r2,r5,r2
   11acc:	888ad83a 	srl	r5,r17,r2
   11ad0:	00800804 	movi	r2,32
   11ad4:	18801a26 	beq	r3,r2,11b40 <__muldf3+0x848>
   11ad8:	01001004 	movi	r4,64
   11adc:	20c7c83a 	sub	r3,r4,r3
   11ae0:	88e2983a 	sll	r17,r17,r3
   11ae4:	8ca4b03a 	or	r18,r17,r18
   11ae8:	9004c03a 	cmpne	r2,r18,zero
   11aec:	2884b03a 	or	r2,r5,r2
   11af0:	144001cc 	andi	r17,r2,7
   11af4:	88000d1e 	bne	r17,zero,11b2c <__muldf3+0x834>
   11af8:	0021883a 	mov	r16,zero
   11afc:	102cd0fa 	srli	r22,r2,3
   11b00:	3027883a 	mov	r19,r6
   11b04:	0005883a 	mov	r2,zero
   11b08:	b46cb03a 	or	r22,r22,r17
   11b0c:	003e5906 	br	11474 <__alt_data_end+0xffff1474>
   11b10:	1007883a 	mov	r3,r2
   11b14:	0023883a 	mov	r17,zero
   11b18:	8820927a 	slli	r16,r17,9
   11b1c:	1805883a 	mov	r2,r3
   11b20:	8822977a 	slli	r17,r17,29
   11b24:	8020d33a 	srli	r16,r16,12
   11b28:	003ff406 	br	11afc <__alt_data_end+0xffff1afc>
   11b2c:	10c003cc 	andi	r3,r2,15
   11b30:	01000104 	movi	r4,4
   11b34:	193ff626 	beq	r3,r4,11b10 <__alt_data_end+0xffff1b10>
   11b38:	0023883a 	mov	r17,zero
   11b3c:	003fd506 	br	11a94 <__alt_data_end+0xffff1a94>
   11b40:	0023883a 	mov	r17,zero
   11b44:	003fe706 	br	11ae4 <__alt_data_end+0xffff1ae4>
   11b48:	00800434 	movhi	r2,16
   11b4c:	8c000234 	orhi	r16,r17,8
   11b50:	10bfffc4 	addi	r2,r2,-1
   11b54:	3027883a 	mov	r19,r6
   11b58:	80a0703a 	and	r16,r16,r2
   11b5c:	902d883a 	mov	r22,r18
   11b60:	003eac06 	br	11614 <__alt_data_end+0xffff1614>

00011b64 <__floatsidf>:
   11b64:	defffd04 	addi	sp,sp,-12
   11b68:	dfc00215 	stw	ra,8(sp)
   11b6c:	dc400115 	stw	r17,4(sp)
   11b70:	dc000015 	stw	r16,0(sp)
   11b74:	20002b26 	beq	r4,zero,11c24 <__floatsidf+0xc0>
   11b78:	2023883a 	mov	r17,r4
   11b7c:	2020d7fa 	srli	r16,r4,31
   11b80:	20002d16 	blt	r4,zero,11c38 <__floatsidf+0xd4>
   11b84:	8809883a 	mov	r4,r17
   11b88:	0011de80 	call	11de8 <__clzsi2>
   11b8c:	01410784 	movi	r5,1054
   11b90:	288bc83a 	sub	r5,r5,r2
   11b94:	01010cc4 	movi	r4,1075
   11b98:	2149c83a 	sub	r4,r4,r5
   11b9c:	00c007c4 	movi	r3,31
   11ba0:	1900160e 	bge	r3,r4,11bfc <__floatsidf+0x98>
   11ba4:	00c104c4 	movi	r3,1043
   11ba8:	1947c83a 	sub	r3,r3,r5
   11bac:	88c6983a 	sll	r3,r17,r3
   11bb0:	00800434 	movhi	r2,16
   11bb4:	10bfffc4 	addi	r2,r2,-1
   11bb8:	1886703a 	and	r3,r3,r2
   11bbc:	2941ffcc 	andi	r5,r5,2047
   11bc0:	800d883a 	mov	r6,r16
   11bc4:	0005883a 	mov	r2,zero
   11bc8:	280a953a 	slli	r5,r5,20
   11bcc:	31803fcc 	andi	r6,r6,255
   11bd0:	01000434 	movhi	r4,16
   11bd4:	300c97fa 	slli	r6,r6,31
   11bd8:	213fffc4 	addi	r4,r4,-1
   11bdc:	1906703a 	and	r3,r3,r4
   11be0:	1946b03a 	or	r3,r3,r5
   11be4:	1986b03a 	or	r3,r3,r6
   11be8:	dfc00217 	ldw	ra,8(sp)
   11bec:	dc400117 	ldw	r17,4(sp)
   11bf0:	dc000017 	ldw	r16,0(sp)
   11bf4:	dec00304 	addi	sp,sp,12
   11bf8:	f800283a 	ret
   11bfc:	00c002c4 	movi	r3,11
   11c00:	1887c83a 	sub	r3,r3,r2
   11c04:	88c6d83a 	srl	r3,r17,r3
   11c08:	8904983a 	sll	r2,r17,r4
   11c0c:	01000434 	movhi	r4,16
   11c10:	213fffc4 	addi	r4,r4,-1
   11c14:	2941ffcc 	andi	r5,r5,2047
   11c18:	1906703a 	and	r3,r3,r4
   11c1c:	800d883a 	mov	r6,r16
   11c20:	003fe906 	br	11bc8 <__alt_data_end+0xffff1bc8>
   11c24:	000d883a 	mov	r6,zero
   11c28:	000b883a 	mov	r5,zero
   11c2c:	0007883a 	mov	r3,zero
   11c30:	0005883a 	mov	r2,zero
   11c34:	003fe406 	br	11bc8 <__alt_data_end+0xffff1bc8>
   11c38:	0123c83a 	sub	r17,zero,r4
   11c3c:	003fd106 	br	11b84 <__alt_data_end+0xffff1b84>

00011c40 <__truncdfsf2>:
   11c40:	2810d53a 	srli	r8,r5,20
   11c44:	01c00434 	movhi	r7,16
   11c48:	39ffffc4 	addi	r7,r7,-1
   11c4c:	29ce703a 	and	r7,r5,r7
   11c50:	4201ffcc 	andi	r8,r8,2047
   11c54:	380e90fa 	slli	r7,r7,3
   11c58:	200cd77a 	srli	r6,r4,29
   11c5c:	42400044 	addi	r9,r8,1
   11c60:	4a41ffcc 	andi	r9,r9,2047
   11c64:	00c00044 	movi	r3,1
   11c68:	280ad7fa 	srli	r5,r5,31
   11c6c:	31ceb03a 	or	r7,r6,r7
   11c70:	200490fa 	slli	r2,r4,3
   11c74:	1a40230e 	bge	r3,r9,11d04 <__truncdfsf2+0xc4>
   11c78:	40ff2004 	addi	r3,r8,-896
   11c7c:	01803f84 	movi	r6,254
   11c80:	30c01516 	blt	r6,r3,11cd8 <__truncdfsf2+0x98>
   11c84:	00c0380e 	bge	zero,r3,11d68 <__truncdfsf2+0x128>
   11c88:	200c91ba 	slli	r6,r4,6
   11c8c:	380e90fa 	slli	r7,r7,3
   11c90:	1004d77a 	srli	r2,r2,29
   11c94:	300cc03a 	cmpne	r6,r6,zero
   11c98:	31ccb03a 	or	r6,r6,r7
   11c9c:	308cb03a 	or	r6,r6,r2
   11ca0:	308001cc 	andi	r2,r6,7
   11ca4:	10000426 	beq	r2,zero,11cb8 <__truncdfsf2+0x78>
   11ca8:	308003cc 	andi	r2,r6,15
   11cac:	01000104 	movi	r4,4
   11cb0:	11000126 	beq	r2,r4,11cb8 <__truncdfsf2+0x78>
   11cb4:	31800104 	addi	r6,r6,4
   11cb8:	3081002c 	andhi	r2,r6,1024
   11cbc:	10001626 	beq	r2,zero,11d18 <__truncdfsf2+0xd8>
   11cc0:	18c00044 	addi	r3,r3,1
   11cc4:	00803fc4 	movi	r2,255
   11cc8:	18800326 	beq	r3,r2,11cd8 <__truncdfsf2+0x98>
   11ccc:	300c91ba 	slli	r6,r6,6
   11cd0:	300cd27a 	srli	r6,r6,9
   11cd4:	00000206 	br	11ce0 <__truncdfsf2+0xa0>
   11cd8:	00ffffc4 	movi	r3,-1
   11cdc:	000d883a 	mov	r6,zero
   11ce0:	18c03fcc 	andi	r3,r3,255
   11ce4:	180895fa 	slli	r4,r3,23
   11ce8:	00c02034 	movhi	r3,128
   11cec:	280a97fa 	slli	r5,r5,31
   11cf0:	18ffffc4 	addi	r3,r3,-1
   11cf4:	30c6703a 	and	r3,r6,r3
   11cf8:	1906b03a 	or	r3,r3,r4
   11cfc:	1944b03a 	or	r2,r3,r5
   11d00:	f800283a 	ret
   11d04:	40000b1e 	bne	r8,zero,11d34 <__truncdfsf2+0xf4>
   11d08:	388cb03a 	or	r6,r7,r2
   11d0c:	0007883a 	mov	r3,zero
   11d10:	30000426 	beq	r6,zero,11d24 <__truncdfsf2+0xe4>
   11d14:	01800144 	movi	r6,5
   11d18:	00803fc4 	movi	r2,255
   11d1c:	300cd0fa 	srli	r6,r6,3
   11d20:	18800a26 	beq	r3,r2,11d4c <__truncdfsf2+0x10c>
   11d24:	00802034 	movhi	r2,128
   11d28:	10bfffc4 	addi	r2,r2,-1
   11d2c:	308c703a 	and	r6,r6,r2
   11d30:	003feb06 	br	11ce0 <__alt_data_end+0xffff1ce0>
   11d34:	3888b03a 	or	r4,r7,r2
   11d38:	203fe726 	beq	r4,zero,11cd8 <__alt_data_end+0xffff1cd8>
   11d3c:	380c90fa 	slli	r6,r7,3
   11d40:	00c03fc4 	movi	r3,255
   11d44:	31808034 	orhi	r6,r6,512
   11d48:	003fd506 	br	11ca0 <__alt_data_end+0xffff1ca0>
   11d4c:	303fe226 	beq	r6,zero,11cd8 <__alt_data_end+0xffff1cd8>
   11d50:	00802034 	movhi	r2,128
   11d54:	31801034 	orhi	r6,r6,64
   11d58:	10bfffc4 	addi	r2,r2,-1
   11d5c:	00ffffc4 	movi	r3,-1
   11d60:	308c703a 	and	r6,r6,r2
   11d64:	003fde06 	br	11ce0 <__alt_data_end+0xffff1ce0>
   11d68:	013ffa44 	movi	r4,-23
   11d6c:	19000e16 	blt	r3,r4,11da8 <__truncdfsf2+0x168>
   11d70:	01000784 	movi	r4,30
   11d74:	20c9c83a 	sub	r4,r4,r3
   11d78:	018007c4 	movi	r6,31
   11d7c:	39c02034 	orhi	r7,r7,128
   11d80:	31000b16 	blt	r6,r4,11db0 <__truncdfsf2+0x170>
   11d84:	423f2084 	addi	r8,r8,-894
   11d88:	120c983a 	sll	r6,r2,r8
   11d8c:	3a0e983a 	sll	r7,r7,r8
   11d90:	1104d83a 	srl	r2,r2,r4
   11d94:	300cc03a 	cmpne	r6,r6,zero
   11d98:	31ceb03a 	or	r7,r6,r7
   11d9c:	388cb03a 	or	r6,r7,r2
   11da0:	0007883a 	mov	r3,zero
   11da4:	003fbe06 	br	11ca0 <__alt_data_end+0xffff1ca0>
   11da8:	0007883a 	mov	r3,zero
   11dac:	003fd906 	br	11d14 <__alt_data_end+0xffff1d14>
   11db0:	01bfff84 	movi	r6,-2
   11db4:	30cdc83a 	sub	r6,r6,r3
   11db8:	00c00804 	movi	r3,32
   11dbc:	398cd83a 	srl	r6,r7,r6
   11dc0:	20c00726 	beq	r4,r3,11de0 <__truncdfsf2+0x1a0>
   11dc4:	423f2884 	addi	r8,r8,-862
   11dc8:	3a0e983a 	sll	r7,r7,r8
   11dcc:	3884b03a 	or	r2,r7,r2
   11dd0:	1004c03a 	cmpne	r2,r2,zero
   11dd4:	118cb03a 	or	r6,r2,r6
   11dd8:	0007883a 	mov	r3,zero
   11ddc:	003fb006 	br	11ca0 <__alt_data_end+0xffff1ca0>
   11de0:	000f883a 	mov	r7,zero
   11de4:	003ff906 	br	11dcc <__alt_data_end+0xffff1dcc>

00011de8 <__clzsi2>:
   11de8:	00bfffd4 	movui	r2,65535
   11dec:	11000536 	bltu	r2,r4,11e04 <__clzsi2+0x1c>
   11df0:	00803fc4 	movi	r2,255
   11df4:	11000f36 	bltu	r2,r4,11e34 <__clzsi2+0x4c>
   11df8:	00800804 	movi	r2,32
   11dfc:	0007883a 	mov	r3,zero
   11e00:	00000506 	br	11e18 <__clzsi2+0x30>
   11e04:	00804034 	movhi	r2,256
   11e08:	10bfffc4 	addi	r2,r2,-1
   11e0c:	11000c2e 	bgeu	r2,r4,11e40 <__clzsi2+0x58>
   11e10:	00800204 	movi	r2,8
   11e14:	00c00604 	movi	r3,24
   11e18:	20c8d83a 	srl	r4,r4,r3
   11e1c:	00c00074 	movhi	r3,1
   11e20:	18cbf744 	addi	r3,r3,12253
   11e24:	1909883a 	add	r4,r3,r4
   11e28:	20c00003 	ldbu	r3,0(r4)
   11e2c:	10c5c83a 	sub	r2,r2,r3
   11e30:	f800283a 	ret
   11e34:	00800604 	movi	r2,24
   11e38:	00c00204 	movi	r3,8
   11e3c:	003ff606 	br	11e18 <__alt_data_end+0xffff1e18>
   11e40:	00800404 	movi	r2,16
   11e44:	1007883a 	mov	r3,r2
   11e48:	003ff306 	br	11e18 <__alt_data_end+0xffff1e18>

00011e4c <memcpy>:
   11e4c:	2005883a 	mov	r2,r4
   11e50:	2007883a 	mov	r3,r4
   11e54:	218d883a 	add	r6,r4,r6
   11e58:	19800526 	beq	r3,r6,11e70 <memcpy+0x24>
   11e5c:	29000003 	ldbu	r4,0(r5)
   11e60:	18c00044 	addi	r3,r3,1
   11e64:	29400044 	addi	r5,r5,1
   11e68:	193fffc5 	stb	r4,-1(r3)
   11e6c:	003ffa06 	br	11e58 <__alt_data_end+0xffff1e58>
   11e70:	f800283a 	ret

00011e74 <_printf_r>:
   11e74:	defffd04 	addi	sp,sp,-12
   11e78:	dfc00015 	stw	ra,0(sp)
   11e7c:	d9800115 	stw	r6,4(sp)
   11e80:	d9c00215 	stw	r7,8(sp)
   11e84:	20c00217 	ldw	r3,8(r4)
   11e88:	01800074 	movhi	r6,1
   11e8c:	31892c04 	addi	r6,r6,9392
   11e90:	19800115 	stw	r6,4(r3)
   11e94:	280d883a 	mov	r6,r5
   11e98:	21400217 	ldw	r5,8(r4)
   11e9c:	d9c00104 	addi	r7,sp,4
   11ea0:	0011f680 	call	11f68 <___vfprintf_internal_r>
   11ea4:	dfc00017 	ldw	ra,0(sp)
   11ea8:	dec00304 	addi	sp,sp,12
   11eac:	f800283a 	ret

00011eb0 <printf>:
   11eb0:	defffc04 	addi	sp,sp,-16
   11eb4:	dfc00015 	stw	ra,0(sp)
   11eb8:	d9400115 	stw	r5,4(sp)
   11ebc:	d9800215 	stw	r6,8(sp)
   11ec0:	d9c00315 	stw	r7,12(sp)
   11ec4:	00800074 	movhi	r2,1
   11ec8:	108c9a04 	addi	r2,r2,12904
   11ecc:	10800017 	ldw	r2,0(r2)
   11ed0:	01400074 	movhi	r5,1
   11ed4:	29492c04 	addi	r5,r5,9392
   11ed8:	10c00217 	ldw	r3,8(r2)
   11edc:	d9800104 	addi	r6,sp,4
   11ee0:	19400115 	stw	r5,4(r3)
   11ee4:	200b883a 	mov	r5,r4
   11ee8:	11000217 	ldw	r4,8(r2)
   11eec:	00124940 	call	12494 <__vfprintf_internal>
   11ef0:	dfc00017 	ldw	ra,0(sp)
   11ef4:	dec00404 	addi	sp,sp,16
   11ef8:	f800283a 	ret

00011efc <print_repeat>:
   11efc:	defffb04 	addi	sp,sp,-20
   11f00:	dc800315 	stw	r18,12(sp)
   11f04:	dc400215 	stw	r17,8(sp)
   11f08:	dc000115 	stw	r16,4(sp)
   11f0c:	dfc00415 	stw	ra,16(sp)
   11f10:	2025883a 	mov	r18,r4
   11f14:	2823883a 	mov	r17,r5
   11f18:	d9800005 	stb	r6,0(sp)
   11f1c:	3821883a 	mov	r16,r7
   11f20:	04000a0e 	bge	zero,r16,11f4c <print_repeat+0x50>
   11f24:	88800117 	ldw	r2,4(r17)
   11f28:	01c00044 	movi	r7,1
   11f2c:	d80d883a 	mov	r6,sp
   11f30:	880b883a 	mov	r5,r17
   11f34:	9009883a 	mov	r4,r18
   11f38:	103ee83a 	callr	r2
   11f3c:	843fffc4 	addi	r16,r16,-1
   11f40:	103ff726 	beq	r2,zero,11f20 <__alt_data_end+0xffff1f20>
   11f44:	00bfffc4 	movi	r2,-1
   11f48:	00000106 	br	11f50 <print_repeat+0x54>
   11f4c:	0005883a 	mov	r2,zero
   11f50:	dfc00417 	ldw	ra,16(sp)
   11f54:	dc800317 	ldw	r18,12(sp)
   11f58:	dc400217 	ldw	r17,8(sp)
   11f5c:	dc000117 	ldw	r16,4(sp)
   11f60:	dec00504 	addi	sp,sp,20
   11f64:	f800283a 	ret

00011f68 <___vfprintf_internal_r>:
   11f68:	deffe504 	addi	sp,sp,-108
   11f6c:	d8c00804 	addi	r3,sp,32
   11f70:	ddc01815 	stw	r23,96(sp)
   11f74:	dd801715 	stw	r22,92(sp)
   11f78:	dd401615 	stw	r21,88(sp)
   11f7c:	dd001515 	stw	r20,84(sp)
   11f80:	dcc01415 	stw	r19,80(sp)
   11f84:	dc801315 	stw	r18,76(sp)
   11f88:	dc401215 	stw	r17,72(sp)
   11f8c:	dc001115 	stw	r16,68(sp)
   11f90:	dfc01a15 	stw	ra,104(sp)
   11f94:	df001915 	stw	fp,100(sp)
   11f98:	2029883a 	mov	r20,r4
   11f9c:	2823883a 	mov	r17,r5
   11fa0:	382d883a 	mov	r22,r7
   11fa4:	d9800f15 	stw	r6,60(sp)
   11fa8:	0021883a 	mov	r16,zero
   11fac:	d8000e15 	stw	zero,56(sp)
   11fb0:	d8000a15 	stw	zero,40(sp)
   11fb4:	002b883a 	mov	r21,zero
   11fb8:	0027883a 	mov	r19,zero
   11fbc:	0025883a 	mov	r18,zero
   11fc0:	d8000c15 	stw	zero,48(sp)
   11fc4:	d8000b15 	stw	zero,44(sp)
   11fc8:	002f883a 	mov	r23,zero
   11fcc:	d8c00915 	stw	r3,36(sp)
   11fd0:	d8c00f17 	ldw	r3,60(sp)
   11fd4:	19000003 	ldbu	r4,0(r3)
   11fd8:	20803fcc 	andi	r2,r4,255
   11fdc:	1080201c 	xori	r2,r2,128
   11fe0:	10bfe004 	addi	r2,r2,-128
   11fe4:	10011e26 	beq	r2,zero,12460 <___vfprintf_internal_r+0x4f8>
   11fe8:	00c00044 	movi	r3,1
   11fec:	b8c01426 	beq	r23,r3,12040 <___vfprintf_internal_r+0xd8>
   11ff0:	1dc00216 	blt	r3,r23,11ffc <___vfprintf_internal_r+0x94>
   11ff4:	b8000626 	beq	r23,zero,12010 <___vfprintf_internal_r+0xa8>
   11ff8:	00011506 	br	12450 <___vfprintf_internal_r+0x4e8>
   11ffc:	01400084 	movi	r5,2
   12000:	b9401d26 	beq	r23,r5,12078 <___vfprintf_internal_r+0x110>
   12004:	014000c4 	movi	r5,3
   12008:	b9402b26 	beq	r23,r5,120b8 <___vfprintf_internal_r+0x150>
   1200c:	00011006 	br	12450 <___vfprintf_internal_r+0x4e8>
   12010:	01400944 	movi	r5,37
   12014:	1140fc26 	beq	r2,r5,12408 <___vfprintf_internal_r+0x4a0>
   12018:	88800117 	ldw	r2,4(r17)
   1201c:	d9000005 	stb	r4,0(sp)
   12020:	01c00044 	movi	r7,1
   12024:	d80d883a 	mov	r6,sp
   12028:	880b883a 	mov	r5,r17
   1202c:	a009883a 	mov	r4,r20
   12030:	103ee83a 	callr	r2
   12034:	1000d81e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   12038:	84000044 	addi	r16,r16,1
   1203c:	00010406 	br	12450 <___vfprintf_internal_r+0x4e8>
   12040:	01400c04 	movi	r5,48
   12044:	1140fa26 	beq	r2,r5,12430 <___vfprintf_internal_r+0x4c8>
   12048:	01400944 	movi	r5,37
   1204c:	11400a1e 	bne	r2,r5,12078 <___vfprintf_internal_r+0x110>
   12050:	d8800005 	stb	r2,0(sp)
   12054:	88800117 	ldw	r2,4(r17)
   12058:	b80f883a 	mov	r7,r23
   1205c:	d80d883a 	mov	r6,sp
   12060:	880b883a 	mov	r5,r17
   12064:	a009883a 	mov	r4,r20
   12068:	103ee83a 	callr	r2
   1206c:	1000ca1e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   12070:	84000044 	addi	r16,r16,1
   12074:	0000f506 	br	1244c <___vfprintf_internal_r+0x4e4>
   12078:	25fff404 	addi	r23,r4,-48
   1207c:	bdc03fcc 	andi	r23,r23,255
   12080:	00c00244 	movi	r3,9
   12084:	1dc00936 	bltu	r3,r23,120ac <___vfprintf_internal_r+0x144>
   12088:	00bfffc4 	movi	r2,-1
   1208c:	90800426 	beq	r18,r2,120a0 <___vfprintf_internal_r+0x138>
   12090:	01400284 	movi	r5,10
   12094:	9009883a 	mov	r4,r18
   12098:	00108340 	call	10834 <__mulsi3>
   1209c:	00000106 	br	120a4 <___vfprintf_internal_r+0x13c>
   120a0:	0005883a 	mov	r2,zero
   120a4:	b8a5883a 	add	r18,r23,r2
   120a8:	0000e206 	br	12434 <___vfprintf_internal_r+0x4cc>
   120ac:	01400b84 	movi	r5,46
   120b0:	1140e426 	beq	r2,r5,12444 <___vfprintf_internal_r+0x4dc>
   120b4:	05c00084 	movi	r23,2
   120b8:	213ff404 	addi	r4,r4,-48
   120bc:	27003fcc 	andi	fp,r4,255
   120c0:	00c00244 	movi	r3,9
   120c4:	1f000936 	bltu	r3,fp,120ec <___vfprintf_internal_r+0x184>
   120c8:	00bfffc4 	movi	r2,-1
   120cc:	98800426 	beq	r19,r2,120e0 <___vfprintf_internal_r+0x178>
   120d0:	01400284 	movi	r5,10
   120d4:	9809883a 	mov	r4,r19
   120d8:	00108340 	call	10834 <__mulsi3>
   120dc:	00000106 	br	120e4 <___vfprintf_internal_r+0x17c>
   120e0:	0005883a 	mov	r2,zero
   120e4:	e0a7883a 	add	r19,fp,r2
   120e8:	0000d906 	br	12450 <___vfprintf_internal_r+0x4e8>
   120ec:	00c01b04 	movi	r3,108
   120f0:	10c0d226 	beq	r2,r3,1243c <___vfprintf_internal_r+0x4d4>
   120f4:	013fffc4 	movi	r4,-1
   120f8:	99000226 	beq	r19,r4,12104 <___vfprintf_internal_r+0x19c>
   120fc:	d8000b15 	stw	zero,44(sp)
   12100:	00000106 	br	12108 <___vfprintf_internal_r+0x1a0>
   12104:	04c00044 	movi	r19,1
   12108:	01001a44 	movi	r4,105
   1210c:	11001626 	beq	r2,r4,12168 <___vfprintf_internal_r+0x200>
   12110:	20800916 	blt	r4,r2,12138 <___vfprintf_internal_r+0x1d0>
   12114:	010018c4 	movi	r4,99
   12118:	11008826 	beq	r2,r4,1233c <___vfprintf_internal_r+0x3d4>
   1211c:	01001904 	movi	r4,100
   12120:	11001126 	beq	r2,r4,12168 <___vfprintf_internal_r+0x200>
   12124:	01001604 	movi	r4,88
   12128:	1100c81e 	bne	r2,r4,1244c <___vfprintf_internal_r+0x4e4>
   1212c:	00c00044 	movi	r3,1
   12130:	d8c00e15 	stw	r3,56(sp)
   12134:	00001506 	br	1218c <___vfprintf_internal_r+0x224>
   12138:	01001cc4 	movi	r4,115
   1213c:	11009826 	beq	r2,r4,123a0 <___vfprintf_internal_r+0x438>
   12140:	20800416 	blt	r4,r2,12154 <___vfprintf_internal_r+0x1ec>
   12144:	01001bc4 	movi	r4,111
   12148:	1100c01e 	bne	r2,r4,1244c <___vfprintf_internal_r+0x4e4>
   1214c:	05400204 	movi	r21,8
   12150:	00000f06 	br	12190 <___vfprintf_internal_r+0x228>
   12154:	01001d44 	movi	r4,117
   12158:	11000d26 	beq	r2,r4,12190 <___vfprintf_internal_r+0x228>
   1215c:	01001e04 	movi	r4,120
   12160:	11000a26 	beq	r2,r4,1218c <___vfprintf_internal_r+0x224>
   12164:	0000b906 	br	1244c <___vfprintf_internal_r+0x4e4>
   12168:	d8c00a17 	ldw	r3,40(sp)
   1216c:	b7000104 	addi	fp,r22,4
   12170:	18000726 	beq	r3,zero,12190 <___vfprintf_internal_r+0x228>
   12174:	df000d15 	stw	fp,52(sp)
   12178:	b5c00017 	ldw	r23,0(r22)
   1217c:	b800080e 	bge	r23,zero,121a0 <___vfprintf_internal_r+0x238>
   12180:	05efc83a 	sub	r23,zero,r23
   12184:	02400044 	movi	r9,1
   12188:	00000606 	br	121a4 <___vfprintf_internal_r+0x23c>
   1218c:	05400404 	movi	r21,16
   12190:	b0c00104 	addi	r3,r22,4
   12194:	d8c00d15 	stw	r3,52(sp)
   12198:	b5c00017 	ldw	r23,0(r22)
   1219c:	d8000a15 	stw	zero,40(sp)
   121a0:	0013883a 	mov	r9,zero
   121a4:	d839883a 	mov	fp,sp
   121a8:	b8001726 	beq	r23,zero,12208 <___vfprintf_internal_r+0x2a0>
   121ac:	a80b883a 	mov	r5,r21
   121b0:	b809883a 	mov	r4,r23
   121b4:	da401015 	stw	r9,64(sp)
   121b8:	00107780 	call	10778 <__udivsi3>
   121bc:	a80b883a 	mov	r5,r21
   121c0:	1009883a 	mov	r4,r2
   121c4:	102d883a 	mov	r22,r2
   121c8:	00108340 	call	10834 <__mulsi3>
   121cc:	b885c83a 	sub	r2,r23,r2
   121d0:	00c00244 	movi	r3,9
   121d4:	da401017 	ldw	r9,64(sp)
   121d8:	18800216 	blt	r3,r2,121e4 <___vfprintf_internal_r+0x27c>
   121dc:	10800c04 	addi	r2,r2,48
   121e0:	00000506 	br	121f8 <___vfprintf_internal_r+0x290>
   121e4:	d8c00e17 	ldw	r3,56(sp)
   121e8:	18000226 	beq	r3,zero,121f4 <___vfprintf_internal_r+0x28c>
   121ec:	10800dc4 	addi	r2,r2,55
   121f0:	00000106 	br	121f8 <___vfprintf_internal_r+0x290>
   121f4:	108015c4 	addi	r2,r2,87
   121f8:	e0800005 	stb	r2,0(fp)
   121fc:	b02f883a 	mov	r23,r22
   12200:	e7000044 	addi	fp,fp,1
   12204:	003fe806 	br	121a8 <__alt_data_end+0xffff21a8>
   12208:	e6efc83a 	sub	r23,fp,sp
   1220c:	9dc5c83a 	sub	r2,r19,r23
   12210:	0080090e 	bge	zero,r2,12238 <___vfprintf_internal_r+0x2d0>
   12214:	e085883a 	add	r2,fp,r2
   12218:	01400c04 	movi	r5,48
   1221c:	d8c00917 	ldw	r3,36(sp)
   12220:	e009883a 	mov	r4,fp
   12224:	e0c0032e 	bgeu	fp,r3,12234 <___vfprintf_internal_r+0x2cc>
   12228:	e7000044 	addi	fp,fp,1
   1222c:	21400005 	stb	r5,0(r4)
   12230:	e0bffa1e 	bne	fp,r2,1221c <__alt_data_end+0xffff221c>
   12234:	e6efc83a 	sub	r23,fp,sp
   12238:	d8c00b17 	ldw	r3,44(sp)
   1223c:	4dd1883a 	add	r8,r9,r23
   12240:	922dc83a 	sub	r22,r18,r8
   12244:	18001626 	beq	r3,zero,122a0 <___vfprintf_internal_r+0x338>
   12248:	48000a26 	beq	r9,zero,12274 <___vfprintf_internal_r+0x30c>
   1224c:	00800b44 	movi	r2,45
   12250:	d8800805 	stb	r2,32(sp)
   12254:	88800117 	ldw	r2,4(r17)
   12258:	01c00044 	movi	r7,1
   1225c:	d9800804 	addi	r6,sp,32
   12260:	880b883a 	mov	r5,r17
   12264:	a009883a 	mov	r4,r20
   12268:	103ee83a 	callr	r2
   1226c:	10004a1e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   12270:	84000044 	addi	r16,r16,1
   12274:	0580070e 	bge	zero,r22,12294 <___vfprintf_internal_r+0x32c>
   12278:	b00f883a 	mov	r7,r22
   1227c:	01800c04 	movi	r6,48
   12280:	880b883a 	mov	r5,r17
   12284:	a009883a 	mov	r4,r20
   12288:	0011efc0 	call	11efc <print_repeat>
   1228c:	1000421e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   12290:	85a1883a 	add	r16,r16,r22
   12294:	e02d883a 	mov	r22,fp
   12298:	bf2fc83a 	sub	r23,r23,fp
   1229c:	00002006 	br	12320 <___vfprintf_internal_r+0x3b8>
   122a0:	0580090e 	bge	zero,r22,122c8 <___vfprintf_internal_r+0x360>
   122a4:	b00f883a 	mov	r7,r22
   122a8:	01800804 	movi	r6,32
   122ac:	880b883a 	mov	r5,r17
   122b0:	a009883a 	mov	r4,r20
   122b4:	da401015 	stw	r9,64(sp)
   122b8:	0011efc0 	call	11efc <print_repeat>
   122bc:	da401017 	ldw	r9,64(sp)
   122c0:	1000351e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   122c4:	85a1883a 	add	r16,r16,r22
   122c8:	483ff226 	beq	r9,zero,12294 <__alt_data_end+0xffff2294>
   122cc:	00800b44 	movi	r2,45
   122d0:	d8800805 	stb	r2,32(sp)
   122d4:	88800117 	ldw	r2,4(r17)
   122d8:	01c00044 	movi	r7,1
   122dc:	d9800804 	addi	r6,sp,32
   122e0:	880b883a 	mov	r5,r17
   122e4:	a009883a 	mov	r4,r20
   122e8:	103ee83a 	callr	r2
   122ec:	10002a1e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   122f0:	84000044 	addi	r16,r16,1
   122f4:	003fe706 	br	12294 <__alt_data_end+0xffff2294>
   122f8:	b5bfffc4 	addi	r22,r22,-1
   122fc:	b0800003 	ldbu	r2,0(r22)
   12300:	01c00044 	movi	r7,1
   12304:	d9800804 	addi	r6,sp,32
   12308:	d8800805 	stb	r2,32(sp)
   1230c:	88800117 	ldw	r2,4(r17)
   12310:	880b883a 	mov	r5,r17
   12314:	a009883a 	mov	r4,r20
   12318:	103ee83a 	callr	r2
   1231c:	10001e1e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   12320:	8585c83a 	sub	r2,r16,r22
   12324:	b5c9883a 	add	r4,r22,r23
   12328:	e085883a 	add	r2,fp,r2
   1232c:	013ff216 	blt	zero,r4,122f8 <__alt_data_end+0xffff22f8>
   12330:	1021883a 	mov	r16,r2
   12334:	dd800d17 	ldw	r22,52(sp)
   12338:	00004406 	br	1244c <___vfprintf_internal_r+0x4e4>
   1233c:	00800044 	movi	r2,1
   12340:	1480080e 	bge	r2,r18,12364 <___vfprintf_internal_r+0x3fc>
   12344:	95ffffc4 	addi	r23,r18,-1
   12348:	b80f883a 	mov	r7,r23
   1234c:	01800804 	movi	r6,32
   12350:	880b883a 	mov	r5,r17
   12354:	a009883a 	mov	r4,r20
   12358:	0011efc0 	call	11efc <print_repeat>
   1235c:	10000e1e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   12360:	85e1883a 	add	r16,r16,r23
   12364:	b0800017 	ldw	r2,0(r22)
   12368:	01c00044 	movi	r7,1
   1236c:	d80d883a 	mov	r6,sp
   12370:	d8800005 	stb	r2,0(sp)
   12374:	88800117 	ldw	r2,4(r17)
   12378:	880b883a 	mov	r5,r17
   1237c:	a009883a 	mov	r4,r20
   12380:	b5c00104 	addi	r23,r22,4
   12384:	103ee83a 	callr	r2
   12388:	1000031e 	bne	r2,zero,12398 <___vfprintf_internal_r+0x430>
   1238c:	84000044 	addi	r16,r16,1
   12390:	b82d883a 	mov	r22,r23
   12394:	00002d06 	br	1244c <___vfprintf_internal_r+0x4e4>
   12398:	00bfffc4 	movi	r2,-1
   1239c:	00003106 	br	12464 <___vfprintf_internal_r+0x4fc>
   123a0:	b5c00017 	ldw	r23,0(r22)
   123a4:	b7000104 	addi	fp,r22,4
   123a8:	b809883a 	mov	r4,r23
   123ac:	00125680 	call	12568 <strlen>
   123b0:	9091c83a 	sub	r8,r18,r2
   123b4:	102d883a 	mov	r22,r2
   123b8:	0200090e 	bge	zero,r8,123e0 <___vfprintf_internal_r+0x478>
   123bc:	400f883a 	mov	r7,r8
   123c0:	01800804 	movi	r6,32
   123c4:	880b883a 	mov	r5,r17
   123c8:	a009883a 	mov	r4,r20
   123cc:	da001015 	stw	r8,64(sp)
   123d0:	0011efc0 	call	11efc <print_repeat>
   123d4:	da001017 	ldw	r8,64(sp)
   123d8:	103fef1e 	bne	r2,zero,12398 <__alt_data_end+0xffff2398>
   123dc:	8221883a 	add	r16,r16,r8
   123e0:	88800117 	ldw	r2,4(r17)
   123e4:	b00f883a 	mov	r7,r22
   123e8:	b80d883a 	mov	r6,r23
   123ec:	880b883a 	mov	r5,r17
   123f0:	a009883a 	mov	r4,r20
   123f4:	103ee83a 	callr	r2
   123f8:	103fe71e 	bne	r2,zero,12398 <__alt_data_end+0xffff2398>
   123fc:	85a1883a 	add	r16,r16,r22
   12400:	e02d883a 	mov	r22,fp
   12404:	00001106 	br	1244c <___vfprintf_internal_r+0x4e4>
   12408:	00c00044 	movi	r3,1
   1240c:	04ffffc4 	movi	r19,-1
   12410:	d8000e15 	stw	zero,56(sp)
   12414:	d8c00a15 	stw	r3,40(sp)
   12418:	05400284 	movi	r21,10
   1241c:	9825883a 	mov	r18,r19
   12420:	d8000c15 	stw	zero,48(sp)
   12424:	d8000b15 	stw	zero,44(sp)
   12428:	182f883a 	mov	r23,r3
   1242c:	00000806 	br	12450 <___vfprintf_internal_r+0x4e8>
   12430:	ddc00b15 	stw	r23,44(sp)
   12434:	05c00084 	movi	r23,2
   12438:	00000506 	br	12450 <___vfprintf_internal_r+0x4e8>
   1243c:	00c00044 	movi	r3,1
   12440:	d8c00c15 	stw	r3,48(sp)
   12444:	05c000c4 	movi	r23,3
   12448:	00000106 	br	12450 <___vfprintf_internal_r+0x4e8>
   1244c:	002f883a 	mov	r23,zero
   12450:	d8c00f17 	ldw	r3,60(sp)
   12454:	18c00044 	addi	r3,r3,1
   12458:	d8c00f15 	stw	r3,60(sp)
   1245c:	003edc06 	br	11fd0 <__alt_data_end+0xffff1fd0>
   12460:	8005883a 	mov	r2,r16
   12464:	dfc01a17 	ldw	ra,104(sp)
   12468:	df001917 	ldw	fp,100(sp)
   1246c:	ddc01817 	ldw	r23,96(sp)
   12470:	dd801717 	ldw	r22,92(sp)
   12474:	dd401617 	ldw	r21,88(sp)
   12478:	dd001517 	ldw	r20,84(sp)
   1247c:	dcc01417 	ldw	r19,80(sp)
   12480:	dc801317 	ldw	r18,76(sp)
   12484:	dc401217 	ldw	r17,72(sp)
   12488:	dc001117 	ldw	r16,68(sp)
   1248c:	dec01b04 	addi	sp,sp,108
   12490:	f800283a 	ret

00012494 <__vfprintf_internal>:
   12494:	00800074 	movhi	r2,1
   12498:	108c9a04 	addi	r2,r2,12904
   1249c:	300f883a 	mov	r7,r6
   124a0:	280d883a 	mov	r6,r5
   124a4:	200b883a 	mov	r5,r4
   124a8:	11000017 	ldw	r4,0(r2)
   124ac:	0011f681 	jmpi	11f68 <___vfprintf_internal_r>

000124b0 <__sfvwrite_small_dev>:
   124b0:	2880000b 	ldhu	r2,0(r5)
   124b4:	1080020c 	andi	r2,r2,8
   124b8:	10002126 	beq	r2,zero,12540 <__sfvwrite_small_dev+0x90>
   124bc:	2880008f 	ldh	r2,2(r5)
   124c0:	defffa04 	addi	sp,sp,-24
   124c4:	dc000015 	stw	r16,0(sp)
   124c8:	dfc00515 	stw	ra,20(sp)
   124cc:	dd000415 	stw	r20,16(sp)
   124d0:	dcc00315 	stw	r19,12(sp)
   124d4:	dc800215 	stw	r18,8(sp)
   124d8:	dc400115 	stw	r17,4(sp)
   124dc:	2821883a 	mov	r16,r5
   124e0:	10001216 	blt	r2,zero,1252c <__sfvwrite_small_dev+0x7c>
   124e4:	2027883a 	mov	r19,r4
   124e8:	3025883a 	mov	r18,r6
   124ec:	3823883a 	mov	r17,r7
   124f0:	05010004 	movi	r20,1024
   124f4:	04400b0e 	bge	zero,r17,12524 <__sfvwrite_small_dev+0x74>
   124f8:	880f883a 	mov	r7,r17
   124fc:	a440010e 	bge	r20,r17,12504 <__sfvwrite_small_dev+0x54>
   12500:	01c10004 	movi	r7,1024
   12504:	8140008f 	ldh	r5,2(r16)
   12508:	900d883a 	mov	r6,r18
   1250c:	9809883a 	mov	r4,r19
   12510:	00125840 	call	12584 <_write_r>
   12514:	0080050e 	bge	zero,r2,1252c <__sfvwrite_small_dev+0x7c>
   12518:	88a3c83a 	sub	r17,r17,r2
   1251c:	90a5883a 	add	r18,r18,r2
   12520:	003ff406 	br	124f4 <__alt_data_end+0xffff24f4>
   12524:	0005883a 	mov	r2,zero
   12528:	00000706 	br	12548 <__sfvwrite_small_dev+0x98>
   1252c:	8080000b 	ldhu	r2,0(r16)
   12530:	10801014 	ori	r2,r2,64
   12534:	8080000d 	sth	r2,0(r16)
   12538:	00bfffc4 	movi	r2,-1
   1253c:	00000206 	br	12548 <__sfvwrite_small_dev+0x98>
   12540:	00bfffc4 	movi	r2,-1
   12544:	f800283a 	ret
   12548:	dfc00517 	ldw	ra,20(sp)
   1254c:	dd000417 	ldw	r20,16(sp)
   12550:	dcc00317 	ldw	r19,12(sp)
   12554:	dc800217 	ldw	r18,8(sp)
   12558:	dc400117 	ldw	r17,4(sp)
   1255c:	dc000017 	ldw	r16,0(sp)
   12560:	dec00604 	addi	sp,sp,24
   12564:	f800283a 	ret

00012568 <strlen>:
   12568:	2005883a 	mov	r2,r4
   1256c:	10c00007 	ldb	r3,0(r2)
   12570:	18000226 	beq	r3,zero,1257c <strlen+0x14>
   12574:	10800044 	addi	r2,r2,1
   12578:	003ffc06 	br	1256c <__alt_data_end+0xffff256c>
   1257c:	1105c83a 	sub	r2,r2,r4
   12580:	f800283a 	ret

00012584 <_write_r>:
   12584:	defffd04 	addi	sp,sp,-12
   12588:	dc000015 	stw	r16,0(sp)
   1258c:	04000074 	movhi	r16,1
   12590:	dc400115 	stw	r17,4(sp)
   12594:	840d1304 	addi	r16,r16,13388
   12598:	2023883a 	mov	r17,r4
   1259c:	2809883a 	mov	r4,r5
   125a0:	300b883a 	mov	r5,r6
   125a4:	380d883a 	mov	r6,r7
   125a8:	dfc00215 	stw	ra,8(sp)
   125ac:	80000015 	stw	zero,0(r16)
   125b0:	00129940 	call	12994 <write>
   125b4:	00ffffc4 	movi	r3,-1
   125b8:	10c0031e 	bne	r2,r3,125c8 <_write_r+0x44>
   125bc:	80c00017 	ldw	r3,0(r16)
   125c0:	18000126 	beq	r3,zero,125c8 <_write_r+0x44>
   125c4:	88c00015 	stw	r3,0(r17)
   125c8:	dfc00217 	ldw	ra,8(sp)
   125cc:	dc400117 	ldw	r17,4(sp)
   125d0:	dc000017 	ldw	r16,0(sp)
   125d4:	dec00304 	addi	sp,sp,12
   125d8:	f800283a 	ret

000125dc <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   125dc:	008007c4 	movi	r2,31
   125e0:	11002136 	bltu	r2,r4,12668 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125e4:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125e8:	00ffff84 	movi	r3,-2
   125ec:	38c4703a 	and	r2,r7,r3
   125f0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   125f4:	200490fa 	slli	r2,r4,3
   125f8:	02000074 	movhi	r8,1
   125fc:	420d8c04 	addi	r8,r8,13872
   12600:	4085883a 	add	r2,r8,r2
   12604:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   12608:	11400115 	stw	r5,4(r2)
   1260c:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   12610:	30000726 	beq	r6,zero,12630 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12614:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12618:	28c6703a 	and	r3,r5,r3
   1261c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   12620:	d0e07b17 	ldw	r3,-32276(gp)
   12624:	1104983a 	sll	r2,r2,r4
   12628:	10c4b03a 	or	r2,r2,r3
   1262c:	00000706 	br	1264c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12630:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12634:	28c6703a 	and	r3,r5,r3
   12638:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   1263c:	1104983a 	sll	r2,r2,r4
   12640:	d0e07b17 	ldw	r3,-32276(gp)
   12644:	0084303a 	nor	r2,zero,r2
   12648:	10c4703a 	and	r2,r2,r3
   1264c:	d0a07b15 	stw	r2,-32276(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12650:	d0a07b17 	ldw	r2,-32276(gp)
   12654:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12658:	2801703a 	wrctl	status,r5
   1265c:	3801703a 	wrctl	status,r7
   12660:	0005883a 	mov	r2,zero
   12664:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   12668:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   1266c:	f800283a 	ret

00012670 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12670:	deffff04 	addi	sp,sp,-4
   12674:	01000074 	movhi	r4,1
   12678:	01400074 	movhi	r5,1
   1267c:	dfc00015 	stw	ra,0(sp)
   12680:	210c3b04 	addi	r4,r4,12524
   12684:	294ca504 	addi	r5,r5,12948

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12688:	2140061e 	bne	r4,r5,126a4 <alt_load+0x34>
   1268c:	01000074 	movhi	r4,1
   12690:	01400074 	movhi	r5,1
   12694:	21000804 	addi	r4,r4,32
   12698:	29400804 	addi	r5,r5,32
   1269c:	2140121e 	bne	r4,r5,126e8 <alt_load+0x78>
   126a0:	00000b06 	br	126d0 <alt_load+0x60>
   126a4:	00c00074 	movhi	r3,1
   126a8:	18cca504 	addi	r3,r3,12948
   126ac:	1907c83a 	sub	r3,r3,r4
   126b0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   126b4:	10fff526 	beq	r2,r3,1268c <__alt_data_end+0xffff268c>
    {
      *to++ = *from++;
   126b8:	114f883a 	add	r7,r2,r5
   126bc:	39c00017 	ldw	r7,0(r7)
   126c0:	110d883a 	add	r6,r2,r4
   126c4:	10800104 	addi	r2,r2,4
   126c8:	31c00015 	stw	r7,0(r6)
   126cc:	003ff906 	br	126b4 <__alt_data_end+0xffff26b4>
   126d0:	01000074 	movhi	r4,1
   126d4:	01400074 	movhi	r5,1
   126d8:	210bb304 	addi	r4,r4,11980
   126dc:	294bb304 	addi	r5,r5,11980

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   126e0:	2140101e 	bne	r4,r5,12724 <alt_load+0xb4>
   126e4:	00000b06 	br	12714 <alt_load+0xa4>
   126e8:	00c00074 	movhi	r3,1
   126ec:	18c06004 	addi	r3,r3,384
   126f0:	1907c83a 	sub	r3,r3,r4
   126f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   126f8:	10fff526 	beq	r2,r3,126d0 <__alt_data_end+0xffff26d0>
    {
      *to++ = *from++;
   126fc:	114f883a 	add	r7,r2,r5
   12700:	39c00017 	ldw	r7,0(r7)
   12704:	110d883a 	add	r6,r2,r4
   12708:	10800104 	addi	r2,r2,4
   1270c:	31c00015 	stw	r7,0(r6)
   12710:	003ff906 	br	126f8 <__alt_data_end+0xffff26f8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12714:	0012c440 	call	12c44 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   12718:	dfc00017 	ldw	ra,0(sp)
   1271c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   12720:	0012d301 	jmpi	12d30 <alt_icache_flush_all>
   12724:	00c00074 	movhi	r3,1
   12728:	18cc3b04 	addi	r3,r3,12524
   1272c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12730:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12734:	18bff726 	beq	r3,r2,12714 <__alt_data_end+0xffff2714>
    {
      *to++ = *from++;
   12738:	114f883a 	add	r7,r2,r5
   1273c:	39c00017 	ldw	r7,0(r7)
   12740:	110d883a 	add	r6,r2,r4
   12744:	10800104 	addi	r2,r2,4
   12748:	31c00015 	stw	r7,0(r6)
   1274c:	003ff906 	br	12734 <__alt_data_end+0xffff2734>

00012750 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12750:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12754:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12758:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1275c:	00129f40 	call	129f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12760:	0012a140 	call	12a14 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12764:	d1a07c17 	ldw	r6,-32272(gp)
   12768:	d1607d17 	ldw	r5,-32268(gp)
   1276c:	d1207e17 	ldw	r4,-32264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   12770:	dfc00017 	ldw	ra,0(sp)
   12774:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12778:	00105881 	jmpi	10588 <main>

0001277c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1277c:	defff204 	addi	sp,sp,-56
   12780:	2005883a 	mov	r2,r4
   12784:	dfc00a15 	stw	ra,40(sp)
   12788:	df000915 	stw	fp,36(sp)
   1278c:	ddc00815 	stw	r23,32(sp)
   12790:	dd800715 	stw	r22,28(sp)
   12794:	dd400615 	stw	r21,24(sp)
   12798:	dd000515 	stw	r20,20(sp)
   1279c:	dcc00415 	stw	r19,16(sp)
   127a0:	dc800315 	stw	r18,12(sp)
   127a4:	dc400215 	stw	r17,8(sp)
   127a8:	dc000115 	stw	r16,4(sp)
   127ac:	d9400b15 	stw	r5,44(sp)
   127b0:	d9800c15 	stw	r6,48(sp)
   127b4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   127b8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   127bc:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   127c0:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   127c4:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   127c8:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   127cc:	11000007 	ldb	r4,0(r2)
   127d0:	20003a26 	beq	r4,zero,128bc <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   127d4:	24000226 	beq	r4,r16,127e0 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   127d8:	14400044 	addi	r17,r2,1
   127dc:	00001406 	br	12830 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   127e0:	14400084 	addi	r17,r2,2
   127e4:	10800047 	ldb	r2,1(r2)
   127e8:	10003426 	beq	r2,zero,128bc <alt_printf+0x140>
            {
                if (c == '%')
   127ec:	1400021e 	bne	r2,r16,127f8 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   127f0:	8009883a 	mov	r4,r16
   127f4:	00000e06 	br	12830 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   127f8:	1480051e 	bne	r2,r18,12810 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   127fc:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   12800:	ad800104 	addi	r22,r21,4
   12804:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   12808:	00128ec0 	call	128ec <alt_putchar>
   1280c:	00002906 	br	128b4 <alt_printf+0x138>
                }
                else if (c == 'x')
   12810:	14c0201e 	bne	r2,r19,12894 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   12814:	adc00017 	ldw	r23,0(r21)
   12818:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   1281c:	b8000326 	beq	r23,zero,1282c <alt_printf+0xb0>
   12820:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   12824:	00c003c4 	movi	r3,15
   12828:	00000306 	br	12838 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   1282c:	01000c04 	movi	r4,48
   12830:	00128ec0 	call	128ec <alt_putchar>
                        continue;
   12834:	00001f06 	br	128b4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   12838:	1d84983a 	sll	r2,r3,r22
   1283c:	15c4703a 	and	r2,r2,r23
   12840:	1000021e 	bne	r2,zero,1284c <alt_printf+0xd0>
                        digit_shift -= 4;
   12844:	b5bfff04 	addi	r22,r22,-4
   12848:	003ffb06 	br	12838 <__alt_data_end+0xffff2838>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1284c:	070003c4 	movi	fp,15
                        if (digit <= 9)
   12850:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   12854:	b0001716 	blt	r22,zero,128b4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   12858:	e588983a 	sll	r4,fp,r22
   1285c:	25c8703a 	and	r4,r4,r23
   12860:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   12864:	19000236 	bltu	r3,r4,12870 <alt_printf+0xf4>
                            c = '0' + digit;
   12868:	21000c04 	addi	r4,r4,48
   1286c:	00000106 	br	12874 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   12870:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   12874:	21003fcc 	andi	r4,r4,255
   12878:	2100201c 	xori	r4,r4,128
   1287c:	213fe004 	addi	r4,r4,-128
   12880:	d8c00015 	stw	r3,0(sp)
   12884:	00128ec0 	call	128ec <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   12888:	b5bfff04 	addi	r22,r22,-4
   1288c:	d8c00017 	ldw	r3,0(sp)
   12890:	003ff006 	br	12854 <__alt_data_end+0xffff2854>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   12894:	1500071e 	bne	r2,r20,128b4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   12898:	ad800017 	ldw	r22,0(r21)
   1289c:	ad400104 	addi	r21,r21,4

                    while(*s)
   128a0:	b1000007 	ldb	r4,0(r22)
   128a4:	20000326 	beq	r4,zero,128b4 <alt_printf+0x138>
                      alt_putchar(*s++);
   128a8:	b5800044 	addi	r22,r22,1
   128ac:	00128ec0 	call	128ec <alt_putchar>
   128b0:	003ffb06 	br	128a0 <__alt_data_end+0xffff28a0>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   128b4:	8805883a 	mov	r2,r17
   128b8:	003fc406 	br	127cc <__alt_data_end+0xffff27cc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   128bc:	dfc00a17 	ldw	ra,40(sp)
   128c0:	df000917 	ldw	fp,36(sp)
   128c4:	ddc00817 	ldw	r23,32(sp)
   128c8:	dd800717 	ldw	r22,28(sp)
   128cc:	dd400617 	ldw	r21,24(sp)
   128d0:	dd000517 	ldw	r20,20(sp)
   128d4:	dcc00417 	ldw	r19,16(sp)
   128d8:	dc800317 	ldw	r18,12(sp)
   128dc:	dc400217 	ldw	r17,8(sp)
   128e0:	dc000117 	ldw	r16,4(sp)
   128e4:	dec00e04 	addi	sp,sp,56
   128e8:	f800283a 	ret

000128ec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   128ec:	defffd04 	addi	sp,sp,-12
   128f0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   128f4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   128f8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   128fc:	01000074 	movhi	r4,1
   12900:	000f883a 	mov	r7,zero
   12904:	01800044 	movi	r6,1
   12908:	d80b883a 	mov	r5,sp
   1290c:	210c9c04 	addi	r4,r4,12912
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   12910:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   12914:	0012a4c0 	call	12a4c <altera_avalon_jtag_uart_write>
   12918:	00ffffc4 	movi	r3,-1
   1291c:	10c00126 	beq	r2,r3,12924 <alt_putchar+0x38>
        return -1;
    }
    return c;
   12920:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   12924:	dfc00217 	ldw	ra,8(sp)
   12928:	dc000117 	ldw	r16,4(sp)
   1292c:	dec00304 	addi	sp,sp,12
   12930:	f800283a 	ret

00012934 <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12934:	d0e08017 	ldw	r3,-32256(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12938:	d0a07f17 	ldw	r2,-32260(gp)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1293c:	1800101e 	bne	r3,zero,12980 <times+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   12940:	d0a00917 	ldw	r2,-32732(gp)
   12944:	10000926 	beq	r2,zero,1296c <times+0x38>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   12948:	deffff04 	addi	sp,sp,-4
   1294c:	dfc00015 	stw	ra,0(sp)
   12950:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   12954:	00c01604 	movi	r3,88
   12958:	10c00015 	stw	r3,0(r2)
    return 0;
   1295c:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   12960:	dfc00017 	ldw	ra,0(sp)
   12964:	dec00104 	addi	sp,sp,4
   12968:	f800283a 	ret
   1296c:	d0a07a04 	addi	r2,gp,-32280

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   12970:	00c01604 	movi	r3,88
   12974:	10c00015 	stw	r3,0(r2)
    return 0;
   12978:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   1297c:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   12980:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
   12984:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
   12988:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
   1298c:	20000315 	stw	zero,12(r4)

  return ticks;
   12990:	f800283a 	ret

00012994 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   12994:	00800044 	movi	r2,1
   12998:	20800226 	beq	r4,r2,129a4 <write+0x10>
   1299c:	00800084 	movi	r2,2
   129a0:	2080041e 	bne	r4,r2,129b4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   129a4:	01000074 	movhi	r4,1
   129a8:	000f883a 	mov	r7,zero
   129ac:	210c9c04 	addi	r4,r4,12912
   129b0:	0012a4c1 	jmpi	12a4c <altera_avalon_jtag_uart_write>
   129b4:	d0a00917 	ldw	r2,-32732(gp)
   129b8:	10000926 	beq	r2,zero,129e0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   129bc:	deffff04 	addi	sp,sp,-4
   129c0:	dfc00015 	stw	ra,0(sp)
   129c4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   129c8:	00c01444 	movi	r3,81
   129cc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   129d0:	00bfffc4 	movi	r2,-1
   129d4:	dfc00017 	ldw	ra,0(sp)
   129d8:	dec00104 	addi	sp,sp,4
   129dc:	f800283a 	ret
   129e0:	d0a07a04 	addi	r2,gp,-32280
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   129e4:	00c01444 	movi	r3,81
   129e8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   129ec:	00bfffc4 	movi	r2,-1
   129f0:	f800283a 	ret

000129f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   129f4:	deffff04 	addi	sp,sp,-4
   129f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   129fc:	0012e200 	call	12e20 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12a00:	00800044 	movi	r2,1
   12a04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12a08:	dfc00017 	ldw	ra,0(sp)
   12a0c:	dec00104 	addi	sp,sp,4
   12a10:	f800283a 	ret

00012a14 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   12a14:	010000b4 	movhi	r4,2
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12a18:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   12a1c:	01c0fa04 	movi	r7,1000
   12a20:	018000c4 	movi	r6,3
   12a24:	000b883a 	mov	r5,zero
   12a28:	21040004 	addi	r4,r4,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12a2c:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   12a30:	0012abc0 	call	12abc <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12a34:	01000074 	movhi	r4,1
   12a38:	d1600504 	addi	r5,gp,-32748
   12a3c:	210c7804 	addi	r4,r4,12768
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
}
   12a40:	dfc00017 	ldw	ra,0(sp)
   12a44:	dec00104 	addi	sp,sp,4
   12a48:	0012c501 	jmpi	12c50 <alt_dev_llist_insert>

00012a4c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   12a4c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12a50:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   12a54:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12a58:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   12a5c:	2980072e 	bgeu	r5,r6,12a7c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   12a60:	38c00037 	ldwio	r3,0(r7)
   12a64:	18ffffec 	andhi	r3,r3,65535
   12a68:	183ffc26 	beq	r3,zero,12a5c <__alt_data_end+0xffff2a5c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   12a6c:	28c00007 	ldb	r3,0(r5)
   12a70:	20c00035 	stwio	r3,0(r4)
   12a74:	29400044 	addi	r5,r5,1
   12a78:	003ff806 	br	12a5c <__alt_data_end+0xffff2a5c>

  return count;
}
   12a7c:	f800283a 	ret

00012a80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12a80:	defffe04 	addi	sp,sp,-8
   12a84:	dfc00115 	stw	ra,4(sp)
   12a88:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12a8c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12a90:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a94:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a98:	00bfff84 	movi	r2,-2
   12a9c:	8084703a 	and	r2,r16,r2
   12aa0:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   12aa4:	0012d680 	call	12d68 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12aa8:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   12aac:	dfc00117 	ldw	ra,4(sp)
   12ab0:	dc000017 	ldw	r16,0(sp)
   12ab4:	dec00204 	addi	sp,sp,8
   12ab8:	f800283a 	ret

00012abc <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   12abc:	d0a08017 	ldw	r2,-32256(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   12ac0:	200b883a 	mov	r5,r4
   12ac4:	3009883a 	mov	r4,r6
   12ac8:	1000011e 	bne	r2,zero,12ad0 <alt_avalon_timer_sc_init+0x14>
  {
    _alt_tick_rate = nticks;
   12acc:	d1e08015 	stw	r7,-32256(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12ad0:	008001c4 	movi	r2,7
   12ad4:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   12ad8:	01800074 	movhi	r6,1
   12adc:	318aa004 	addi	r6,r6,10880
   12ae0:	00125dc1 	jmpi	125dc <alt_irq_register>

00012ae4 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   12ae4:	d1600504 	addi	r5,gp,-32748
   12ae8:	0012cbc1 	jmpi	12cbc <alt_find_dev>

00012aec <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   12aec:	20800a17 	ldw	r2,40(r4)
   12af0:	10800023 	ldbuio	r2,0(r2)
   12af4:	28800005 	stb	r2,0(r5)

	return 0;
}
   12af8:	0005883a 	mov	r2,zero
   12afc:	f800283a 	ret

00012b00 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12b00:	20800a17 	ldw	r2,40(r4)
   12b04:	29400fcc 	andi	r5,r5,63
   12b08:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12b0c:	20800a17 	ldw	r2,40(r4)
   12b10:	10800063 	ldbuio	r2,1(r2)
   12b14:	30800005 	stb	r2,0(r6)

	return 0;
}
   12b18:	0005883a 	mov	r2,zero
   12b1c:	f800283a 	ret

00012b20 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12b20:	20800a17 	ldw	r2,40(r4)
   12b24:	29400fcc 	andi	r5,r5,63
   12b28:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   12b2c:	20800a17 	ldw	r2,40(r4)
   12b30:	11800065 	stbio	r6,1(r2)

	return 0;
}
   12b34:	0005883a 	mov	r2,zero
   12b38:	f800283a 	ret

00012b3c <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12b3c:	20800a17 	ldw	r2,40(r4)
   12b40:	00c00c84 	movi	r3,50
   12b44:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12b48:	20800a17 	ldw	r2,40(r4)
   12b4c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12b50:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12b54:	10803fcc 	andi	r2,r2,255
   12b58:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12b5c:	20800a17 	ldw	r2,40(r4)
   12b60:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12b64:	20800a17 	ldw	r2,40(r4)
   12b68:	10800063 	ldbuio	r2,1(r2)
   12b6c:	10803fcc 	andi	r2,r2,255
   12b70:	1006923a 	slli	r3,r2,8
   12b74:	28800017 	ldw	r2,0(r5)
   12b78:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   12b7c:	10e0000c 	andi	r3,r2,32768
   12b80:	18000126 	beq	r3,zero,12b88 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   12b84:	10bffff4 	orhi	r2,r2,65535
   12b88:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12b8c:	0005883a 	mov	r2,zero
   12b90:	f800283a 	ret

00012b94 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12b94:	20800a17 	ldw	r2,40(r4)
   12b98:	00c00d04 	movi	r3,52
   12b9c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12ba0:	20800a17 	ldw	r2,40(r4)
   12ba4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12ba8:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12bac:	10803fcc 	andi	r2,r2,255
   12bb0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12bb4:	20800a17 	ldw	r2,40(r4)
   12bb8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12bbc:	20800a17 	ldw	r2,40(r4)
   12bc0:	10800063 	ldbuio	r2,1(r2)
   12bc4:	10803fcc 	andi	r2,r2,255
   12bc8:	1006923a 	slli	r3,r2,8
   12bcc:	28800017 	ldw	r2,0(r5)
   12bd0:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   12bd4:	10e0000c 	andi	r3,r2,32768
   12bd8:	18000126 	beq	r3,zero,12be0 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   12bdc:	10bffff4 	orhi	r2,r2,65535
   12be0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12be4:	0005883a 	mov	r2,zero
   12be8:	f800283a 	ret

00012bec <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12bec:	20800a17 	ldw	r2,40(r4)
   12bf0:	00c00d84 	movi	r3,54
   12bf4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12bf8:	20800a17 	ldw	r2,40(r4)
   12bfc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12c00:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12c04:	10803fcc 	andi	r2,r2,255
   12c08:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12c0c:	20800a17 	ldw	r2,40(r4)
   12c10:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12c14:	20800a17 	ldw	r2,40(r4)
   12c18:	10800063 	ldbuio	r2,1(r2)
   12c1c:	10803fcc 	andi	r2,r2,255
   12c20:	1006923a 	slli	r3,r2,8
   12c24:	28800017 	ldw	r2,0(r5)
   12c28:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   12c2c:	10e0000c 	andi	r3,r2,32768
   12c30:	18000126 	beq	r3,zero,12c38 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   12c34:	10bffff4 	orhi	r2,r2,65535
   12c38:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12c3c:	0005883a 	mov	r2,zero
   12c40:	f800283a 	ret

00012c44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12c44:	f800283a 	ret

00012c48 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   12c48:	3005883a 	mov	r2,r6
   12c4c:	f800283a 	ret

00012c50 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12c50:	20000226 	beq	r4,zero,12c5c <alt_dev_llist_insert+0xc>
   12c54:	20800217 	ldw	r2,8(r4)
   12c58:	1000101e 	bne	r2,zero,12c9c <alt_dev_llist_insert+0x4c>
   12c5c:	d0a00917 	ldw	r2,-32732(gp)
   12c60:	10000926 	beq	r2,zero,12c88 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12c64:	deffff04 	addi	sp,sp,-4
   12c68:	dfc00015 	stw	ra,0(sp)
   12c6c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12c70:	00c00584 	movi	r3,22
   12c74:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12c78:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12c7c:	dfc00017 	ldw	ra,0(sp)
   12c80:	dec00104 	addi	sp,sp,4
   12c84:	f800283a 	ret
   12c88:	d0a07a04 	addi	r2,gp,-32280
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12c8c:	00c00584 	movi	r3,22
   12c90:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   12c94:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   12c98:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   12c9c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12ca0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   12ca4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   12ca8:	28800017 	ldw	r2,0(r5)
   12cac:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   12cb0:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   12cb4:	0005883a 	mov	r2,zero
   12cb8:	f800283a 	ret

00012cbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12cbc:	defffb04 	addi	sp,sp,-20
   12cc0:	dcc00315 	stw	r19,12(sp)
   12cc4:	dc800215 	stw	r18,8(sp)
   12cc8:	dc400115 	stw	r17,4(sp)
   12ccc:	dc000015 	stw	r16,0(sp)
   12cd0:	dfc00415 	stw	ra,16(sp)
   12cd4:	2027883a 	mov	r19,r4
   12cd8:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   12cdc:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   12ce0:	00125680 	call	12568 <strlen>
   12ce4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12ce8:	84400726 	beq	r16,r17,12d08 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12cec:	81000217 	ldw	r4,8(r16)
   12cf0:	900d883a 	mov	r6,r18
   12cf4:	980b883a 	mov	r5,r19
   12cf8:	0012e9c0 	call	12e9c <memcmp>
   12cfc:	10000426 	beq	r2,zero,12d10 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   12d00:	84000017 	ldw	r16,0(r16)
   12d04:	003ff806 	br	12ce8 <__alt_data_end+0xffff2ce8>
  }
  
  /* No match found */
  
  return NULL;
   12d08:	0005883a 	mov	r2,zero
   12d0c:	00000106 	br	12d14 <alt_find_dev+0x58>
   12d10:	8005883a 	mov	r2,r16
}
   12d14:	dfc00417 	ldw	ra,16(sp)
   12d18:	dcc00317 	ldw	r19,12(sp)
   12d1c:	dc800217 	ldw	r18,8(sp)
   12d20:	dc400117 	ldw	r17,4(sp)
   12d24:	dc000017 	ldw	r16,0(sp)
   12d28:	dec00504 	addi	sp,sp,20
   12d2c:	f800283a 	ret

00012d30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12d30:	f800283a 	ret

00012d34 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d34:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d38:	00bfff84 	movi	r2,-2
   12d3c:	1884703a 	and	r2,r3,r2
   12d40:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12d44:	21400117 	ldw	r5,4(r4)
   12d48:	20800017 	ldw	r2,0(r4)
   12d4c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   12d50:	21400117 	ldw	r5,4(r4)
   12d54:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12d58:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   12d5c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d60:	1801703a 	wrctl	status,r3
   12d64:	f800283a 	ret

00012d68 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12d68:	d0a07f17 	ldw	r2,-32260(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12d6c:	defffb04 	addi	sp,sp,-20
   12d70:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12d74:	d4200a17 	ldw	r16,-32728(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12d78:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12d7c:	dc800215 	stw	r18,8(sp)
   12d80:	dc400115 	stw	r17,4(sp)
   12d84:	dfc00415 	stw	ra,16(sp)
   12d88:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12d8c:	d0a07f15 	stw	r2,-32260(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12d90:	d4600a04 	addi	r17,gp,-32728
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   12d94:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12d98:	84401a26 	beq	r16,r17,12e04 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12d9c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   12da0:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12da4:	10000326 	beq	r2,zero,12db4 <alt_tick+0x4c>
   12da8:	d0a07f17 	ldw	r2,-32260(gp)
   12dac:	1000011e 	bne	r2,zero,12db4 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   12db0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12db4:	d0e07f17 	ldw	r3,-32260(gp)
   12db8:	80800217 	ldw	r2,8(r16)
   12dbc:	18800f36 	bltu	r3,r2,12dfc <alt_tick+0x94>
   12dc0:	80800403 	ldbu	r2,16(r16)
   12dc4:	10000d1e 	bne	r2,zero,12dfc <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   12dc8:	80800317 	ldw	r2,12(r16)
   12dcc:	81000517 	ldw	r4,20(r16)
   12dd0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12dd4:	1000031e 	bne	r2,zero,12de4 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   12dd8:	8009883a 	mov	r4,r16
   12ddc:	0012d340 	call	12d34 <alt_alarm_stop>
   12de0:	00000606 	br	12dfc <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   12de4:	80c00217 	ldw	r3,8(r16)
   12de8:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12dec:	d0e07f17 	ldw	r3,-32260(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   12df0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12df4:	10c0012e 	bgeu	r2,r3,12dfc <alt_tick+0x94>
        {
          alarm->rollover = 1;
   12df8:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12dfc:	9821883a 	mov	r16,r19
   12e00:	003fe506 	br	12d98 <__alt_data_end+0xffff2d98>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   12e04:	dfc00417 	ldw	ra,16(sp)
   12e08:	dcc00317 	ldw	r19,12(sp)
   12e0c:	dc800217 	ldw	r18,8(sp)
   12e10:	dc400117 	ldw	r17,4(sp)
   12e14:	dc000017 	ldw	r16,0(sp)
   12e18:	dec00504 	addi	sp,sp,20
   12e1c:	f800283a 	ret

00012e20 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   12e20:	000170fa 	wrctl	ienable,zero
   12e24:	f800283a 	ret

00012e28 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   12e28:	213ffe84 	addi	r4,r4,-6
   12e2c:	008003c4 	movi	r2,15
   12e30:	11001636 	bltu	r2,r4,12e8c <alt_exception_cause_generated_bad_addr+0x64>
   12e34:	200890ba 	slli	r4,r4,2
   12e38:	00800074 	movhi	r2,1
   12e3c:	108b9304 	addi	r2,r2,11852
   12e40:	2089883a 	add	r4,r4,r2
   12e44:	20800017 	ldw	r2,0(r4)
   12e48:	1000683a 	jmp	r2
   12e4c:	00012e94 	movui	zero,1210
   12e50:	00012e94 	movui	zero,1210
   12e54:	00012e8c 	andi	zero,zero,1210
   12e58:	00012e8c 	andi	zero,zero,1210
   12e5c:	00012e8c 	andi	zero,zero,1210
   12e60:	00012e94 	movui	zero,1210
   12e64:	00012e8c 	andi	zero,zero,1210
   12e68:	00012e8c 	andi	zero,zero,1210
   12e6c:	00012e94 	movui	zero,1210
   12e70:	00012e94 	movui	zero,1210
   12e74:	00012e8c 	andi	zero,zero,1210
   12e78:	00012e94 	movui	zero,1210
   12e7c:	00012e8c 	andi	zero,zero,1210
   12e80:	00012e8c 	andi	zero,zero,1210
   12e84:	00012e8c 	andi	zero,zero,1210
   12e88:	00012e94 	movui	zero,1210
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12e8c:	0005883a 	mov	r2,zero
   12e90:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12e94:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   12e98:	f800283a 	ret

00012e9c <memcmp>:
   12e9c:	218d883a 	add	r6,r4,r6
   12ea0:	21800826 	beq	r4,r6,12ec4 <memcmp+0x28>
   12ea4:	20800003 	ldbu	r2,0(r4)
   12ea8:	28c00003 	ldbu	r3,0(r5)
   12eac:	10c00226 	beq	r2,r3,12eb8 <memcmp+0x1c>
   12eb0:	10c5c83a 	sub	r2,r2,r3
   12eb4:	f800283a 	ret
   12eb8:	21000044 	addi	r4,r4,1
   12ebc:	29400044 	addi	r5,r5,1
   12ec0:	003ff706 	br	12ea0 <__alt_data_end+0xffff2ea0>
   12ec4:	0005883a 	mov	r2,zero
   12ec8:	f800283a 	ret
